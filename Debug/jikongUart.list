
jikongUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e4  080036e4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080036e4  080036e4  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036e4  080036e4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080036ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000008c  08003778  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08003778  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba24  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbd  00000000  00000000  0002bad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00008141  00000000  00000000  0002d896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007f0  00000000  00000000  00036200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a34e  00000000  00000000  000369f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000027b2  00000000  00000000  00040d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000434f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d08  00000000  00000000  00043540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003498 	.word	0x08003498

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003498 	.word	0x08003498

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800015c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000160:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	2400      	movs	r4, #0
 8000164:	9404      	str	r4, [sp, #16]
 8000166:	9405      	str	r4, [sp, #20]
 8000168:	9406      	str	r4, [sp, #24]
 800016a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800016c:	4b2c      	ldr	r3, [pc, #176]	; (8000220 <MX_GPIO_Init+0xc4>)
 800016e:	699a      	ldr	r2, [r3, #24]
 8000170:	f042 0210 	orr.w	r2, r2, #16
 8000174:	619a      	str	r2, [r3, #24]
 8000176:	699a      	ldr	r2, [r3, #24]
 8000178:	f002 0210 	and.w	r2, r2, #16
 800017c:	9200      	str	r2, [sp, #0]
 800017e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000180:	699a      	ldr	r2, [r3, #24]
 8000182:	f042 0220 	orr.w	r2, r2, #32
 8000186:	619a      	str	r2, [r3, #24]
 8000188:	699a      	ldr	r2, [r3, #24]
 800018a:	f002 0220 	and.w	r2, r2, #32
 800018e:	9201      	str	r2, [sp, #4]
 8000190:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000192:	699a      	ldr	r2, [r3, #24]
 8000194:	f042 0204 	orr.w	r2, r2, #4
 8000198:	619a      	str	r2, [r3, #24]
 800019a:	699a      	ldr	r2, [r3, #24]
 800019c:	f002 0204 	and.w	r2, r2, #4
 80001a0:	9202      	str	r2, [sp, #8]
 80001a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a4:	699a      	ldr	r2, [r3, #24]
 80001a6:	f042 0208 	orr.w	r2, r2, #8
 80001aa:	619a      	str	r2, [r3, #24]
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	f003 0308 	and.w	r3, r3, #8
 80001b2:	9303      	str	r3, [sp, #12]
 80001b4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 80001b6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000224 <MX_GPIO_Init+0xc8>
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c0:	4648      	mov	r0, r9
 80001c2:	f000 fd5f 	bl	8000c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);
 80001c6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8000228 <MX_GPIO_Init+0xcc>
 80001ca:	4622      	mov	r2, r4
 80001cc:	2180      	movs	r1, #128	; 0x80
 80001ce:	4640      	mov	r0, r8
 80001d0:	f000 fd58 	bl	8000c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(test_GPIO_Port, test_Pin, GPIO_PIN_RESET);
 80001d4:	4f15      	ldr	r7, [pc, #84]	; (800022c <MX_GPIO_Init+0xd0>)
 80001d6:	4622      	mov	r2, r4
 80001d8:	2101      	movs	r1, #1
 80001da:	4638      	mov	r0, r7
 80001dc:	f000 fd52 	bl	8000c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80001e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e6:	2501      	movs	r5, #1
 80001e8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ea:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ec:	2602      	movs	r6, #2
 80001ee:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80001f0:	a904      	add	r1, sp, #16
 80001f2:	4648      	mov	r0, r9
 80001f4:	f000 fc34 	bl	8000a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : relay_Pin */
  GPIO_InitStruct.Pin = relay_Pin;
 80001f8:	2380      	movs	r3, #128	; 0x80
 80001fa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(relay_GPIO_Port, &GPIO_InitStruct);
 8000202:	a904      	add	r1, sp, #16
 8000204:	4640      	mov	r0, r8
 8000206:	f000 fc2b 	bl	8000a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_Pin */
  GPIO_InitStruct.Pin = test_Pin;
 800020a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000210:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8000212:	a904      	add	r1, sp, #16
 8000214:	4638      	mov	r0, r7
 8000216:	f000 fc23 	bl	8000a60 <HAL_GPIO_Init>

}
 800021a:	b009      	add	sp, #36	; 0x24
 800021c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000220:	40021000 	.word	0x40021000
 8000224:	40011000 	.word	0x40011000
 8000228:	40010800 	.word	0x40010800
 800022c:	40010c00 	.word	0x40010c00

08000230 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000230:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000232:	e7fe      	b.n	8000232 <Error_Handler+0x2>

08000234 <setTime>:
	if (hours > 24 || minuts > 59) return;                               // защита от дурака
 8000234:	2818      	cmp	r0, #24
 8000236:	d801      	bhi.n	800023c <setTime+0x8>
 8000238:	293b      	cmp	r1, #59	; 0x3b
 800023a:	d900      	bls.n	800023e <setTime+0xa>
 800023c:	4770      	bx	lr
void setTime (uint32_t hours, uint32_t minuts) {                         // установка времени
 800023e:	b508      	push	{r3, lr}
    sTime.Hours = hours;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <setTime+0x28>)
 8000242:	7018      	strb	r0, [r3, #0]
    sTime.Minutes = minuts;
 8000244:	7059      	strb	r1, [r3, #1]
    sTime.Seconds = 0;
 8000246:	2200      	movs	r2, #0
 8000248:	709a      	strb	r2, [r3, #2]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800024a:	4619      	mov	r1, r3
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <setTime+0x2c>)
 800024e:	f001 fa9f 	bl	8001790 <HAL_RTC_SetTime>
 8000252:	b900      	cbnz	r0, 8000256 <setTime+0x22>
}
 8000254:	bd08      	pop	{r3, pc}
           Error_Handler();                                              // Обработка ошибки
 8000256:	f7ff ffeb 	bl	8000230 <Error_Handler>
 800025a:	bf00      	nop
 800025c:	200002d8 	.word	0x200002d8
 8000260:	20000230 	.word	0x20000230

08000264 <MX_USART1_UART_Init>:
{
 8000264:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000266:	480a      	ldr	r0, [pc, #40]	; (8000290 <MX_USART1_UART_Init+0x2c>)
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <MX_USART1_UART_Init+0x30>)
 800026a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800026c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000270:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	2300      	movs	r3, #0
 8000274:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000276:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000278:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800027a:	220c      	movs	r2, #12
 800027c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000280:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000282:	f001 fcf3 	bl	8001c6c <HAL_UART_Init>
 8000286:	b900      	cbnz	r0, 800028a <MX_USART1_UART_Init+0x26>
}
 8000288:	bd08      	pop	{r3, pc}
    Error_Handler();
 800028a:	f7ff ffd1 	bl	8000230 <Error_Handler>
 800028e:	bf00      	nop
 8000290:	20000244 	.word	0x20000244
 8000294:	40013800 	.word	0x40013800

08000298 <MX_RTC_Init>:
{
 8000298:	b500      	push	{lr}
 800029a:	b083      	sub	sp, #12
  RTC_DateTypeDef DateToUpdate = {0};
 800029c:	2300      	movs	r3, #0
 800029e:	9301      	str	r3, [sp, #4]
  hrtc.Instance = RTC;
 80002a0:	480f      	ldr	r0, [pc, #60]	; (80002e0 <MX_RTC_Init+0x48>)
 80002a2:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <MX_RTC_Init+0x4c>)
 80002a4:	6002      	str	r2, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002a6:	f04f 32ff 	mov.w	r2, #4294967295
 80002aa:	6042      	str	r2, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80002ac:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002ae:	f001 fbdd 	bl	8001a6c <HAL_RTC_Init>
 80002b2:	b988      	cbnz	r0, 80002d8 <MX_RTC_Init+0x40>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80002b4:	2301      	movs	r3, #1
 80002b6:	f88d 3004 	strb.w	r3, [sp, #4]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80002ba:	f88d 3005 	strb.w	r3, [sp, #5]
  DateToUpdate.Date = 1;
 80002be:	f88d 3006 	strb.w	r3, [sp, #6]
  DateToUpdate.Year = 0;
 80002c2:	2200      	movs	r2, #0
 80002c4:	f88d 2007 	strb.w	r2, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80002c8:	a901      	add	r1, sp, #4
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_RTC_Init+0x48>)
 80002cc:	f001 fb48 	bl	8001960 <HAL_RTC_SetDate>
 80002d0:	b920      	cbnz	r0, 80002dc <MX_RTC_Init+0x44>
}
 80002d2:	b003      	add	sp, #12
 80002d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80002d8:	f7ff ffaa 	bl	8000230 <Error_Handler>
    Error_Handler();
 80002dc:	f7ff ffa8 	bl	8000230 <Error_Handler>
 80002e0:	20000230 	.word	0x20000230
 80002e4:	40002800 	.word	0x40002800

080002e8 <MX_USART2_UART_Init>:
{
 80002e8:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80002ea:	480a      	ldr	r0, [pc, #40]	; (8000314 <MX_USART2_UART_Init+0x2c>)
 80002ec:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <MX_USART2_UART_Init+0x30>)
 80002ee:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80002f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80002f4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	2300      	movs	r3, #0
 80002f8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002fa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002fc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fe:	220c      	movs	r2, #12
 8000300:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000304:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000306:	f001 fcb1 	bl	8001c6c <HAL_UART_Init>
 800030a:	b900      	cbnz	r0, 800030e <MX_USART2_UART_Init+0x26>
}
 800030c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800030e:	f7ff ff8f 	bl	8000230 <Error_Handler>
 8000312:	bf00      	nop
 8000314:	2000028c 	.word	0x2000028c
 8000318:	40004400 	.word	0x40004400

0800031c <SystemClock_Config>:
{
 800031c:	b500      	push	{lr}
 800031e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000320:	2228      	movs	r2, #40	; 0x28
 8000322:	2100      	movs	r1, #0
 8000324:	eb0d 0002 	add.w	r0, sp, r2
 8000328:	f001 ff80 	bl	800222c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	2300      	movs	r3, #0
 800032e:	9305      	str	r3, [sp, #20]
 8000330:	9306      	str	r3, [sp, #24]
 8000332:	9307      	str	r3, [sp, #28]
 8000334:	9308      	str	r3, [sp, #32]
 8000336:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	9302      	str	r3, [sp, #8]
 800033c:	9303      	str	r3, [sp, #12]
 800033e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000340:	2305      	movs	r3, #5
 8000342:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000348:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800034a:	2201      	movs	r2, #1
 800034c:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000350:	2202      	movs	r2, #2
 8000352:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000354:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000356:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800035a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	a80a      	add	r0, sp, #40	; 0x28
 800035e:	f000 fcbd 	bl	8000cdc <HAL_RCC_OscConfig>
 8000362:	b9c8      	cbnz	r0, 8000398 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000368:	2102      	movs	r1, #2
 800036a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000370:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000374:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000376:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000378:	a805      	add	r0, sp, #20
 800037a:	f000 fee1 	bl	8001140 <HAL_RCC_ClockConfig>
 800037e:	b968      	cbnz	r0, 800039c <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000380:	2301      	movs	r3, #1
 8000382:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000388:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	a801      	add	r0, sp, #4
 800038c:	f000 ffb4 	bl	80012f8 <HAL_RCCEx_PeriphCLKConfig>
 8000390:	b930      	cbnz	r0, 80003a0 <SystemClock_Config+0x84>
}
 8000392:	b015      	add	sp, #84	; 0x54
 8000394:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000398:	f7ff ff4a 	bl	8000230 <Error_Handler>
    Error_Handler();
 800039c:	f7ff ff48 	bl	8000230 <Error_Handler>
    Error_Handler();
 80003a0:	f7ff ff46 	bl	8000230 <Error_Handler>

080003a4 <main>:
{
 80003a4:	b500      	push	{lr}
 80003a6:	b083      	sub	sp, #12
  HAL_Init();
 80003a8:	f000 fa5a 	bl	8000860 <HAL_Init>
  SystemClock_Config();
 80003ac:	f7ff ffb6 	bl	800031c <SystemClock_Config>
  MX_GPIO_Init();
 80003b0:	f7ff fed4 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003b4:	f7ff ff56 	bl	8000264 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80003b8:	f7ff ff6e 	bl	8000298 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80003bc:	f7ff ff94 	bl	80002e8 <MX_USART2_UART_Init>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // Включаем прерывание по IDLE линии
 80003c0:	485b      	ldr	r0, [pc, #364]	; (8000530 <main+0x18c>)
 80003c2:	6802      	ldr	r2, [r0, #0]
 80003c4:	68d3      	ldr	r3, [r2, #12]
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);  // Включаем прерывание по IDLE линии
 80003cc:	4b59      	ldr	r3, [pc, #356]	; (8000534 <main+0x190>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	68d3      	ldr	r3, [r2, #12]
 80003d2:	f043 0310 	orr.w	r3, r3, #16
 80003d6:	60d3      	str	r3, [r2, #12]
  HAL_UART_Receive_IT(&huart1, bufRxPC, 11);     				  // запускаем прием данных
 80003d8:	220b      	movs	r2, #11
 80003da:	4957      	ldr	r1, [pc, #348]	; (8000538 <main+0x194>)
 80003dc:	f001 fee9 	bl	80021b2 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);  // выключим реле
 80003e0:	2200      	movs	r2, #0
 80003e2:	2180      	movs	r1, #128	; 0x80
 80003e4:	4855      	ldr	r0, [pc, #340]	; (800053c <main+0x198>)
 80003e6:	f000 fc4d 	bl	8000c84 <HAL_GPIO_WritePin>
  timeToCheckTime = HAL_GetTick();                                // захват таймера
 80003ea:	f000 fa57 	bl	800089c <HAL_GetTick>
 80003ee:	4b54      	ldr	r3, [pc, #336]	; (8000540 <main+0x19c>)
 80003f0:	6018      	str	r0, [r3, #0]
 80003f2:	e065      	b.n	80004c0 <main+0x11c>
		  if ((bufRxPC [0] == 'T') && bufRxPC [10] == ';') {                // проверим стартовый и стоповый байт
 80003f4:	4b50      	ldr	r3, [pc, #320]	; (8000538 <main+0x194>)
 80003f6:	7a9b      	ldrb	r3, [r3, #10]
 80003f8:	2b3b      	cmp	r3, #59	; 0x3b
 80003fa:	d168      	bne.n	80004ce <main+0x12a>
			  sscanf((char*)bufRxPC, "Time %2d:%2d;", &Hours, &Minutes);
 80003fc:	4e51      	ldr	r6, [pc, #324]	; (8000544 <main+0x1a0>)
 80003fe:	4d52      	ldr	r5, [pc, #328]	; (8000548 <main+0x1a4>)
 8000400:	4c4d      	ldr	r4, [pc, #308]	; (8000538 <main+0x194>)
 8000402:	4633      	mov	r3, r6
 8000404:	462a      	mov	r2, r5
 8000406:	4951      	ldr	r1, [pc, #324]	; (800054c <main+0x1a8>)
 8000408:	4620      	mov	r0, r4
 800040a:	f001 ff37 	bl	800227c <siscanf>
			  setTime (Hours, Minutes);
 800040e:	6831      	ldr	r1, [r6, #0]
 8000410:	6828      	ldr	r0, [r5, #0]
 8000412:	f7ff ff0f 	bl	8000234 <setTime>
			  bufRxPC [0] = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	7023      	strb	r3, [r4, #0]
			  bufRxPC [10] = 0;
 800041a:	72a3      	strb	r3, [r4, #10]
 800041c:	e057      	b.n	80004ce <main+0x12a>
		  if (bufRxBMS [0] == 0x4E && bufRxBMS [67] == 0x85) { //0x85       // проверим валидность
 800041e:	4b4c      	ldr	r3, [pc, #304]	; (8000550 <main+0x1ac>)
 8000420:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000424:	2b85      	cmp	r3, #133	; 0x85
 8000426:	d165      	bne.n	80004f4 <main+0x150>
			  percentBat = bufRxBMS [68];                                   // считаем проценты
 8000428:	4b49      	ldr	r3, [pc, #292]	; (8000550 <main+0x1ac>)
 800042a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800042e:	4b49      	ldr	r3, [pc, #292]	; (8000554 <main+0x1b0>)
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	e05f      	b.n	80004f4 <main+0x150>
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);                   // получаем время
 8000434:	4c48      	ldr	r4, [pc, #288]	; (8000558 <main+0x1b4>)
 8000436:	2200      	movs	r2, #0
 8000438:	4621      	mov	r1, r4
 800043a:	4848      	ldr	r0, [pc, #288]	; (800055c <main+0x1b8>)
 800043c:	f001 fa0a 	bl	8001854 <HAL_RTC_GetTime>
		  timeToCheckTime = HAL_GetTick();
 8000440:	f000 fa2c 	bl	800089c <HAL_GetTick>
 8000444:	4b3e      	ldr	r3, [pc, #248]	; (8000540 <main+0x19c>)
 8000446:	6018      	str	r0, [r3, #0]
		  sprintf((char*)bufTxPC , "Time %02d:%02d:%02d Battery: %02d %%", (int)sTime.Hours, (int)sTime.Minutes, (int)sTime.Seconds, (int)percentBat);
 8000448:	78a3      	ldrb	r3, [r4, #2]
 800044a:	4d45      	ldr	r5, [pc, #276]	; (8000560 <main+0x1bc>)
 800044c:	4a41      	ldr	r2, [pc, #260]	; (8000554 <main+0x1b0>)
 800044e:	6812      	ldr	r2, [r2, #0]
 8000450:	9201      	str	r2, [sp, #4]
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	7863      	ldrb	r3, [r4, #1]
 8000456:	7822      	ldrb	r2, [r4, #0]
 8000458:	4942      	ldr	r1, [pc, #264]	; (8000564 <main+0x1c0>)
 800045a:	4628      	mov	r0, r5
 800045c:	f001 feee 	bl	800223c <siprintf>
		  HAL_UART_Transmit_IT (&huart1, bufTxPC, 27);                      // отправляем в юарты данные
 8000460:	221b      	movs	r2, #27
 8000462:	4629      	mov	r1, r5
 8000464:	4832      	ldr	r0, [pc, #200]	; (8000530 <main+0x18c>)
 8000466:	f001 fc31 	bl	8001ccc <HAL_UART_Transmit_IT>
		  HAL_UART_Transmit_IT (&huart2, bufTxBMS, 21);
 800046a:	4c32      	ldr	r4, [pc, #200]	; (8000534 <main+0x190>)
 800046c:	2215      	movs	r2, #21
 800046e:	493e      	ldr	r1, [pc, #248]	; (8000568 <main+0x1c4>)
 8000470:	4620      	mov	r0, r4
 8000472:	f001 fc2b 	bl	8001ccc <HAL_UART_Transmit_IT>
		  HAL_UART_Receive_IT (&huart2, bufRxBMS, 267);
 8000476:	f240 120b 	movw	r2, #267	; 0x10b
 800047a:	4935      	ldr	r1, [pc, #212]	; (8000550 <main+0x1ac>)
 800047c:	4620      	mov	r0, r4
 800047e:	f001 fe98 	bl	80021b2 <HAL_UART_Receive_IT>
		  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);                       // моргаем лампочкой
 8000482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000486:	4839      	ldr	r0, [pc, #228]	; (800056c <main+0x1c8>)
 8000488:	f000 fc02 	bl	8000c90 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 800048c:	2101      	movs	r1, #1
 800048e:	4838      	ldr	r0, [pc, #224]	; (8000570 <main+0x1cc>)
 8000490:	f000 fbfe 	bl	8000c90 <HAL_GPIO_TogglePin>
 8000494:	e039      	b.n	800050a <main+0x166>
		  else if (percentBat <= ON_CHARGE && (sTime.Hours >= TIME_NIGHT1 || sTime.Hours < TIME_NIGHT2)) {   // если заряда меньше чем порог включения и нужное время
 8000496:	2b32      	cmp	r3, #50	; 0x32
 8000498:	d805      	bhi.n	80004a6 <main+0x102>
 800049a:	4a2f      	ldr	r2, [pc, #188]	; (8000558 <main+0x1b4>)
 800049c:	7812      	ldrb	r2, [r2, #0]
 800049e:	3a07      	subs	r2, #7
 80004a0:	b2d2      	uxtb	r2, r2
 80004a2:	2a0f      	cmp	r2, #15
 80004a4:	d83e      	bhi.n	8000524 <main+0x180>
		  else if (percentBat >= MAX_CHARGE || (sTime.Hours < TIME_NIGHT1 && sTime.Hours >= TIME_NIGHT2)) {  // если выше максимального заряда или время не подходящее
 80004a6:	2b5e      	cmp	r3, #94	; 0x5e
 80004a8:	d805      	bhi.n	80004b6 <main+0x112>
 80004aa:	4b2b      	ldr	r3, [pc, #172]	; (8000558 <main+0x1b4>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	3b07      	subs	r3, #7
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b0f      	cmp	r3, #15
 80004b4:	d804      	bhi.n	80004c0 <main+0x11c>
			  HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);                                 // выключить заряд
 80004b6:	2200      	movs	r2, #0
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	4820      	ldr	r0, [pc, #128]	; (800053c <main+0x198>)
 80004bc:	f000 fbe2 	bl	8000c84 <HAL_GPIO_WritePin>
	  if (dataPCOk) {                                                       // если есть новые данные
 80004c0:	4b2c      	ldr	r3, [pc, #176]	; (8000574 <main+0x1d0>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	b17b      	cbz	r3, 80004e6 <main+0x142>
		  if ((bufRxPC [0] == 'T') && bufRxPC [10] == ';') {                // проверим стартовый и стоповый байт
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <main+0x194>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b54      	cmp	r3, #84	; 0x54
 80004cc:	d092      	beq.n	80003f4 <main+0x50>
		  dataPCOk = 0;                                                     // сбросим готовность
 80004ce:	4b29      	ldr	r3, [pc, #164]	; (8000574 <main+0x1d0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
		  HAL_UART_AbortReceive_IT (&huart1);                               // выключим прием
 80004d4:	4c16      	ldr	r4, [pc, #88]	; (8000530 <main+0x18c>)
 80004d6:	4620      	mov	r0, r4
 80004d8:	f001 fc2e 	bl	8001d38 <HAL_UART_AbortReceive_IT>
		  HAL_UART_Receive_IT(&huart1, bufRxPC, 11);                        // Снова запускаем прием данных
 80004dc:	220b      	movs	r2, #11
 80004de:	4916      	ldr	r1, [pc, #88]	; (8000538 <main+0x194>)
 80004e0:	4620      	mov	r0, r4
 80004e2:	f001 fe66 	bl	80021b2 <HAL_UART_Receive_IT>
	  if (dataBMSOk) {                                                      // если есть данные с бмс
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <main+0x1d4>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b133      	cbz	r3, 80004fa <main+0x156>
		  if (bufRxBMS [0] == 0x4E && bufRxBMS [67] == 0x85) { //0x85       // проверим валидность
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <main+0x1ac>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b4e      	cmp	r3, #78	; 0x4e
 80004f2:	d094      	beq.n	800041e <main+0x7a>
		  dataBMSOk = 0;
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <main+0x1d4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
	  if (HAL_GetTick() - timeToCheckTime >= TIME_TO_CHECK) {               // переодическая функция
 80004fa:	f000 f9cf 	bl	800089c <HAL_GetTick>
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <main+0x19c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	1ac0      	subs	r0, r0, r3
 8000504:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000508:	d294      	bcs.n	8000434 <main+0x90>
	  if (percentBat >= 1 && percentBat <= 100) {                           // алгоритм включения/выключения
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <main+0x1b0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	2a63      	cmp	r2, #99	; 0x63
 8000512:	d8d5      	bhi.n	80004c0 <main+0x11c>
		  if (percentBat <= FORCE_ENABLE_CHARGE) {                          // если заряда меньше чем минимум зарядить в любом случае
 8000514:	2b23      	cmp	r3, #35	; 0x23
 8000516:	d8be      	bhi.n	8000496 <main+0xf2>
			  HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0x198>)
 800051e:	f000 fbb1 	bl	8000c84 <HAL_GPIO_WritePin>
 8000522:	e7cd      	b.n	80004c0 <main+0x11c>
			  HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_SET);                                   // заряжаем
 8000524:	2201      	movs	r2, #1
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x198>)
 800052a:	f000 fbab 	bl	8000c84 <HAL_GPIO_WritePin>
 800052e:	e7c7      	b.n	80004c0 <main+0x11c>
 8000530:	20000244 	.word	0x20000244
 8000534:	2000028c 	.word	0x2000028c
 8000538:	200001c8 	.word	0x200001c8
 800053c:	40010800 	.word	0x40010800
 8000540:	200002dc 	.word	0x200002dc
 8000544:	200000ac 	.word	0x200000ac
 8000548:	200000a8 	.word	0x200000a8
 800054c:	080034bc 	.word	0x080034bc
 8000550:	200000b0 	.word	0x200000b0
 8000554:	200002d4 	.word	0x200002d4
 8000558:	200002d8 	.word	0x200002d8
 800055c:	20000230 	.word	0x20000230
 8000560:	200001fc 	.word	0x200001fc
 8000564:	080034cc 	.word	0x080034cc
 8000568:	20000000 	.word	0x20000000
 800056c:	40011000 	.word	0x40011000
 8000570:	40010c00 	.word	0x40010c00
 8000574:	2000022f 	.word	0x2000022f
 8000578:	2000022e 	.word	0x2000022e

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_MspInit+0x3c>)
 8000580:	699a      	ldr	r2, [r3, #24]
 8000582:	f042 0201 	orr.w	r2, r2, #1
 8000586:	619a      	str	r2, [r3, #24]
 8000588:	699a      	ldr	r2, [r3, #24]
 800058a:	f002 0201 	and.w	r2, r2, #1
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	69da      	ldr	r2, [r3, #28]
 8000594:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000598:	61da      	str	r2, [r3, #28]
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <HAL_MspInit+0x40>)
 80005a6:	6853      	ldr	r3, [r2, #4]
 80005a8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	b002      	add	sp, #8
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010000 	.word	0x40010000

080005c0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80005c0:	6802      	ldr	r2, [r0, #0]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_RTC_MspInit+0x34>)
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d000      	beq.n	80005ca <HAL_RTC_MspInit+0xa>
 80005c8:	4770      	bx	lr
{
 80005ca:	b500      	push	{lr}
 80005cc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005ce:	f000 fb69 	bl	8000ca4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_RTC_MspInit+0x38>)
 80005d4:	69da      	ldr	r2, [r3, #28]
 80005d6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80005da:	61da      	str	r2, [r3, #28]
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_RTC_MspInit+0x3c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005ee:	b003      	add	sp, #12
 80005f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80005f4:	40002800 	.word	0x40002800
 80005f8:	40021000 	.word	0x40021000
 80005fc:	42420000 	.word	0x42420000

08000600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2300      	movs	r3, #0
 8000606:	9304      	str	r3, [sp, #16]
 8000608:	9305      	str	r3, [sp, #20]
 800060a:	9306      	str	r3, [sp, #24]
 800060c:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800060e:	6803      	ldr	r3, [r0, #0]
 8000610:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <HAL_UART_MspInit+0xe4>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d004      	beq.n	8000620 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000616:	4a34      	ldr	r2, [pc, #208]	; (80006e8 <HAL_UART_MspInit+0xe8>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d033      	beq.n	8000684 <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800061c:	b009      	add	sp, #36	; 0x24
 800061e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000620:	4b32      	ldr	r3, [pc, #200]	; (80006ec <HAL_UART_MspInit+0xec>)
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	699a      	ldr	r2, [r3, #24]
 800062c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	f042 0204 	orr.w	r2, r2, #4
 800063a:	619a      	str	r2, [r3, #24]
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800064a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000650:	2303      	movs	r3, #3
 8000652:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	4d26      	ldr	r5, [pc, #152]	; (80006f0 <HAL_UART_MspInit+0xf0>)
 8000656:	a904      	add	r1, sp, #16
 8000658:	4628      	mov	r0, r5
 800065a:	f000 fa01 	bl	8000a60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800065e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000662:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2400      	movs	r4, #0
 8000666:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	a904      	add	r1, sp, #16
 800066c:	4628      	mov	r0, r5
 800066e:	f000 f9f7 	bl	8000a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000672:	4622      	mov	r2, r4
 8000674:	4621      	mov	r1, r4
 8000676:	2025      	movs	r0, #37	; 0x25
 8000678:	f000 f928 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800067c:	2025      	movs	r0, #37	; 0x25
 800067e:	f000 f95d 	bl	800093c <HAL_NVIC_EnableIRQ>
 8000682:	e7cb      	b.n	800061c <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_UART_MspInit+0xec>)
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800068c:	61da      	str	r2, [r3, #28]
 800068e:	69da      	ldr	r2, [r3, #28]
 8000690:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000694:	9202      	str	r2, [sp, #8]
 8000696:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	699a      	ldr	r2, [r3, #24]
 800069a:	f042 0204 	orr.w	r2, r2, #4
 800069e:	619a      	str	r2, [r3, #24]
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	9303      	str	r3, [sp, #12]
 80006a8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006aa:	2304      	movs	r3, #4
 80006ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	4d0e      	ldr	r5, [pc, #56]	; (80006f0 <HAL_UART_MspInit+0xf0>)
 80006b8:	a904      	add	r1, sp, #16
 80006ba:	4628      	mov	r0, r5
 80006bc:	f000 f9d0 	bl	8000a60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c0:	2308      	movs	r3, #8
 80006c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2400      	movs	r4, #0
 80006c6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	a904      	add	r1, sp, #16
 80006cc:	4628      	mov	r0, r5
 80006ce:	f000 f9c7 	bl	8000a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006d2:	4622      	mov	r2, r4
 80006d4:	4621      	mov	r1, r4
 80006d6:	2026      	movs	r0, #38	; 0x26
 80006d8:	f000 f8f8 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006dc:	2026      	movs	r0, #38	; 0x26
 80006de:	f000 f92d 	bl	800093c <HAL_NVIC_EnableIRQ>
}
 80006e2:	e79b      	b.n	800061c <HAL_UART_MspInit+0x1c>
 80006e4:	40013800 	.word	0x40013800
 80006e8:	40004400 	.word	0x40004400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800

080006f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler>

080006f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <HardFault_Handler>

080006f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler>

080006fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler>

080006fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler>

080006fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	4770      	bx	lr

08000700 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	4770      	bx	lr

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000706:	f000 f8bd 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070a:	bd08      	pop	{r3, pc}

0800070c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800070c:	b500      	push	{lr}
 800070e:	b083      	sub	sp, #12
  /* USER CODE BEGIN USART1_IRQn 0 */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) { // костыли с обработкой по юарту
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <USART1_IRQHandler+0x30>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	f012 0f10 	tst.w	r2, #16
 800071a:	d009      	beq.n	8000730 <USART1_IRQHandler+0x24>
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);  			// Очищаем флаг IDLE
 800071c:	2200      	movs	r2, #0
 800071e:	9201      	str	r2, [sp, #4]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	9b01      	ldr	r3, [sp, #4]
        dataPCOk = 1;
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <USART1_IRQHandler+0x34>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <USART1_IRQHandler+0x30>)
 8000732:	f001 fbdf 	bl	8001ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000736:	b003      	add	sp, #12
 8000738:	f85d fb04 	ldr.w	pc, [sp], #4
 800073c:	20000244 	.word	0x20000244
 8000740:	2000022f 	.word	0x2000022f

08000744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000744:	b500      	push	{lr}
 8000746:	b083      	sub	sp, #12
  /* USER CODE BEGIN USART2_IRQn 0 */

    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) { // костыли с обработкой по юарту
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <USART2_IRQHandler+0x30>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	f012 0f10 	tst.w	r2, #16
 8000752:	d009      	beq.n	8000768 <USART2_IRQHandler+0x24>
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);  			// Очищаем флаг IDLE
 8000754:	2200      	movs	r2, #0
 8000756:	9201      	str	r2, [sp, #4]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	9201      	str	r2, [sp, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	9b01      	ldr	r3, [sp, #4]
        dataBMSOk = 1;
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <USART2_IRQHandler+0x34>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <USART2_IRQHandler+0x30>)
 800076a:	f001 fbc3 	bl	8001ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800076e:	b003      	add	sp, #12
 8000770:	f85d fb04 	ldr.w	pc, [sp], #4
 8000774:	2000028c 	.word	0x2000028c
 8000778:	2000022e 	.word	0x2000022e

0800077c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800077c:	b510      	push	{r4, lr}
 800077e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <_sbrk+0x38>)
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <_sbrk+0x40>)
 8000786:	6800      	ldr	r0, [r0, #0]
 8000788:	b140      	cbz	r0, 800079c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078a:	480c      	ldr	r0, [pc, #48]	; (80007bc <_sbrk+0x40>)
 800078c:	6800      	ldr	r0, [r0, #0]
 800078e:	4403      	add	r3, r0
 8000790:	1a52      	subs	r2, r2, r1
 8000792:	4293      	cmp	r3, r2
 8000794:	d806      	bhi.n	80007a4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <_sbrk+0x40>)
 8000798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800079a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <_sbrk+0x40>)
 800079e:	4c08      	ldr	r4, [pc, #32]	; (80007c0 <_sbrk+0x44>)
 80007a0:	6004      	str	r4, [r0, #0]
 80007a2:	e7f2      	b.n	800078a <_sbrk+0xe>
    errno = ENOMEM;
 80007a4:	f001 fd18 	bl	80021d8 <__errno>
 80007a8:	230c      	movs	r3, #12
 80007aa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	e7f3      	b.n	800079a <_sbrk+0x1e>
 80007b2:	bf00      	nop
 80007b4:	20005000 	.word	0x20005000
 80007b8:	00000400 	.word	0x00000400
 80007bc:	200002e0 	.word	0x200002e0
 80007c0:	200002f8 	.word	0x200002f8

080007c4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	4770      	bx	lr
	...

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c8:	f7ff fffc 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ce:	490c      	ldr	r1, [pc, #48]	; (8000800 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a09      	ldr	r2, [pc, #36]	; (8000808 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007e4:	4c09      	ldr	r4, [pc, #36]	; (800080c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f001 fcf7 	bl	80021e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fdd5 	bl	80003a4 <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000804:	080036ec 	.word	0x080036ec
  ldr r2, =_sbss
 8000808:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800080c:	200002f8 	.word	0x200002f8

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b510      	push	{r4, lr}
 8000816:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_InitTick+0x40>)
 800081a:	7818      	ldrb	r0, [r3, #0]
 800081c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000820:	fbb3 f3f0 	udiv	r3, r3, r0
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_InitTick+0x44>)
 8000826:	6810      	ldr	r0, [r2, #0]
 8000828:	fbb0 f0f3 	udiv	r0, r0, r3
 800082c:	f000 f894 	bl	8000958 <HAL_SYSTICK_Config>
 8000830:	b968      	cbnz	r0, 800084e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	2c0f      	cmp	r4, #15
 8000834:	d901      	bls.n	800083a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
 8000838:	e00a      	b.n	8000850 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083a:	2200      	movs	r2, #0
 800083c:	4621      	mov	r1, r4
 800083e:	f04f 30ff 	mov.w	r0, #4294967295
 8000842:	f000 f843 	bl	80008cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_InitTick+0x48>)
 8000848:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2000      	movs	r0, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800084e:	2001      	movs	r0, #1
}
 8000850:	bd10      	pop	{r4, pc}
 8000852:	bf00      	nop
 8000854:	20000020 	.word	0x20000020
 8000858:	2000001c 	.word	0x2000001c
 800085c:	20000024 	.word	0x20000024

08000860 <HAL_Init>:
{
 8000860:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x20>)
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f81b 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	200f      	movs	r0, #15
 8000874:	f7ff ffce 	bl	8000814 <HAL_InitTick>
  HAL_MspInit();
 8000878:	f7ff fe80 	bl	800057c <HAL_MspInit>
}
 800087c:	2000      	movs	r0, #0
 800087e:	bd08      	pop	{r3, pc}
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <HAL_IncTick+0x10>)
 8000886:	6811      	ldr	r1, [r2, #0]
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_IncTick+0x14>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	440b      	add	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200002e4 	.word	0x200002e4
 8000898:	20000020 	.word	0x20000020

0800089c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800089c:	4b01      	ldr	r3, [pc, #4]	; (80008a4 <HAL_GetTick+0x8>)
 800089e:	6818      	ldr	r0, [r3, #0]
}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200002e4 	.word	0x200002e4

080008a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008b0:	041b      	lsls	r3, r3, #16
 80008b2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b4:	0200      	lsls	r0, r0, #8
 80008b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80008c4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008cc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_NVIC_SetPriority+0x68>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d6:	f1c3 0c07 	rsb	ip, r3, #7
 80008da:	f1bc 0f04 	cmp.w	ip, #4
 80008de:	bf28      	it	cs
 80008e0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e4:	f103 0e04 	add.w	lr, r3, #4
 80008e8:	f1be 0f06 	cmp.w	lr, #6
 80008ec:	d918      	bls.n	8000920 <HAL_NVIC_SetPriority+0x54>
 80008ee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 3eff 	mov.w	lr, #4294967295
 80008f4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80008f8:	ea21 010c 	bic.w	r1, r1, ip
 80008fc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fe:	fa0e f303 	lsl.w	r3, lr, r3
 8000902:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000906:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000908:	2800      	cmp	r0, #0
 800090a:	db0b      	blt.n	8000924 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	0109      	lsls	r1, r1, #4
 800090e:	b2c9      	uxtb	r1, r1
 8000910:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000914:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000918:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800091c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000920:	2300      	movs	r3, #0
 8000922:	e7e5      	b.n	80008f0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	f000 000f 	and.w	r0, r0, #15
 8000928:	0109      	lsls	r1, r1, #4
 800092a:	b2c9      	uxtb	r1, r1
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_NVIC_SetPriority+0x6c>)
 800092e:	5419      	strb	r1, [r3, r0]
 8000930:	e7f4      	b.n	800091c <HAL_NVIC_SetPriority+0x50>
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	e000ed14 	.word	0xe000ed14

0800093c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800093c:	2800      	cmp	r0, #0
 800093e:	db07      	blt.n	8000950 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000940:	f000 021f 	and.w	r2, r0, #31
 8000944:	0940      	lsrs	r0, r0, #5
 8000946:	2301      	movs	r3, #1
 8000948:	4093      	lsls	r3, r2
 800094a:	4a02      	ldr	r2, [pc, #8]	; (8000954 <HAL_NVIC_EnableIRQ+0x18>)
 800094c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100

08000958 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	3801      	subs	r0, #1
 800095a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800095e:	d20b      	bcs.n	8000978 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000960:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000964:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <HAL_SYSTICK_Config+0x24>)
 8000968:	21f0      	movs	r1, #240	; 0xf0
 800096a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096e:	2000      	movs	r0, #0
 8000970:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	2207      	movs	r2, #7
 8000974:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000976:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000978:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000980:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d006      	beq.n	8000998 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098a:	2304      	movs	r3, #4
 800098c:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800098e:	2300      	movs	r3, #0
 8000990:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8000994:	2001      	movs	r0, #1
 8000996:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000998:	6802      	ldr	r2, [r0, #0]
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f023 030e 	bic.w	r3, r3, #14
 80009a0:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009a2:	6802      	ldr	r2, [r0, #0]
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f023 0301 	bic.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80009b0:	2201      	movs	r2, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009b8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009bc:	2300      	movs	r3, #0
 80009be:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 80009c2:	4618      	mov	r0, r3
}
 80009c4:	4770      	bx	lr
	...

080009c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009c8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009ca:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d003      	beq.n	80009dc <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d4:	2304      	movs	r3, #4
 80009d6:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80009da:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009dc:	6802      	ldr	r2, [r0, #0]
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	f023 030e 	bic.w	r3, r3, #14
 80009e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80009e6:	6802      	ldr	r2, [r0, #0]
 80009e8:	6813      	ldr	r3, [r2, #0]
 80009ea:	f023 0301 	bic.w	r3, r3, #1
 80009ee:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009f0:	6803      	ldr	r3, [r0, #0]
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_DMA_Abort_IT+0x90>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d014      	beq.n	8000a22 <HAL_DMA_Abort_IT+0x5a>
 80009f8:	3214      	adds	r2, #20
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d01f      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x76>
 80009fe:	3214      	adds	r2, #20
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d01e      	beq.n	8000a42 <HAL_DMA_Abort_IT+0x7a>
 8000a04:	3214      	adds	r2, #20
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d01e      	beq.n	8000a48 <HAL_DMA_Abort_IT+0x80>
 8000a0a:	3214      	adds	r2, #20
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d01e      	beq.n	8000a4e <HAL_DMA_Abort_IT+0x86>
 8000a10:	3214      	adds	r2, #20
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d002      	beq.n	8000a1c <HAL_DMA_Abort_IT+0x54>
 8000a16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a1a:	e003      	b.n	8000a24 <HAL_DMA_Abort_IT+0x5c>
 8000a1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a20:	e000      	b.n	8000a24 <HAL_DMA_Abort_IT+0x5c>
 8000a22:	2201      	movs	r2, #1
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_DMA_Abort_IT+0x94>)
 8000a26:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000a34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000a36:	b16b      	cbz	r3, 8000a54 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 8000a38:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e7cd      	b.n	80009da <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a3e:	2210      	movs	r2, #16
 8000a40:	e7f0      	b.n	8000a24 <HAL_DMA_Abort_IT+0x5c>
 8000a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a46:	e7ed      	b.n	8000a24 <HAL_DMA_Abort_IT+0x5c>
 8000a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4c:	e7ea      	b.n	8000a24 <HAL_DMA_Abort_IT+0x5c>
 8000a4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a52:	e7e7      	b.n	8000a24 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8000a54:	2000      	movs	r0, #0
 8000a56:	e7c0      	b.n	80009da <HAL_DMA_Abort_IT+0x12>
 8000a58:	40020008 	.word	0x40020008
 8000a5c:	40020000 	.word	0x40020000

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a64:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000a66:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a68:	e0a6      	b.n	8000bb8 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a6a:	4d80      	ldr	r5, [pc, #512]	; (8000c6c <HAL_GPIO_Init+0x20c>)
 8000a6c:	42aa      	cmp	r2, r5
 8000a6e:	d010      	beq.n	8000a92 <HAL_GPIO_Init+0x32>
 8000a70:	d907      	bls.n	8000a82 <HAL_GPIO_Init+0x22>
 8000a72:	4d7f      	ldr	r5, [pc, #508]	; (8000c70 <HAL_GPIO_Init+0x210>)
 8000a74:	42aa      	cmp	r2, r5
 8000a76:	d00c      	beq.n	8000a92 <HAL_GPIO_Init+0x32>
 8000a78:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000a7c:	42aa      	cmp	r2, r5
 8000a7e:	d008      	beq.n	8000a92 <HAL_GPIO_Init+0x32>
 8000a80:	e013      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
 8000a82:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000a86:	42aa      	cmp	r2, r5
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_Init+0x32>
 8000a8a:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8000a8e:	42aa      	cmp	r2, r5
 8000a90:	d107      	bne.n	8000aa2 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a92:	688a      	ldr	r2, [r1, #8]
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d058      	beq.n	8000b4a <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a98:	2a01      	cmp	r2, #1
 8000a9a:	d051      	beq.n	8000b40 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000a9c:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a9e:	2408      	movs	r4, #8
 8000aa0:	e003      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000aa2:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000aa6:	42aa      	cmp	r2, r5
 8000aa8:	d0f3      	beq.n	8000a92 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aaa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000aae:	d84e      	bhi.n	8000b4e <HAL_GPIO_Init+0xee>
 8000ab0:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000ab6:	d84c      	bhi.n	8000b52 <HAL_GPIO_Init+0xf2>
 8000ab8:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000abc:	6833      	ldr	r3, [r6, #0]
 8000abe:	250f      	movs	r5, #15
 8000ac0:	4095      	lsls	r5, r2
 8000ac2:	ea23 0305 	bic.w	r3, r3, r5
 8000ac6:	fa04 f202 	lsl.w	r2, r4, r2
 8000aca:	4313      	orrs	r3, r2
 8000acc:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	684b      	ldr	r3, [r1, #4]
 8000ad0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ad4:	d06e      	beq.n	8000bb4 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad6:	4b67      	ldr	r3, [pc, #412]	; (8000c74 <HAL_GPIO_Init+0x214>)
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	f042 0201 	orr.w	r2, r2, #1
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000aea:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000aee:	1c95      	adds	r5, r2, #2
 8000af0:	4b61      	ldr	r3, [pc, #388]	; (8000c78 <HAL_GPIO_Init+0x218>)
 8000af2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000af6:	f00c 0303 	and.w	r3, ip, #3
 8000afa:	009d      	lsls	r5, r3, #2
 8000afc:	230f      	movs	r3, #15
 8000afe:	40ab      	lsls	r3, r5
 8000b00:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b04:	4b5d      	ldr	r3, [pc, #372]	; (8000c7c <HAL_GPIO_Init+0x21c>)
 8000b06:	4298      	cmp	r0, r3
 8000b08:	d029      	beq.n	8000b5e <HAL_GPIO_Init+0xfe>
 8000b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	f000 808e 	beq.w	8000c30 <HAL_GPIO_Init+0x1d0>
 8000b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b18:	4298      	cmp	r0, r3
 8000b1a:	f000 808b 	beq.w	8000c34 <HAL_GPIO_Init+0x1d4>
 8000b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b22:	4298      	cmp	r0, r3
 8000b24:	d019      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e01a      	b.n	8000b60 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b2a:	68cc      	ldr	r4, [r1, #12]
          break;
 8000b2c:	e7bd      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b2e:	68cc      	ldr	r4, [r1, #12]
 8000b30:	3404      	adds	r4, #4
          break;
 8000b32:	e7ba      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b34:	68cc      	ldr	r4, [r1, #12]
 8000b36:	3408      	adds	r4, #8
          break;
 8000b38:	e7b7      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b3a:	68cc      	ldr	r4, [r1, #12]
 8000b3c:	340c      	adds	r4, #12
          break;
 8000b3e:	e7b4      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000b40:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b42:	2408      	movs	r4, #8
 8000b44:	e7b1      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b46:	2400      	movs	r4, #0
 8000b48:	e7af      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b4a:	2404      	movs	r4, #4
 8000b4c:	e7ad      	b.n	8000aaa <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b4e:	1d06      	adds	r6, r0, #4
 8000b50:	e7af      	b.n	8000ab2 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b52:	f1ac 0208 	sub.w	r2, ip, #8
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	e7b0      	b.n	8000abc <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e000      	b.n	8000b60 <HAL_GPIO_Init+0x100>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	40ab      	lsls	r3, r5
 8000b62:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000b64:	3202      	adds	r2, #2
 8000b66:	4d44      	ldr	r5, [pc, #272]	; (8000c78 <HAL_GPIO_Init+0x218>)
 8000b68:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b6c:	684b      	ldr	r3, [r1, #4]
 8000b6e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b72:	d061      	beq.n	8000c38 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b74:	4a42      	ldr	r2, [pc, #264]	; (8000c80 <HAL_GPIO_Init+0x220>)
 8000b76:	6893      	ldr	r3, [r2, #8]
 8000b78:	ea43 030e 	orr.w	r3, r3, lr
 8000b7c:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7e:	684b      	ldr	r3, [r1, #4]
 8000b80:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000b84:	d05e      	beq.n	8000c44 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b86:	4a3e      	ldr	r2, [pc, #248]	; (8000c80 <HAL_GPIO_Init+0x220>)
 8000b88:	68d3      	ldr	r3, [r2, #12]
 8000b8a:	ea43 030e 	orr.w	r3, r3, lr
 8000b8e:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b90:	684b      	ldr	r3, [r1, #4]
 8000b92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b96:	d05b      	beq.n	8000c50 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b98:	4a39      	ldr	r2, [pc, #228]	; (8000c80 <HAL_GPIO_Init+0x220>)
 8000b9a:	6853      	ldr	r3, [r2, #4]
 8000b9c:	ea43 030e 	orr.w	r3, r3, lr
 8000ba0:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba2:	684b      	ldr	r3, [r1, #4]
 8000ba4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ba8:	d058      	beq.n	8000c5c <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000baa:	4a35      	ldr	r2, [pc, #212]	; (8000c80 <HAL_GPIO_Init+0x220>)
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	ea43 030e 	orr.w	r3, r3, lr
 8000bb2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000bb4:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb8:	680a      	ldr	r2, [r1, #0]
 8000bba:	fa32 f30c 	lsrs.w	r3, r2, ip
 8000bbe:	d053      	beq.n	8000c68 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc6:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8000bca:	ea33 0202 	bics.w	r2, r3, r2
 8000bce:	d1f1      	bne.n	8000bb4 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8000bd0:	684a      	ldr	r2, [r1, #4]
 8000bd2:	2a12      	cmp	r2, #18
 8000bd4:	f63f af49 	bhi.w	8000a6a <HAL_GPIO_Init+0xa>
 8000bd8:	2a12      	cmp	r2, #18
 8000bda:	f63f af66 	bhi.w	8000aaa <HAL_GPIO_Init+0x4a>
 8000bde:	a501      	add	r5, pc, #4	; (adr r5, 8000be4 <HAL_GPIO_Init+0x184>)
 8000be0:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000be4:	08000a93 	.word	0x08000a93
 8000be8:	08000b2b 	.word	0x08000b2b
 8000bec:	08000b35 	.word	0x08000b35
 8000bf0:	08000b47 	.word	0x08000b47
 8000bf4:	08000aab 	.word	0x08000aab
 8000bf8:	08000aab 	.word	0x08000aab
 8000bfc:	08000aab 	.word	0x08000aab
 8000c00:	08000aab 	.word	0x08000aab
 8000c04:	08000aab 	.word	0x08000aab
 8000c08:	08000aab 	.word	0x08000aab
 8000c0c:	08000aab 	.word	0x08000aab
 8000c10:	08000aab 	.word	0x08000aab
 8000c14:	08000aab 	.word	0x08000aab
 8000c18:	08000aab 	.word	0x08000aab
 8000c1c:	08000aab 	.word	0x08000aab
 8000c20:	08000aab 	.word	0x08000aab
 8000c24:	08000aab 	.word	0x08000aab
 8000c28:	08000b2f 	.word	0x08000b2f
 8000c2c:	08000b3b 	.word	0x08000b3b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c30:	2301      	movs	r3, #1
 8000c32:	e795      	b.n	8000b60 <HAL_GPIO_Init+0x100>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e793      	b.n	8000b60 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c38:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <HAL_GPIO_Init+0x220>)
 8000c3a:	6893      	ldr	r3, [r2, #8]
 8000c3c:	ea23 030e 	bic.w	r3, r3, lr
 8000c40:	6093      	str	r3, [r2, #8]
 8000c42:	e79c      	b.n	8000b7e <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_GPIO_Init+0x220>)
 8000c46:	68d3      	ldr	r3, [r2, #12]
 8000c48:	ea23 030e 	bic.w	r3, r3, lr
 8000c4c:	60d3      	str	r3, [r2, #12]
 8000c4e:	e79f      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <HAL_GPIO_Init+0x220>)
 8000c52:	6853      	ldr	r3, [r2, #4]
 8000c54:	ea23 030e 	bic.w	r3, r3, lr
 8000c58:	6053      	str	r3, [r2, #4]
 8000c5a:	e7a2      	b.n	8000ba2 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_GPIO_Init+0x220>)
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	ea23 030e 	bic.w	r3, r3, lr
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e7a5      	b.n	8000bb4 <HAL_GPIO_Init+0x154>
  }
}
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd70      	pop	{r4, r5, r6, pc}
 8000c6c:	10220000 	.word	0x10220000
 8000c70:	10310000 	.word	0x10310000
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010400 	.word	0x40010400

08000c84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c84:	b10a      	cbz	r2, 8000c8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c86:	6101      	str	r1, [r0, #16]
 8000c88:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c8a:	0409      	lsls	r1, r1, #16
 8000c8c:	6101      	str	r1, [r0, #16]
  }
}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c90:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c92:	ea01 0203 	and.w	r2, r1, r3
 8000c96:	ea21 0103 	bic.w	r1, r1, r3
 8000c9a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000c9e:	6101      	str	r1, [r0, #16]
}
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000ca4:	4b01      	ldr	r3, [pc, #4]	; (8000cac <HAL_PWR_EnableBkUpAccess+0x8>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	621a      	str	r2, [r3, #32]
}
 8000caa:	4770      	bx	lr
 8000cac:	420e0000 	.word	0x420e0000

08000cb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000cb0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <RCC_Delay+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <RCC_Delay+0x28>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0a5b      	lsrs	r3, r3, #9
 8000cbe:	fb00 f303 	mul.w	r3, r0, r3
 8000cc2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000cc4:	bf00      	nop
  }
  while (Delay --);
 8000cc6:	9b01      	ldr	r3, [sp, #4]
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	9201      	str	r2, [sp, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f9      	bne.n	8000cc4 <RCC_Delay+0x14>
}
 8000cd0:	b002      	add	sp, #8
 8000cd2:	4770      	bx	lr
 8000cd4:	2000001c 	.word	0x2000001c
 8000cd8:	10624dd3 	.word	0x10624dd3

08000cdc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	f000 81f1 	beq.w	80010c4 <HAL_RCC_OscConfig+0x3e8>
{
 8000ce2:	b570      	push	{r4, r5, r6, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce8:	6803      	ldr	r3, [r0, #0]
 8000cea:	f013 0f01 	tst.w	r3, #1
 8000cee:	d02c      	beq.n	8000d4a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf0:	4b99      	ldr	r3, [pc, #612]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d01d      	beq.n	8000d38 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cfc:	4b96      	ldr	r3, [pc, #600]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 030c 	and.w	r3, r3, #12
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d012      	beq.n	8000d2e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d08:	6863      	ldr	r3, [r4, #4]
 8000d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0e:	d041      	beq.n	8000d94 <HAL_RCC_OscConfig+0xb8>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d155      	bne.n	8000dc0 <HAL_RCC_OscConfig+0xe4>
 8000d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d18:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e037      	b.n	8000d9e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d2e:	4b8a      	ldr	r3, [pc, #552]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d36:	d0e7      	beq.n	8000d08 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d38:	4b87      	ldr	r3, [pc, #540]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d40:	d003      	beq.n	8000d4a <HAL_RCC_OscConfig+0x6e>
 8000d42:	6863      	ldr	r3, [r4, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 81bf 	beq.w	80010c8 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	f013 0f02 	tst.w	r3, #2
 8000d50:	d075      	beq.n	8000e3e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d52:	4b81      	ldr	r3, [pc, #516]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f013 0f0c 	tst.w	r3, #12
 8000d5a:	d05f      	beq.n	8000e1c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d5c:	4b7e      	ldr	r3, [pc, #504]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d054      	beq.n	8000e12 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d68:	6923      	ldr	r3, [r4, #16]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 808a 	beq.w	8000e84 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8000d70:	4b7a      	ldr	r3, [pc, #488]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d76:	f7ff fd91 	bl	800089c <HAL_GetTick>
 8000d7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7c:	4b76      	ldr	r3, [pc, #472]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f013 0f02 	tst.w	r3, #2
 8000d84:	d175      	bne.n	8000e72 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d86:	f7ff fd89 	bl	800089c <HAL_GetTick>
 8000d8a:	1b40      	subs	r0, r0, r5
 8000d8c:	2802      	cmp	r0, #2
 8000d8e:	d9f5      	bls.n	8000d7c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000d90:	2003      	movs	r0, #3
 8000d92:	e19e      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d94:	4a70      	ldr	r2, [pc, #448]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9e:	6863      	ldr	r3, [r4, #4]
 8000da0:	b343      	cbz	r3, 8000df4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000da2:	f7ff fd7b 	bl	800089c <HAL_GetTick>
 8000da6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da8:	4b6b      	ldr	r3, [pc, #428]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000db0:	d1cb      	bne.n	8000d4a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db2:	f7ff fd73 	bl	800089c <HAL_GetTick>
 8000db6:	1b40      	subs	r0, r0, r5
 8000db8:	2864      	cmp	r0, #100	; 0x64
 8000dba:	d9f5      	bls.n	8000da8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	e188      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc4:	d009      	beq.n	8000dda <HAL_RCC_OscConfig+0xfe>
 8000dc6:	4b64      	ldr	r3, [pc, #400]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e7e1      	b.n	8000d9e <HAL_RCC_OscConfig+0xc2>
 8000dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dde:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e7d4      	b.n	8000d9e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000df4:	f7ff fd52 	bl	800089c <HAL_GetTick>
 8000df8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfa:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e02:	d0a2      	beq.n	8000d4a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e04:	f7ff fd4a 	bl	800089c <HAL_GetTick>
 8000e08:	1b40      	subs	r0, r0, r5
 8000e0a:	2864      	cmp	r0, #100	; 0x64
 8000e0c:	d9f5      	bls.n	8000dfa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000e0e:	2003      	movs	r0, #3
 8000e10:	e15f      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e12:	4b51      	ldr	r3, [pc, #324]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e1a:	d1a5      	bne.n	8000d68 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1c:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f013 0f02 	tst.w	r3, #2
 8000e24:	d003      	beq.n	8000e2e <HAL_RCC_OscConfig+0x152>
 8000e26:	6923      	ldr	r3, [r4, #16]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	f040 814f 	bne.w	80010cc <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4a4a      	ldr	r2, [pc, #296]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000e30:	6813      	ldr	r3, [r2, #0]
 8000e32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e36:	6961      	ldr	r1, [r4, #20]
 8000e38:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e3c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	f013 0f08 	tst.w	r3, #8
 8000e44:	d033      	beq.n	8000eae <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e46:	69a3      	ldr	r3, [r4, #24]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d05c      	beq.n	8000f06 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000e54:	f7ff fd22 	bl	800089c <HAL_GetTick>
 8000e58:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f013 0f02 	tst.w	r3, #2
 8000e62:	d121      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff fd1a 	bl	800089c <HAL_GetTick>
 8000e68:	1b40      	subs	r0, r0, r5
 8000e6a:	2802      	cmp	r0, #2
 8000e6c:	d9f5      	bls.n	8000e5a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8000e6e:	2003      	movs	r0, #3
 8000e70:	e12f      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e72:	4a39      	ldr	r2, [pc, #228]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000e74:	6813      	ldr	r3, [r2, #0]
 8000e76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e7a:	6961      	ldr	r1, [r4, #20]
 8000e7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e7dc      	b.n	8000e3e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fd07 	bl	800089c <HAL_GetTick>
 8000e8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f013 0f02 	tst.w	r3, #2
 8000e98:	d0d1      	beq.n	8000e3e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fcff 	bl	800089c <HAL_GetTick>
 8000e9e:	1b40      	subs	r0, r0, r5
 8000ea0:	2802      	cmp	r0, #2
 8000ea2:	d9f5      	bls.n	8000e90 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	e114      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ff01 	bl	8000cb0 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	f013 0f04 	tst.w	r3, #4
 8000eb4:	f000 8096 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ec0:	d134      	bne.n	8000f2c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000ec4:	69da      	ldr	r2, [r3, #28]
 8000ec6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eca:	61da      	str	r2, [r3, #28]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ed6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_RCC_OscConfig+0x284>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ee0:	d026      	beq.n	8000f30 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee2:	68e3      	ldr	r3, [r4, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d03d      	beq.n	8000f64 <HAL_RCC_OscConfig+0x288>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d153      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2b8>
 8000eec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ef0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ef4:	6a1a      	ldr	r2, [r3, #32]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	6a1a      	ldr	r2, [r3, #32]
 8000efe:	f022 0204 	bic.w	r2, r2, #4
 8000f02:	621a      	str	r2, [r3, #32]
 8000f04:	e033      	b.n	8000f6e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fcc5 	bl	800089c <HAL_GetTick>
 8000f12:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_RCC_OscConfig+0x27c>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	f013 0f02 	tst.w	r3, #2
 8000f1c:	d0c7      	beq.n	8000eae <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fcbd 	bl	800089c <HAL_GetTick>
 8000f22:	1b40      	subs	r0, r0, r5
 8000f24:	2802      	cmp	r0, #2
 8000f26:	d9f5      	bls.n	8000f14 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8000f28:	2003      	movs	r0, #3
 8000f2a:	e0d2      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	e7d3      	b.n	8000ed8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_RCC_OscConfig+0x284>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f38:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fcaf 	bl	800089c <HAL_GetTick>
 8000f3e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_RCC_OscConfig+0x284>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f48:	d1cb      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4a:	f7ff fca7 	bl	800089c <HAL_GetTick>
 8000f4e:	1b80      	subs	r0, r0, r6
 8000f50:	2864      	cmp	r0, #100	; 0x64
 8000f52:	d9f5      	bls.n	8000f40 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8000f54:	2003      	movs	r0, #3
 8000f56:	e0bc      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	42420000 	.word	0x42420000
 8000f60:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f64:	4a5f      	ldr	r2, [pc, #380]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8000f66:	6a13      	ldr	r3, [r2, #32]
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f6e:	68e3      	ldr	r3, [r4, #12]
 8000f70:	b333      	cbz	r3, 8000fc0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000f72:	f7ff fc93 	bl	800089c <HAL_GetTick>
 8000f76:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f78:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f013 0f02 	tst.w	r3, #2
 8000f80:	d12f      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f82:	f7ff fc8b 	bl	800089c <HAL_GetTick>
 8000f86:	1b80      	subs	r0, r0, r6
 8000f88:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f8c:	4298      	cmp	r0, r3
 8000f8e:	d9f3      	bls.n	8000f78 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8000f90:	2003      	movs	r0, #3
 8000f92:	e09e      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d009      	beq.n	8000fac <HAL_RCC_OscConfig+0x2d0>
 8000f98:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8000f9a:	6a1a      	ldr	r2, [r3, #32]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	6a1a      	ldr	r2, [r3, #32]
 8000fa4:	f022 0204 	bic.w	r2, r2, #4
 8000fa8:	621a      	str	r2, [r3, #32]
 8000faa:	e7e0      	b.n	8000f6e <HAL_RCC_OscConfig+0x292>
 8000fac:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8000fae:	6a1a      	ldr	r2, [r3, #32]
 8000fb0:	f042 0204 	orr.w	r2, r2, #4
 8000fb4:	621a      	str	r2, [r3, #32]
 8000fb6:	6a1a      	ldr	r2, [r3, #32]
 8000fb8:	f042 0201 	orr.w	r2, r2, #1
 8000fbc:	621a      	str	r2, [r3, #32]
 8000fbe:	e7d6      	b.n	8000f6e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fc6c 	bl	800089c <HAL_GetTick>
 8000fc4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc6:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	f013 0f02 	tst.w	r3, #2
 8000fce:	d008      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fc64 	bl	800089c <HAL_GetTick>
 8000fd4:	1b80      	subs	r0, r0, r6
 8000fd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d9f3      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
 8000fe0:	e077      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8000fe2:	b9e5      	cbnz	r5, 800101e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe4:	69e3      	ldr	r3, [r4, #28]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d072      	beq.n	80010d0 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fea:	4a3e      	ldr	r2, [pc, #248]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8000fec:	6852      	ldr	r2, [r2, #4]
 8000fee:	f002 020c 	and.w	r2, r2, #12
 8000ff2:	2a08      	cmp	r2, #8
 8000ff4:	d056      	beq.n	80010a4 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d017      	beq.n	800102a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <HAL_RCC_OscConfig+0x40c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001000:	f7ff fc4c 	bl	800089c <HAL_GetTick>
 8001004:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001006:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800100e:	d047      	beq.n	80010a0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001010:	f7ff fc44 	bl	800089c <HAL_GetTick>
 8001014:	1b00      	subs	r0, r0, r4
 8001016:	2802      	cmp	r0, #2
 8001018:	d9f5      	bls.n	8001006 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
 800101c:	e059      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800101e:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8001020:	69d3      	ldr	r3, [r2, #28]
 8001022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001026:	61d3      	str	r3, [r2, #28]
 8001028:	e7dc      	b.n	8000fe4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_RCC_OscConfig+0x40c>)
 800102c:	2200      	movs	r2, #0
 800102e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001030:	f7ff fc34 	bl	800089c <HAL_GetTick>
 8001034:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800103e:	d006      	beq.n	800104e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001040:	f7ff fc2c 	bl	800089c <HAL_GetTick>
 8001044:	1b40      	subs	r0, r0, r5
 8001046:	2802      	cmp	r0, #2
 8001048:	d9f5      	bls.n	8001036 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800104a:	2003      	movs	r0, #3
 800104c:	e041      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800104e:	6a23      	ldr	r3, [r4, #32]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d01a      	beq.n	800108c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001056:	4923      	ldr	r1, [pc, #140]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8001058:	684b      	ldr	r3, [r1, #4]
 800105a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800105e:	6a22      	ldr	r2, [r4, #32]
 8001060:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001062:	4302      	orrs	r2, r0
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <HAL_RCC_OscConfig+0x40c>)
 800106a:	2201      	movs	r2, #1
 800106c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800106e:	f7ff fc15 	bl	800089c <HAL_GetTick>
 8001072:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800107c:	d10e      	bne.n	800109c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff fc0d 	bl	800089c <HAL_GetTick>
 8001082:	1b00      	subs	r0, r0, r4
 8001084:	2802      	cmp	r0, #2
 8001086:	d9f5      	bls.n	8001074 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001088:	2003      	movs	r0, #3
 800108a:	e022      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 800108e:	6853      	ldr	r3, [r2, #4]
 8001090:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001094:	68a1      	ldr	r1, [r4, #8]
 8001096:	430b      	orrs	r3, r1
 8001098:	6053      	str	r3, [r2, #4]
 800109a:	e7dc      	b.n	8001056 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800109c:	2000      	movs	r0, #0
 800109e:	e018      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
 80010a0:	2000      	movs	r0, #0
 80010a2:	e016      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d016      	beq.n	80010d6 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_RCC_OscConfig+0x408>)
 80010aa:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80010b0:	6a22      	ldr	r2, [r4, #32]
 80010b2:	4291      	cmp	r1, r2
 80010b4:	d111      	bne.n	80010da <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010b6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010bc:	4293      	cmp	r3, r2
 80010be:	d10e      	bne.n	80010de <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80010c0:	2000      	movs	r0, #0
 80010c2:	e006      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
}
 80010c6:	4770      	bx	lr
        return HAL_ERROR;
 80010c8:	2001      	movs	r0, #1
 80010ca:	e002      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	b002      	add	sp, #8
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e7fb      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
 80010dc:	e7f9      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
 80010de:	2001      	movs	r0, #1
 80010e0:	e7f7      	b.n	80010d2 <HAL_RCC_OscConfig+0x3f6>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	42420000 	.word	0x42420000

080010ec <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_RCC_GetSysClockFreq+0x40>)
 80010ee:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80010f0:	f003 020c 	and.w	r2, r3, #12
 80010f4:	2a08      	cmp	r2, #8
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80010fa:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <HAL_RCC_GetSysClockFreq+0x48>)
 8001102:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001104:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001108:	d00b      	beq.n	8001122 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_RCC_GetSysClockFreq+0x40>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001116:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_RCC_GetSysClockFreq+0x44>)
 8001118:	fb02 f000 	mul.w	r0, r2, r0
 800111c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001120:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_RCC_GetSysClockFreq+0x50>)
 8001124:	fb03 f000 	mul.w	r0, r3, r0
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	007a1200 	.word	0x007a1200
 8001134:	0800350c 	.word	0x0800350c
 8001138:	0800351c 	.word	0x0800351c
 800113c:	003d0900 	.word	0x003d0900

08001140 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001140:	2800      	cmp	r0, #0
 8001142:	f000 80a0 	beq.w	8001286 <HAL_RCC_ClockConfig+0x146>
{
 8001146:	b570      	push	{r4, r5, r6, lr}
 8001148:	460d      	mov	r5, r1
 800114a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b52      	ldr	r3, [pc, #328]	; (8001298 <HAL_RCC_ClockConfig+0x158>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	428b      	cmp	r3, r1
 8001156:	d20b      	bcs.n	8001170 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001158:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <HAL_RCC_ClockConfig+0x158>)
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	f023 0307 	bic.w	r3, r3, #7
 8001160:	430b      	orrs	r3, r1
 8001162:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	428b      	cmp	r3, r1
 800116c:	f040 808d 	bne.w	800128a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	f013 0f02 	tst.w	r3, #2
 8001176:	d017      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	f013 0f04 	tst.w	r3, #4
 800117c:	d004      	beq.n	8001188 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800117e:	4a47      	ldr	r2, [pc, #284]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 8001180:	6853      	ldr	r3, [r2, #4]
 8001182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001186:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	f013 0f08 	tst.w	r3, #8
 800118e:	d004      	beq.n	800119a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001190:	4a42      	ldr	r2, [pc, #264]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 8001192:	6853      	ldr	r3, [r2, #4]
 8001194:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001198:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800119a:	4a40      	ldr	r2, [pc, #256]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 800119c:	6853      	ldr	r3, [r2, #4]
 800119e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011a2:	68a1      	ldr	r1, [r4, #8]
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	f013 0f01 	tst.w	r3, #1
 80011ae:	d031      	beq.n	8001214 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b0:	6863      	ldr	r3, [r4, #4]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d020      	beq.n	80011f8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d025      	beq.n	8001206 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	4a38      	ldr	r2, [pc, #224]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	f012 0f02 	tst.w	r2, #2
 80011c2:	d064      	beq.n	800128e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c4:	4935      	ldr	r1, [pc, #212]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 80011c6:	684a      	ldr	r2, [r1, #4]
 80011c8:	f022 0203 	bic.w	r2, r2, #3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80011d0:	f7ff fb64 	bl	800089c <HAL_GetTick>
 80011d4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	6862      	ldr	r2, [r4, #4]
 80011e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011e4:	d016      	beq.n	8001214 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e6:	f7ff fb59 	bl	800089c <HAL_GetTick>
 80011ea:	1b80      	subs	r0, r0, r6
 80011ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80011f0:	4298      	cmp	r0, r3
 80011f2:	d9f0      	bls.n	80011d6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80011f4:	2003      	movs	r0, #3
 80011f6:	e045      	b.n	8001284 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001200:	d1e0      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
 8001204:	e03e      	b.n	8001284 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001206:	4a25      	ldr	r2, [pc, #148]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800120e:	d1d9      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001210:	2001      	movs	r0, #1
 8001212:	e037      	b.n	8001284 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_RCC_ClockConfig+0x158>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	42ab      	cmp	r3, r5
 800121e:	d90a      	bls.n	8001236 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_RCC_ClockConfig+0x158>)
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f023 0307 	bic.w	r3, r3, #7
 8001228:	432b      	orrs	r3, r5
 800122a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122c:	6813      	ldr	r3, [r2, #0]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	42ab      	cmp	r3, r5
 8001234:	d12d      	bne.n	8001292 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	f013 0f04 	tst.w	r3, #4
 800123c:	d006      	beq.n	800124c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 8001240:	6853      	ldr	r3, [r2, #4]
 8001242:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001246:	68e1      	ldr	r1, [r4, #12]
 8001248:	430b      	orrs	r3, r1
 800124a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	f013 0f08 	tst.w	r3, #8
 8001252:	d007      	beq.n	8001264 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001254:	4a11      	ldr	r2, [pc, #68]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 8001256:	6853      	ldr	r3, [r2, #4]
 8001258:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800125c:	6921      	ldr	r1, [r4, #16]
 800125e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001262:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001264:	f7ff ff42 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_RCC_ClockConfig+0x15c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_RCC_ClockConfig+0x160>)
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	40d8      	lsrs	r0, r3
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_RCC_ClockConfig+0x164>)
 8001278:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_ClockConfig+0x168>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	f7ff fac9 	bl	8000814 <HAL_InitTick>
  return HAL_OK;
 8001282:	2000      	movs	r0, #0
}
 8001284:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
}
 8001288:	4770      	bx	lr
    return HAL_ERROR;
 800128a:	2001      	movs	r0, #1
 800128c:	e7fa      	b.n	8001284 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
 8001290:	e7f8      	b.n	8001284 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001292:	2001      	movs	r0, #1
 8001294:	e7f6      	b.n	8001284 <HAL_RCC_ClockConfig+0x144>
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000
 800129c:	40021000 	.word	0x40021000
 80012a0:	080034f4 	.word	0x080034f4
 80012a4:	2000001c 	.word	0x2000001c
 80012a8:	20000024 	.word	0x20000024

080012ac <HAL_RCC_GetHCLKFreq>:
}
 80012ac:	4b01      	ldr	r3, [pc, #4]	; (80012b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000001c 	.word	0x2000001c

080012b8 <HAL_RCC_GetPCLK1Freq>:
{
 80012b8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012ba:	f7ff fff7 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80012c6:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80012ca:	40d8      	lsrs	r0, r3
 80012cc:	bd08      	pop	{r3, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	08003504 	.word	0x08003504

080012d8 <HAL_RCC_GetPCLK2Freq>:
{
 80012d8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012da:	f7ff ffe7 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80012e6:	4a03      	ldr	r2, [pc, #12]	; (80012f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80012ea:	40d8      	lsrs	r0, r3
 80012ec:	bd08      	pop	{r3, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	08003504 	.word	0x08003504

080012f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80012fe:	6803      	ldr	r3, [r0, #0]
 8001300:	f013 0f01 	tst.w	r3, #1
 8001304:	d036      	beq.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800130e:	d149      	bne.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001312:	69da      	ldr	r2, [r3, #28]
 8001314:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001318:	61da      	str	r2, [r3, #28]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001324:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800132e:	d03b      	beq.n	80013a8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001334:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001338:	d013      	beq.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800133a:	6862      	ldr	r2, [r4, #4]
 800133c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001340:	429a      	cmp	r2, r3
 8001342:	d00e      	beq.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001344:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001346:	6a13      	ldr	r3, [r2, #32]
 8001348:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800134c:	492f      	ldr	r1, [pc, #188]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800134e:	2601      	movs	r6, #1
 8001350:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001354:	2600      	movs	r6, #0
 8001356:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800135a:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800135c:	f013 0f01 	tst.w	r3, #1
 8001360:	d136      	bne.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001364:	6a13      	ldr	r3, [r2, #32]
 8001366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800136a:	6861      	ldr	r1, [r4, #4]
 800136c:	430b      	orrs	r3, r1
 800136e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001370:	2d00      	cmp	r5, #0
 8001372:	d13e      	bne.n	80013f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	f013 0f02 	tst.w	r3, #2
 800137a:	d006      	beq.n	800138a <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800137c:	4a21      	ldr	r2, [pc, #132]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800137e:	6853      	ldr	r3, [r2, #4]
 8001380:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001384:	68a1      	ldr	r1, [r4, #8]
 8001386:	430b      	orrs	r3, r1
 8001388:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	f013 0f10 	tst.w	r3, #16
 8001390:	d034      	beq.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001394:	6853      	ldr	r3, [r2, #4]
 8001396:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800139a:	68e1      	ldr	r1, [r4, #12]
 800139c:	430b      	orrs	r3, r1
 800139e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80013a0:	2000      	movs	r0, #0
 80013a2:	e02c      	b.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 80013a4:	2500      	movs	r5, #0
 80013a6:	e7be      	b.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a8:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013b2:	f7ff fa73 	bl	800089c <HAL_GetTick>
 80013b6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013c0:	d1b6      	bne.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c2:	f7ff fa6b 	bl	800089c <HAL_GetTick>
 80013c6:	1b80      	subs	r0, r0, r6
 80013c8:	2864      	cmp	r0, #100	; 0x64
 80013ca:	d9f5      	bls.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80013cc:	2003      	movs	r0, #3
 80013ce:	e016      	b.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80013d0:	f7ff fa64 	bl	800089c <HAL_GetTick>
 80013d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	f013 0f02 	tst.w	r3, #2
 80013de:	d1c0      	bne.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff fa5c 	bl	800089c <HAL_GetTick>
 80013e4:	1b80      	subs	r0, r0, r6
 80013e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ea:	4298      	cmp	r0, r3
 80013ec:	d9f3      	bls.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 80013ee:	2003      	movs	r0, #3
 80013f0:	e005      	b.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f2:	69d3      	ldr	r3, [r2, #28]
 80013f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	e7bb      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 80013fc:	2000      	movs	r0, #0
}
 80013fe:	b002      	add	sp, #8
 8001400:	bd70      	pop	{r4, r5, r6, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	40007000 	.word	0x40007000
 800140c:	42420000 	.word	0x42420000

08001410 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001410:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001412:	2802      	cmp	r0, #2
 8001414:	d04e      	beq.n	80014b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8001416:	2810      	cmp	r0, #16
 8001418:	d003      	beq.n	8001422 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800141a:	2801      	cmp	r0, #1
 800141c:	d028      	beq.n	8001470 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800141e:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8001420:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001424:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800142c:	d0f8      	beq.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800142e:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001432:	4928      	ldr	r1, [pc, #160]	; (80014d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8001434:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001436:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800143a:	d015      	beq.n	8001468 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001444:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8001446:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 800144a:	fbb3 f3f2 	udiv	r3, r3, r2
 800144e:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800145a:	d1e1      	bne.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 800145c:	0040      	lsls	r0, r0, #1
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8001460:	fba3 3000 	umull	r3, r0, r3, r0
 8001464:	0840      	lsrs	r0, r0, #1
 8001466:	e7db      	b.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 800146a:	fb03 f000 	mul.w	r0, r3, r0
 800146e:	e7f0      	b.n	8001452 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001474:	f240 3202 	movw	r2, #770	; 0x302
 8001478:	401a      	ands	r2, r3
 800147a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800147e:	d024      	beq.n	80014ca <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001488:	d004      	beq.n	8001494 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800148a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800148e:	d009      	beq.n	80014a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001490:	2000      	movs	r0, #0
 8001492:	e7c5      	b.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8001496:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001498:	f012 0f02 	tst.w	r2, #2
 800149c:	d0f5      	beq.n	800148a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 800149e:	f649 4040 	movw	r0, #40000	; 0x9c40
 80014a2:	e7bd      	b.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80014ac:	d0b8      	beq.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 80014ae:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 80014b2:	e7b5      	b.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80014b4:	f7ff ff10 	bl	80012d8 <HAL_RCC_GetPCLK2Freq>
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80014c0:	3301      	adds	r3, #1
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80014c8:	e7aa      	b.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 80014ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014ce:	e7a7      	b.n	8001420 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80014d0:	40021000 	.word	0x40021000
 80014d4:	08003520 	.word	0x08003520
 80014d8:	08003530 	.word	0x08003530
 80014dc:	007a1200 	.word	0x007a1200
 80014e0:	aaaaaaab 	.word	0xaaaaaaab
 80014e4:	003d0900 	.word	0x003d0900

080014e8 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80014e8:	b410      	push	{r4}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80014ea:	6802      	ldr	r2, [r0, #0]
 80014ec:	6994      	ldr	r4, [r2, #24]
 80014ee:	fa1f fc84 	uxth.w	ip, r4
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80014f2:	69d3      	ldr	r3, [r2, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80014f4:	6991      	ldr	r1, [r2, #24]
 80014f6:	b288      	uxth	r0, r1

  if (high1 != high2)
 80014f8:	4584      	cmp	ip, r0
 80014fa:	d005      	beq.n	8001508 <RTC_ReadTimeCounter+0x20>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80014fc:	69d0      	ldr	r0, [r2, #28]
 80014fe:	b280      	uxth	r0, r0
 8001500:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 8001504:	bc10      	pop	{r4}
 8001506:	4770      	bx	lr
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001508:	b298      	uxth	r0, r3
 800150a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
  return timecounter;
 800150e:	e7f9      	b.n	8001504 <RTC_ReadTimeCounter+0x1c>

08001510 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001510:	6803      	ldr	r3, [r0, #0]
 8001512:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8001516:	b29b      	uxth	r3, r3
}
 8001518:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800151c:	4770      	bx	lr

0800151e <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800151e:	2300      	movs	r3, #0

  while (Value >= 10U)
 8001520:	e002      	b.n	8001528 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8001522:	3301      	adds	r3, #1
    Value -= 10U;
 8001524:	380a      	subs	r0, #10
 8001526:	b2c0      	uxtb	r0, r0
  while (Value >= 10U)
 8001528:	2809      	cmp	r0, #9
 800152a:	d8fa      	bhi.n	8001522 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4318      	orrs	r0, r3
 8001532:	4770      	bx	lr

08001534 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001534:	0903      	lsrs	r3, r0, #4
 8001536:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800153a:	f000 000f 	and.w	r0, r0, #15
 800153e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001542:	b2c0      	uxtb	r0, r0
 8001544:	4770      	bx	lr
	...

08001548 <RTC_IsLeapYear>:
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
  if ((nYear % 4U) != 0U)
 8001548:	f010 0f03 	tst.w	r0, #3
 800154c:	d114      	bne.n	8001578 <RTC_IsLeapYear+0x30>
  {
    return 0U;
  }

  if ((nYear % 100U) != 0U)
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <RTC_IsLeapYear+0x3c>)
 8001550:	fba3 2300 	umull	r2, r3, r3, r0
 8001554:	095b      	lsrs	r3, r3, #5
 8001556:	2264      	movs	r2, #100	; 0x64
 8001558:	fb02 0313 	mls	r3, r2, r3, r0
 800155c:	b29b      	uxth	r3, r3
 800155e:	b96b      	cbnz	r3, 800157c <RTC_IsLeapYear+0x34>
  {
    return 1U;
  }

  if ((nYear % 400U) == 0U)
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <RTC_IsLeapYear+0x3c>)
 8001562:	fba3 2300 	umull	r2, r3, r3, r0
 8001566:	09db      	lsrs	r3, r3, #7
 8001568:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800156c:	fb02 0013 	mls	r0, r2, r3, r0
 8001570:	b280      	uxth	r0, r0
 8001572:	b928      	cbnz	r0, 8001580 <RTC_IsLeapYear+0x38>
  {
    return 1U;
 8001574:	2001      	movs	r0, #1
 8001576:	4770      	bx	lr
    return 0U;
 8001578:	2000      	movs	r0, #0
 800157a:	4770      	bx	lr
    return 1U;
 800157c:	2001      	movs	r0, #1
 800157e:	4770      	bx	lr
  }
  else
  {
    return 0U;
 8001580:	2000      	movs	r0, #0
  }
}
 8001582:	4770      	bx	lr
 8001584:	51eb851f 	.word	0x51eb851f

08001588 <RTC_WeekDayNum>:
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 8001588:	f500 6cfa 	add.w	ip, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 800158c:	2902      	cmp	r1, #2
 800158e:	d821      	bhi.n	80015d4 <RTC_WeekDayNum+0x4c>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001590:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001594:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <RTC_WeekDayNum+0x8c>)
 800159a:	fba3 1301 	umull	r1, r3, r3, r1
 800159e:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 80015a2:	4463      	add	r3, ip
 80015a4:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 80015a8:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 80015ac:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <RTC_WeekDayNum+0x90>)
 80015ae:	fba2 2000 	umull	r2, r0, r2, r0
 80015b2:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 80015b6:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 80015ba:	3304      	adds	r3, #4
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <RTC_WeekDayNum+0x94>)
 80015be:	fba0 2003 	umull	r2, r0, r0, r3
 80015c2:	1a1a      	subs	r2, r3, r0
 80015c4:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 80015c8:	0880      	lsrs	r0, r0, #2
 80015ca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80015ce:	1a18      	subs	r0, r3, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
  }

  return (uint8_t)weekday;
}
 80015d0:	b2c0      	uxtb	r0, r0
 80015d2:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80015d4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80015d8:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <RTC_WeekDayNum+0x8c>)
 80015de:	fba3 1301 	umull	r1, r3, r3, r1
 80015e2:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 80015e6:	4463      	add	r3, ip
 80015e8:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <RTC_WeekDayNum+0x90>)
 80015ee:	fba2 2c0c 	umull	r2, ip, r2, ip
 80015f2:	eba3 135c 	sub.w	r3, r3, ip, lsr #5
 80015f6:	eb03 13dc 	add.w	r3, r3, ip, lsr #7
 80015fa:	3302      	adds	r3, #2
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <RTC_WeekDayNum+0x94>)
 80015fe:	fba0 2003 	umull	r2, r0, r0, r3
 8001602:	1a1a      	subs	r2, r3, r0
 8001604:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8001608:	0880      	lsrs	r0, r0, #2
 800160a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800160e:	1a18      	subs	r0, r3, r0
 8001610:	e7de      	b.n	80015d0 <RTC_WeekDayNum+0x48>
 8001612:	bf00      	nop
 8001614:	38e38e39 	.word	0x38e38e39
 8001618:	51eb851f 	.word	0x51eb851f
 800161c:	24924925 	.word	0x24924925

08001620 <RTC_DateUpdate>:
{
 8001620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001624:	4680      	mov	r8, r0
 8001626:	460f      	mov	r7, r1
  year = hrtc->DateToUpdate.Year;
 8001628:	f890 900f 	ldrb.w	r9, [r0, #15]
  month = hrtc->DateToUpdate.Month;
 800162c:	7b44      	ldrb	r4, [r0, #13]
  day = hrtc->DateToUpdate.Date;
 800162e:	7b85      	ldrb	r5, [r0, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8001630:	2600      	movs	r6, #0
 8001632:	e003      	b.n	800163c <RTC_DateUpdate+0x1c>
      if (day < 31U)
 8001634:	2d1e      	cmp	r5, #30
 8001636:	d81f      	bhi.n	8001678 <RTC_DateUpdate+0x58>
        day++;
 8001638:	3501      	adds	r5, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 800163a:	3601      	adds	r6, #1
 800163c:	42be      	cmp	r6, r7
 800163e:	d23d      	bcs.n	80016bc <RTC_DateUpdate+0x9c>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001640:	2c01      	cmp	r4, #1
 8001642:	d0f7      	beq.n	8001634 <RTC_DateUpdate+0x14>
 8001644:	2c03      	cmp	r4, #3
 8001646:	d0f5      	beq.n	8001634 <RTC_DateUpdate+0x14>
 8001648:	2c05      	cmp	r4, #5
 800164a:	d0f3      	beq.n	8001634 <RTC_DateUpdate+0x14>
 800164c:	2c07      	cmp	r4, #7
 800164e:	d0f1      	beq.n	8001634 <RTC_DateUpdate+0x14>
 8001650:	2c08      	cmp	r4, #8
 8001652:	d0ef      	beq.n	8001634 <RTC_DateUpdate+0x14>
        (month == 8U) || (month == 10U) || (month == 12U))
 8001654:	2c0a      	cmp	r4, #10
 8001656:	d0ed      	beq.n	8001634 <RTC_DateUpdate+0x14>
 8001658:	2c0c      	cmp	r4, #12
 800165a:	d0eb      	beq.n	8001634 <RTC_DateUpdate+0x14>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800165c:	2c04      	cmp	r4, #4
 800165e:	d015      	beq.n	800168c <RTC_DateUpdate+0x6c>
 8001660:	2c06      	cmp	r4, #6
 8001662:	d013      	beq.n	800168c <RTC_DateUpdate+0x6c>
 8001664:	2c09      	cmp	r4, #9
 8001666:	d011      	beq.n	800168c <RTC_DateUpdate+0x6c>
 8001668:	2c0b      	cmp	r4, #11
 800166a:	d00f      	beq.n	800168c <RTC_DateUpdate+0x6c>
    else if (month == 2U)
 800166c:	2c02      	cmp	r4, #2
 800166e:	d1e4      	bne.n	800163a <RTC_DateUpdate+0x1a>
      if (day < 28U)
 8001670:	2d1b      	cmp	r5, #27
 8001672:	d812      	bhi.n	800169a <RTC_DateUpdate+0x7a>
        day++;
 8001674:	3501      	adds	r5, #1
 8001676:	e7e0      	b.n	800163a <RTC_DateUpdate+0x1a>
        if (month != 12U)
 8001678:	2c0c      	cmp	r4, #12
 800167a:	d002      	beq.n	8001682 <RTC_DateUpdate+0x62>
          month++;
 800167c:	3401      	adds	r4, #1
          day = 1U;
 800167e:	2501      	movs	r5, #1
 8001680:	e7db      	b.n	800163a <RTC_DateUpdate+0x1a>
          year++;
 8001682:	f109 0901 	add.w	r9, r9, #1
          day = 1U;
 8001686:	2501      	movs	r5, #1
          month = 1U;
 8001688:	462c      	mov	r4, r5
 800168a:	e7d6      	b.n	800163a <RTC_DateUpdate+0x1a>
      if (day < 30U)
 800168c:	2d1d      	cmp	r5, #29
 800168e:	d801      	bhi.n	8001694 <RTC_DateUpdate+0x74>
        day++;
 8001690:	3501      	adds	r5, #1
 8001692:	e7d2      	b.n	800163a <RTC_DateUpdate+0x1a>
        month++;
 8001694:	3401      	adds	r4, #1
        day = 1U;
 8001696:	2501      	movs	r5, #1
 8001698:	e7cf      	b.n	800163a <RTC_DateUpdate+0x1a>
      else if (day == 28U)
 800169a:	2d1c      	cmp	r5, #28
 800169c:	d004      	beq.n	80016a8 <RTC_DateUpdate+0x88>
      else if (day == 29U)
 800169e:	2d1d      	cmp	r5, #29
 80016a0:	d1cb      	bne.n	800163a <RTC_DateUpdate+0x1a>
        month++;
 80016a2:	3401      	adds	r4, #1
        day = 1U;
 80016a4:	2501      	movs	r5, #1
 80016a6:	e7c8      	b.n	800163a <RTC_DateUpdate+0x1a>
        if (RTC_IsLeapYear(year))
 80016a8:	fa1f f089 	uxth.w	r0, r9
 80016ac:	f7ff ff4c 	bl	8001548 <RTC_IsLeapYear>
 80016b0:	b108      	cbz	r0, 80016b6 <RTC_DateUpdate+0x96>
          day++;
 80016b2:	3501      	adds	r5, #1
 80016b4:	e7c1      	b.n	800163a <RTC_DateUpdate+0x1a>
          month++;
 80016b6:	3401      	adds	r4, #1
          day = 1U;
 80016b8:	2501      	movs	r5, #1
 80016ba:	e7be      	b.n	800163a <RTC_DateUpdate+0x1a>
  hrtc->DateToUpdate.Year = year;
 80016bc:	f888 900f 	strb.w	r9, [r8, #15]
  hrtc->DateToUpdate.Month = month;
 80016c0:	b2e1      	uxtb	r1, r4
 80016c2:	f888 100d 	strb.w	r1, [r8, #13]
  hrtc->DateToUpdate.Date = day;
 80016c6:	b2ea      	uxtb	r2, r5
 80016c8:	f888 200e 	strb.w	r2, [r8, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80016cc:	4648      	mov	r0, r9
 80016ce:	f7ff ff5b 	bl	8001588 <RTC_WeekDayNum>
 80016d2:	f888 000c 	strb.w	r0, [r8, #12]
}
 80016d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080016da <RTC_EnterInitMode>:
{
 80016da:	b538      	push	{r3, r4, r5, lr}
 80016dc:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80016de:	f7ff f8dd 	bl	800089c <HAL_GetTick>
 80016e2:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	f012 0f20 	tst.w	r2, #32
 80016ec:	d107      	bne.n	80016fe <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80016ee:	f7ff f8d5 	bl	800089c <HAL_GetTick>
 80016f2:	1b40      	subs	r0, r0, r5
 80016f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80016f8:	d9f4      	bls.n	80016e4 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80016fa:	2003      	movs	r0, #3
 80016fc:	e004      	b.n	8001708 <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	f042 0210 	orr.w	r2, r2, #16
 8001704:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8001706:	2000      	movs	r0, #0
}
 8001708:	bd38      	pop	{r3, r4, r5, pc}

0800170a <RTC_ExitInitMode>:
{
 800170a:	b538      	push	{r3, r4, r5, lr}
 800170c:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800170e:	6802      	ldr	r2, [r0, #0]
 8001710:	6853      	ldr	r3, [r2, #4]
 8001712:	f023 0310 	bic.w	r3, r3, #16
 8001716:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001718:	f7ff f8c0 	bl	800089c <HAL_GetTick>
 800171c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f013 0f20 	tst.w	r3, #32
 8001726:	d107      	bne.n	8001738 <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001728:	f7ff f8b8 	bl	800089c <HAL_GetTick>
 800172c:	1b40      	subs	r0, r0, r5
 800172e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001732:	d9f4      	bls.n	800171e <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8001734:	2003      	movs	r0, #3
 8001736:	e000      	b.n	800173a <RTC_ExitInitMode+0x30>
  return HAL_OK;
 8001738:	2000      	movs	r0, #0
}
 800173a:	bd38      	pop	{r3, r4, r5, pc}

0800173c <RTC_WriteTimeCounter>:
{
 800173c:	b538      	push	{r3, r4, r5, lr}
 800173e:	4605      	mov	r5, r0
 8001740:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001742:	f7ff ffca 	bl	80016da <RTC_EnterInitMode>
 8001746:	b108      	cbz	r0, 800174c <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 8001748:	2001      	movs	r0, #1
}
 800174a:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	0c22      	lsrs	r2, r4, #16
 8001750:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	b2a4      	uxth	r4, r4
 8001756:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001758:	4628      	mov	r0, r5
 800175a:	f7ff ffd6 	bl	800170a <RTC_ExitInitMode>
 800175e:	2800      	cmp	r0, #0
 8001760:	d0f3      	beq.n	800174a <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 8001762:	2001      	movs	r0, #1
 8001764:	e7f1      	b.n	800174a <RTC_WriteTimeCounter+0xe>

08001766 <RTC_WriteAlarmCounter>:
{
 8001766:	b538      	push	{r3, r4, r5, lr}
 8001768:	4605      	mov	r5, r0
 800176a:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800176c:	f7ff ffb5 	bl	80016da <RTC_EnterInitMode>
 8001770:	b108      	cbz	r0, 8001776 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 8001772:	2001      	movs	r0, #1
}
 8001774:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001776:	682b      	ldr	r3, [r5, #0]
 8001778:	0c22      	lsrs	r2, r4, #16
 800177a:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	b2a4      	uxth	r4, r4
 8001780:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001782:	4628      	mov	r0, r5
 8001784:	f7ff ffc1 	bl	800170a <RTC_ExitInitMode>
 8001788:	2800      	cmp	r0, #0
 800178a:	d0f3      	beq.n	8001774 <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 800178c:	2001      	movs	r0, #1
 800178e:	e7f1      	b.n	8001774 <RTC_WriteAlarmCounter+0xe>

08001790 <HAL_RTC_SetTime>:
{
 8001790:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8001792:	2800      	cmp	r0, #0
 8001794:	d057      	beq.n	8001846 <HAL_RTC_SetTime+0xb6>
 8001796:	460d      	mov	r5, r1
 8001798:	4606      	mov	r6, r0
 800179a:	2900      	cmp	r1, #0
 800179c:	d055      	beq.n	800184a <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 800179e:	7c03      	ldrb	r3, [r0, #16]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d054      	beq.n	800184e <HAL_RTC_SetTime+0xbe>
 80017a4:	2301      	movs	r3, #1
 80017a6:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 80017ac:	b9ba      	cbnz	r2, 80017de <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80017ae:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 80017b0:	784b      	ldrb	r3, [r1, #1]
 80017b2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80017b6:	009c      	lsls	r4, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80017b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80017bc:	fb03 4400 	mla	r4, r3, r0, r4
                              ((uint32_t)sTime->Seconds));
 80017c0:	7888      	ldrb	r0, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80017c2:	4404      	add	r4, r0
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80017c4:	4621      	mov	r1, r4
 80017c6:	4630      	mov	r0, r6
 80017c8:	f7ff ffb8 	bl	800173c <RTC_WriteTimeCounter>
 80017cc:	4605      	mov	r5, r0
 80017ce:	b1c8      	cbz	r0, 8001804 <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017d0:	2304      	movs	r3, #4
 80017d2:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 80017d4:	2300      	movs	r3, #0
 80017d6:	7433      	strb	r3, [r6, #16]
    return HAL_ERROR;
 80017d8:	2501      	movs	r5, #1
}
 80017da:	4628      	mov	r0, r5
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80017de:	7808      	ldrb	r0, [r1, #0]
 80017e0:	f7ff fea8 	bl	8001534 <RTC_Bcd2ToByte>
 80017e4:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 80017e8:	fb00 f404 	mul.w	r4, r0, r4
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80017ec:	7868      	ldrb	r0, [r5, #1]
 80017ee:	f7ff fea1 	bl	8001534 <RTC_Bcd2ToByte>
 80017f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80017f6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80017fa:	78a8      	ldrb	r0, [r5, #2]
 80017fc:	f7ff fe9a 	bl	8001534 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001800:	4404      	add	r4, r0
 8001802:	e7df      	b.n	80017c4 <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001804:	6832      	ldr	r2, [r6, #0]
 8001806:	6853      	ldr	r3, [r2, #4]
 8001808:	f023 0305 	bic.w	r3, r3, #5
 800180c:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800180e:	4630      	mov	r0, r6
 8001810:	f7ff fe7e 	bl	8001510 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001814:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001818:	d001      	beq.n	800181e <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 800181a:	4284      	cmp	r4, r0
 800181c:	d804      	bhi.n	8001828 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 800181e:	2301      	movs	r3, #1
 8001820:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 8001822:	2300      	movs	r3, #0
 8001824:	7433      	strb	r3, [r6, #16]
    return HAL_OK;
 8001826:	e7d8      	b.n	80017da <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001828:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800182c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001830:	4630      	mov	r0, r6
 8001832:	f7ff ff98 	bl	8001766 <RTC_WriteAlarmCounter>
 8001836:	2800      	cmp	r0, #0
 8001838:	d0f1      	beq.n	800181e <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800183a:	2304      	movs	r3, #4
 800183c:	7473      	strb	r3, [r6, #17]
          __HAL_UNLOCK(hrtc);
 800183e:	2300      	movs	r3, #0
 8001840:	7433      	strb	r3, [r6, #16]
          return HAL_ERROR;
 8001842:	2501      	movs	r5, #1
 8001844:	e7c9      	b.n	80017da <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 8001846:	2501      	movs	r5, #1
 8001848:	e7c7      	b.n	80017da <HAL_RTC_SetTime+0x4a>
 800184a:	2501      	movs	r5, #1
 800184c:	e7c5      	b.n	80017da <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 800184e:	2502      	movs	r5, #2
 8001850:	e7c3      	b.n	80017da <HAL_RTC_SetTime+0x4a>
	...

08001854 <HAL_RTC_GetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 8001854:	2800      	cmp	r0, #0
 8001856:	d06f      	beq.n	8001938 <HAL_RTC_GetTime+0xe4>
{
 8001858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800185c:	460c      	mov	r4, r1
 800185e:	4615      	mov	r5, r2
 8001860:	4607      	mov	r7, r0
  if ((hrtc == NULL) || (sTime == NULL))
 8001862:	2900      	cmp	r1, #0
 8001864:	d06a      	beq.n	800193c <HAL_RTC_GetTime+0xe8>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001866:	6803      	ldr	r3, [r0, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f013 0f04 	tst.w	r3, #4
 800186e:	d002      	beq.n	8001876 <HAL_RTC_GetTime+0x22>
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
}
 8001872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001876:	f7ff fe37 	bl	80014e8 <RTC_ReadTimeCounter>
 800187a:	4606      	mov	r6, r0
  hours = counter_time / 3600U;
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <HAL_RTC_GetTime+0xf8>)
 800187e:	fba3 2300 	umull	r2, r3, r3, r0
 8001882:	0adb      	lsrs	r3, r3, #11
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001884:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001888:	fb02 0213 	mls	r2, r2, r3, r0
 800188c:	4930      	ldr	r1, [pc, #192]	; (8001950 <HAL_RTC_GetTime+0xfc>)
 800188e:	fba1 0102 	umull	r0, r1, r1, r2
 8001892:	0948      	lsrs	r0, r1, #5
 8001894:	f3c1 1147 	ubfx	r1, r1, #5, #8
 8001898:	7061      	strb	r1, [r4, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800189a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800189e:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 80018a2:	70a2      	strb	r2, [r4, #2]
  if (hours >= 24U)
 80018a4:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <HAL_RTC_GetTime+0x100>)
 80018a6:	4296      	cmp	r6, r2
 80018a8:	d810      	bhi.n	80018cc <HAL_RTC_GetTime+0x78>
    sTime->Hours = hours;
 80018aa:	7023      	strb	r3, [r4, #0]
  if (Format != RTC_FORMAT_BIN)
 80018ac:	2d00      	cmp	r5, #0
 80018ae:	d04b      	beq.n	8001948 <HAL_RTC_GetTime+0xf4>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80018b0:	7820      	ldrb	r0, [r4, #0]
 80018b2:	f7ff fe34 	bl	800151e <RTC_ByteToBcd2>
 80018b6:	7020      	strb	r0, [r4, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80018b8:	7860      	ldrb	r0, [r4, #1]
 80018ba:	f7ff fe30 	bl	800151e <RTC_ByteToBcd2>
 80018be:	7060      	strb	r0, [r4, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80018c0:	78a0      	ldrb	r0, [r4, #2]
 80018c2:	f7ff fe2c 	bl	800151e <RTC_ByteToBcd2>
 80018c6:	70a0      	strb	r0, [r4, #2]
  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
 80018ca:	e7d2      	b.n	8001872 <HAL_RTC_GetTime+0x1e>
    days_elapsed = (hours / 24U);
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_RTC_GetTime+0x104>)
 80018ce:	fba2 2803 	umull	r2, r8, r2, r3
 80018d2:	ea4f 1818 	mov.w	r8, r8, lsr #4
    sTime->Hours = (hours % 24U);
 80018d6:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80018da:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
 80018de:	7023      	strb	r3, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80018e0:	4638      	mov	r0, r7
 80018e2:	f7ff fe15 	bl	8001510 <RTC_ReadAlarmCounter>
 80018e6:	4681      	mov	r9, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80018e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80018ec:	d006      	beq.n	80018fc <HAL_RTC_GetTime+0xa8>
 80018ee:	4286      	cmp	r6, r0
 80018f0:	d202      	bcs.n	80018f8 <HAL_RTC_GetTime+0xa4>
      counter_alarm -= counter_time;
 80018f2:	eba0 0906 	sub.w	r9, r0, r6
 80018f6:	e001      	b.n	80018fc <HAL_RTC_GetTime+0xa8>
      counter_alarm = RTC_ALARM_RESETVALUE;
 80018f8:	f04f 39ff 	mov.w	r9, #4294967295
    counter_time -= (days_elapsed * 24U * 3600U);
 80018fc:	4817      	ldr	r0, [pc, #92]	; (800195c <HAL_RTC_GetTime+0x108>)
 80018fe:	fb00 6618 	mls	r6, r0, r8, r6
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001902:	4631      	mov	r1, r6
 8001904:	4638      	mov	r0, r7
 8001906:	f7ff ff19 	bl	800173c <RTC_WriteTimeCounter>
 800190a:	b9c8      	cbnz	r0, 8001940 <HAL_RTC_GetTime+0xec>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800190c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001910:	d00a      	beq.n	8001928 <HAL_RTC_GetTime+0xd4>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001912:	eb09 0106 	add.w	r1, r9, r6
 8001916:	4638      	mov	r0, r7
 8001918:	f7ff ff25 	bl	8001766 <RTC_WriteAlarmCounter>
 800191c:	b990      	cbnz	r0, 8001944 <HAL_RTC_GetTime+0xf0>
    RTC_DateUpdate(hrtc, days_elapsed);
 800191e:	4641      	mov	r1, r8
 8001920:	4638      	mov	r0, r7
 8001922:	f7ff fe7d 	bl	8001620 <RTC_DateUpdate>
 8001926:	e7c1      	b.n	80018ac <HAL_RTC_GetTime+0x58>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001928:	4649      	mov	r1, r9
 800192a:	4638      	mov	r0, r7
 800192c:	f7ff ff1b 	bl	8001766 <RTC_WriteAlarmCounter>
 8001930:	2800      	cmp	r0, #0
 8001932:	d0f4      	beq.n	800191e <HAL_RTC_GetTime+0xca>
        return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
 8001936:	e79c      	b.n	8001872 <HAL_RTC_GetTime+0x1e>
    return HAL_ERROR;
 8001938:	2001      	movs	r0, #1
}
 800193a:	4770      	bx	lr
    return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
 800193e:	e798      	b.n	8001872 <HAL_RTC_GetTime+0x1e>
      return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
 8001942:	e796      	b.n	8001872 <HAL_RTC_GetTime+0x1e>
        return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
 8001946:	e794      	b.n	8001872 <HAL_RTC_GetTime+0x1e>
  return HAL_OK;
 8001948:	2000      	movs	r0, #0
 800194a:	e792      	b.n	8001872 <HAL_RTC_GetTime+0x1e>
 800194c:	91a2b3c5 	.word	0x91a2b3c5
 8001950:	88888889 	.word	0x88888889
 8001954:	0001517f 	.word	0x0001517f
 8001958:	aaaaaaab 	.word	0xaaaaaaab
 800195c:	00015180 	.word	0x00015180

08001960 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8001960:	2800      	cmp	r0, #0
 8001962:	d05a      	beq.n	8001a1a <HAL_RTC_SetDate+0xba>
{
 8001964:	b538      	push	{r3, r4, r5, lr}
 8001966:	460d      	mov	r5, r1
 8001968:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 800196a:	2900      	cmp	r1, #0
 800196c:	d057      	beq.n	8001a1e <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 800196e:	7c03      	ldrb	r3, [r0, #16]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d056      	beq.n	8001a22 <HAL_RTC_SetDate+0xc2>
 8001974:	2301      	movs	r3, #1
 8001976:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001978:	2302      	movs	r3, #2
 800197a:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 800197c:	b9ba      	cbnz	r2, 80019ae <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 800197e:	78cb      	ldrb	r3, [r1, #3]
 8001980:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001982:	784b      	ldrb	r3, [r1, #1]
 8001984:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001986:	788b      	ldrb	r3, [r1, #2]
 8001988:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800198a:	7ba2      	ldrb	r2, [r4, #14]
 800198c:	7b61      	ldrb	r1, [r4, #13]
 800198e:	7be0      	ldrb	r0, [r4, #15]
 8001990:	f7ff fdfa 	bl	8001588 <RTC_WeekDayNum>
 8001994:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001996:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff fda5 	bl	80014e8 <RTC_ReadTimeCounter>
  if (hours > 24U)
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RTC_SetDate+0xc8>)
 80019a0:	4298      	cmp	r0, r3
 80019a2:	d811      	bhi.n	80019c8 <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 80019a4:	2301      	movs	r3, #1
 80019a6:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 80019a8:	2000      	movs	r0, #0
 80019aa:	7420      	strb	r0, [r4, #16]
}
 80019ac:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80019ae:	78c8      	ldrb	r0, [r1, #3]
 80019b0:	f7ff fdc0 	bl	8001534 <RTC_Bcd2ToByte>
 80019b4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80019b6:	7868      	ldrb	r0, [r5, #1]
 80019b8:	f7ff fdbc 	bl	8001534 <RTC_Bcd2ToByte>
 80019bc:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80019be:	78a8      	ldrb	r0, [r5, #2]
 80019c0:	f7ff fdb8 	bl	8001534 <RTC_Bcd2ToByte>
 80019c4:	73a0      	strb	r0, [r4, #14]
 80019c6:	e7e0      	b.n	800198a <HAL_RTC_SetDate+0x2a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80019c8:	4d18      	ldr	r5, [pc, #96]	; (8001a2c <HAL_RTC_SetDate+0xcc>)
 80019ca:	fba5 3500 	umull	r3, r5, r5, r0
 80019ce:	0c2d      	lsrs	r5, r5, #16
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_RTC_SetDate+0xd0>)
 80019d2:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80019d6:	4629      	mov	r1, r5
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff feaf 	bl	800173c <RTC_WriteTimeCounter>
 80019de:	b128      	cbz	r0, 80019ec <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80019e0:	2304      	movs	r3, #4
 80019e2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80019e4:	2300      	movs	r3, #0
 80019e6:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
 80019ea:	e7df      	b.n	80019ac <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff fd8f 	bl	8001510 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80019f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80019f6:	d0d5      	beq.n	80019a4 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 80019f8:	4285      	cmp	r5, r0
 80019fa:	d9d3      	bls.n	80019a4 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80019fc:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001a00:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff feae 	bl	8001766 <RTC_WriteAlarmCounter>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	d0ca      	beq.n	80019a4 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8001a12:	2300      	movs	r3, #0
 8001a14:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8001a16:	2001      	movs	r0, #1
 8001a18:	e7c8      	b.n	80019ac <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
}
 8001a1c:	4770      	bx	lr
    return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	e7c4      	b.n	80019ac <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 8001a22:	2002      	movs	r0, #2
 8001a24:	e7c2      	b.n	80019ac <HAL_RTC_SetDate+0x4c>
 8001a26:	bf00      	nop
 8001a28:	00015f8f 	.word	0x00015f8f
 8001a2c:	c22e4507 	.word	0xc22e4507
 8001a30:	00015180 	.word	0x00015180

08001a34 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 8001a34:	b1c0      	cbz	r0, 8001a68 <HAL_RTC_WaitForSynchro+0x34>
{
 8001a36:	b538      	push	{r3, r4, r5, lr}
 8001a38:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001a3a:	6802      	ldr	r2, [r0, #0]
 8001a3c:	6853      	ldr	r3, [r2, #4]
 8001a3e:	f023 0308 	bic.w	r3, r3, #8
 8001a42:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001a44:	f7fe ff2a 	bl	800089c <HAL_GetTick>
 8001a48:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001a4a:	682b      	ldr	r3, [r5, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f013 0f08 	tst.w	r3, #8
 8001a52:	d107      	bne.n	8001a64 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001a54:	f7fe ff22 	bl	800089c <HAL_GetTick>
 8001a58:	1b00      	subs	r0, r0, r4
 8001a5a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a5e:	d9f4      	bls.n	8001a4a <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001a60:	2003      	movs	r0, #3
 8001a62:	e000      	b.n	8001a66 <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8001a64:	2000      	movs	r0, #0
}
 8001a66:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a68:	2001      	movs	r0, #1
}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_RTC_Init>:
  if (hrtc == NULL)
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d050      	beq.n	8001b12 <HAL_RTC_Init+0xa6>
{
 8001a70:	b510      	push	{r4, lr}
 8001a72:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001a74:	7c43      	ldrb	r3, [r0, #17]
 8001a76:	b14b      	cbz	r3, 8001a8c <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff ffd9 	bl	8001a34 <HAL_RTC_WaitForSynchro>
 8001a82:	b138      	cbz	r0, 8001a94 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a84:	2304      	movs	r3, #4
 8001a86:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
}
 8001a8a:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001a8c:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001a8e:	f7fe fd97 	bl	80005c0 <HAL_RTC_MspInit>
 8001a92:	e7f1      	b.n	8001a78 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff fe20 	bl	80016da <RTC_EnterInitMode>
 8001a9a:	bb28      	cbnz	r0, 8001ae8 <HAL_RTC_Init+0x7c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001a9c:	6822      	ldr	r2, [r4, #0]
 8001a9e:	6853      	ldr	r3, [r2, #4]
 8001aa0:	f023 0307 	bic.w	r3, r3, #7
 8001aa4:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001aa6:	68a3      	ldr	r3, [r4, #8]
 8001aa8:	b123      	cbz	r3, 8001ab4 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <HAL_RTC_Init+0xac>)
 8001aac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_RTC_Init+0xac>)
 8001ab6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ab8:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001abc:	68a1      	ldr	r1, [r4, #8]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001ac2:	6863      	ldr	r3, [r4, #4]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d012      	beq.n	8001af0 <HAL_RTC_Init+0x84>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	f3c3 4103 	ubfx	r1, r3, #16, #4
 8001ad0:	6091      	str	r1, [r2, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001ad2:	6822      	ldr	r2, [r4, #0]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff fe16 	bl	800170a <RTC_ExitInitMode>
 8001ade:	b188      	cbz	r0, 8001b04 <HAL_RTC_Init+0x98>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	e7d0      	b.n	8001a8a <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8001aec:	2001      	movs	r0, #1
 8001aee:	e7cc      	b.n	8001a8a <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff fc8d 	bl	8001410 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001af6:	b108      	cbz	r0, 8001afc <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1U;
 8001af8:	1e43      	subs	r3, r0, #1
 8001afa:	e7e6      	b.n	8001aca <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001afc:	2304      	movs	r3, #4
 8001afe:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 8001b00:	2001      	movs	r0, #1
 8001b02:	e7c2      	b.n	8001a8a <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001b0c:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001b0e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001b10:	e7bb      	b.n	8001a8a <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 8001b12:	2001      	movs	r0, #1
}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40006c00 	.word	0x40006c00

08001b1c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b1c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b1e:	f102 030c 	add.w	r3, r2, #12
 8001b22:	e853 3f00 	ldrex	r3, [r3]
 8001b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b2a:	320c      	adds	r2, #12
 8001b2c:	e842 3100 	strex	r1, r3, [r2]
 8001b30:	2900      	cmp	r1, #0
 8001b32:	d1f3      	bne.n	8001b1c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b36:	f102 0314 	add.w	r3, r2, #20
 8001b3a:	e853 3f00 	ldrex	r3, [r3]
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b42:	3214      	adds	r2, #20
 8001b44:	e842 3100 	strex	r1, r3, [r2]
 8001b48:	2900      	cmp	r1, #0
 8001b4a:	d1f3      	bne.n	8001b34 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d005      	beq.n	8001b5e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b52:	2320      	movs	r3, #32
 8001b54:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6303      	str	r3, [r0, #48]	; 0x30
}
 8001b5c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b60:	f102 030c 	add.w	r3, r2, #12
 8001b64:	e853 3f00 	ldrex	r3, [r3]
 8001b68:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b6c:	320c      	adds	r2, #12
 8001b6e:	e842 3100 	strex	r1, r3, [r2]
 8001b72:	2900      	cmp	r1, #0
 8001b74:	d1f3      	bne.n	8001b5e <UART_EndRxTransfer+0x42>
 8001b76:	e7ec      	b.n	8001b52 <UART_EndRxTransfer+0x36>

08001b78 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b21      	cmp	r3, #33	; 0x21
 8001b80:	d001      	beq.n	8001b86 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001b82:	2002      	movs	r0, #2
  }
}
 8001b84:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b86:	6883      	ldr	r3, [r0, #8]
 8001b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8c:	d017      	beq.n	8001bbe <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b8e:	6a03      	ldr	r3, [r0, #32]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	6202      	str	r2, [r0, #32]
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	6803      	ldr	r3, [r0, #0]
 8001b98:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001b9a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001ba4:	b94b      	cbnz	r3, 8001bba <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ba6:	6802      	ldr	r2, [r0, #0]
 8001ba8:	68d3      	ldr	r3, [r2, #12]
 8001baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bae:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001bb0:	6802      	ldr	r2, [r0, #0]
 8001bb2:	68d3      	ldr	r3, [r2, #12]
 8001bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001bba:	2000      	movs	r0, #0
 8001bbc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bbe:	6903      	ldr	r3, [r0, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1e4      	bne.n	8001b8e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001bc4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	6802      	ldr	r2, [r0, #0]
 8001bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bce:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8001bd0:	6a03      	ldr	r3, [r0, #32]
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	6203      	str	r3, [r0, #32]
 8001bd6:	e7e0      	b.n	8001b9a <UART_Transmit_IT+0x22>

08001bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bdc:	6802      	ldr	r2, [r0, #0]
 8001bde:	6913      	ldr	r3, [r2, #16]
 8001be0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001be4:	68c1      	ldr	r1, [r0, #12]
 8001be6:	430b      	orrs	r3, r1
 8001be8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bea:	6883      	ldr	r3, [r0, #8]
 8001bec:	6902      	ldr	r2, [r0, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	6942      	ldr	r2, [r0, #20]
 8001bf2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001bf4:	6801      	ldr	r1, [r0, #0]
 8001bf6:	68cb      	ldr	r3, [r1, #12]
 8001bf8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001bfc:	f023 030c 	bic.w	r3, r3, #12
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c04:	6802      	ldr	r2, [r0, #0]
 8001c06:	6953      	ldr	r3, [r2, #20]
 8001c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0c:	6981      	ldr	r1, [r0, #24]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001c12:	6802      	ldr	r2, [r0, #0]
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <UART_SetConfig+0x8c>)
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d020      	beq.n	8001c5c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c1a:	f7ff fb4d 	bl	80012b8 <HAL_RCC_GetPCLK1Freq>
 8001c1e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c28:	6863      	ldr	r3, [r4, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <UART_SetConfig+0x90>)
 8001c32:	fba0 3102 	umull	r3, r1, r0, r2
 8001c36:	0949      	lsrs	r1, r1, #5
 8001c38:	2364      	movs	r3, #100	; 0x64
 8001c3a:	fb03 2311 	mls	r3, r3, r1, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	3332      	adds	r3, #50	; 0x32
 8001c42:	fba0 2303 	umull	r2, r3, r0, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c4c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	6821      	ldr	r1, [r4, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c5a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c5c:	f7ff fb3c 	bl	80012d8 <HAL_RCC_GetPCLK2Freq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	e7dd      	b.n	8001c20 <UART_SetConfig+0x48>
 8001c64:	40013800 	.word	0x40013800
 8001c68:	51eb851f 	.word	0x51eb851f

08001c6c <HAL_UART_Init>:
  if (huart == NULL)
 8001c6c:	b360      	cbz	r0, 8001cc8 <HAL_UART_Init+0x5c>
{
 8001c6e:	b510      	push	{r4, lr}
 8001c70:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c72:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c76:	b313      	cbz	r3, 8001cbe <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c78:	2324      	movs	r3, #36	; 0x24
 8001c7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8001c7e:	6822      	ldr	r2, [r4, #0]
 8001c80:	68d3      	ldr	r3, [r2, #12]
 8001c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c86:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f7ff ffa5 	bl	8001bd8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c8e:	6822      	ldr	r2, [r4, #0]
 8001c90:	6913      	ldr	r3, [r2, #16]
 8001c92:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c96:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c98:	6822      	ldr	r2, [r4, #0]
 8001c9a:	6953      	ldr	r3, [r2, #20]
 8001c9c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001ca0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001ca2:	6822      	ldr	r2, [r4, #0]
 8001ca4:	68d3      	ldr	r3, [r2, #12]
 8001ca6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001caa:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cac:	2000      	movs	r0, #0
 8001cae:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cba:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001cbc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001cbe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8001cc2:	f7fe fc9d 	bl	8000600 <HAL_UART_MspInit>
 8001cc6:	e7d7      	b.n	8001c78 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001cc8:	2001      	movs	r0, #1
}
 8001cca:	4770      	bx	lr

08001ccc <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001ccc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d110      	bne.n	8001cf8 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8001cd6:	b189      	cbz	r1, 8001cfc <HAL_UART_Transmit_IT+0x30>
 8001cd8:	b192      	cbz	r2, 8001d00 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 8001cda:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001cdc:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cde:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ce4:	2221      	movs	r2, #33	; 0x21
 8001ce6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001cea:	6801      	ldr	r1, [r0, #0]
 8001cec:	68ca      	ldr	r2, [r1, #12]
 8001cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf2:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	4770      	bx	lr
    return HAL_BUSY;
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	4770      	bx	lr
      return HAL_ERROR;
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	4770      	bx	lr
 8001d00:	2001      	movs	r0, #1
}
 8001d02:	4770      	bx	lr

08001d04 <HAL_UART_TxCpltCallback>:
}
 8001d04:	4770      	bx	lr

08001d06 <UART_EndTransmit_IT>:
{
 8001d06:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d08:	6801      	ldr	r1, [r0, #0]
 8001d0a:	68ca      	ldr	r2, [r1, #12]
 8001d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d10:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d12:	2220      	movs	r2, #32
 8001d14:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8001d18:	f7ff fff4 	bl	8001d04 <HAL_UART_TxCpltCallback>
}
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	bd08      	pop	{r3, pc}

08001d20 <HAL_UART_RxCpltCallback>:
}
 8001d20:	4770      	bx	lr

08001d22 <HAL_UART_ErrorCallback>:
}
 8001d22:	4770      	bx	lr

08001d24 <UART_DMAAbortOnError>:
{
 8001d24:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d26:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d2c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001d2e:	f7ff fff8 	bl	8001d22 <HAL_UART_ErrorCallback>
}
 8001d32:	bd08      	pop	{r3, pc}

08001d34 <HAL_UART_AbortReceiveCpltCallback>:
}
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_UART_AbortReceive_IT>:
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d3c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3e:	f102 030c 	add.w	r3, r2, #12
 8001d42:	e853 3f00 	ldrex	r3, [r3]
 8001d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4a:	320c      	adds	r2, #12
 8001d4c:	e842 3100 	strex	r1, r3, [r2]
 8001d50:	2900      	cmp	r1, #0
 8001d52:	d1f3      	bne.n	8001d3c <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d54:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d56:	f102 0314 	add.w	r3, r2, #20
 8001d5a:	e853 3f00 	ldrex	r3, [r3]
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d62:	3214      	adds	r2, #20
 8001d64:	e842 3100 	strex	r1, r3, [r2]
 8001d68:	2900      	cmp	r1, #0
 8001d6a:	d1f3      	bne.n	8001d54 <HAL_UART_AbortReceive_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d01c      	beq.n	8001dac <HAL_UART_AbortReceive_IT+0x74>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d7a:	d02e      	beq.n	8001dda <HAL_UART_AbortReceive_IT+0xa2>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d7e:	f102 0314 	add.w	r3, r2, #20
 8001d82:	e853 3f00 	ldrex	r3, [r3]
 8001d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8a:	3214      	adds	r2, #20
 8001d8c:	e842 3100 	strex	r1, r3, [r2]
 8001d90:	2900      	cmp	r1, #0
 8001d92:	d1f3      	bne.n	8001d7c <HAL_UART_AbortReceive_IT+0x44>
    if (huart->hdmarx != NULL)
 8001d94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d96:	b1b3      	cbz	r3, 8001dc6 <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8001d98:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <HAL_UART_AbortReceive_IT+0xb8>)
 8001d9a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001d9e:	f7fe fe13 	bl	80009c8 <HAL_DMA_Abort_IT>
 8001da2:	b318      	cbz	r0, 8001dec <HAL_UART_AbortReceive_IT+0xb4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001da4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001da6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001da8:	4798      	blx	r3
 8001daa:	e01f      	b.n	8001dec <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8001dac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dae:	f102 030c 	add.w	r3, r2, #12
 8001db2:	e853 3f00 	ldrex	r3, [r3]
 8001db6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dba:	320c      	adds	r2, #12
 8001dbc:	e842 3100 	strex	r1, r3, [r2]
 8001dc0:	2900      	cmp	r1, #0
 8001dc2:	d1f3      	bne.n	8001dac <HAL_UART_AbortReceive_IT+0x74>
 8001dc4:	e7d5      	b.n	8001d72 <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	85e3      	strh	r3, [r4, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dd0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_UART_AbortReceiveCpltCallback(huart);
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7ff ffae 	bl	8001d34 <HAL_UART_AbortReceiveCpltCallback>
 8001dd8:	e008      	b.n	8001dec <HAL_UART_AbortReceive_IT+0xb4>
    huart->RxXferCount = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8001dde:	2220      	movs	r2, #32
 8001de0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de4:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortReceiveCpltCallback(huart);
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff ffa4 	bl	8001d34 <HAL_UART_AbortReceiveCpltCallback>
}
 8001dec:	2000      	movs	r0, #0
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	08001df5 	.word	0x08001df5

08001df4 <UART_DMARxOnlyAbortCallback>:
{
 8001df4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001df6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e02:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortReceiveCpltCallback(huart);
 8001e04:	f7ff ff96 	bl	8001d34 <HAL_UART_AbortReceiveCpltCallback>
}
 8001e08:	bd08      	pop	{r3, pc}

08001e0a <HAL_UARTEx_RxEventCallback>:
}
 8001e0a:	4770      	bx	lr

08001e0c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e0c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b22      	cmp	r3, #34	; 0x22
 8001e14:	d169      	bne.n	8001eea <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e16:	6883      	ldr	r3, [r0, #8]
 8001e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1c:	d04f      	beq.n	8001ebe <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e1e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e24:	d004      	beq.n	8001e30 <UART_Receive_IT+0x24>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d156      	bne.n	8001ed8 <UART_Receive_IT+0xcc>
 8001e2a:	6903      	ldr	r3, [r0, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d153      	bne.n	8001ed8 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e30:	6803      	ldr	r3, [r0, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001e36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e38:	3301      	adds	r3, #1
 8001e3a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001e3c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d151      	bne.n	8001eee <UART_Receive_IT+0xe2>
{
 8001e4a:	b500      	push	{lr}
 8001e4c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e4e:	6802      	ldr	r2, [r0, #0]
 8001e50:	68d3      	ldr	r3, [r2, #12]
 8001e52:	f023 0320 	bic.w	r3, r3, #32
 8001e56:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e58:	6802      	ldr	r2, [r0, #0]
 8001e5a:	68d3      	ldr	r3, [r2, #12]
 8001e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e60:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e62:	6802      	ldr	r2, [r0, #0]
 8001e64:	6953      	ldr	r3, [r2, #20]
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e72:	2300      	movs	r3, #0
 8001e74:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e76:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d133      	bne.n	8001ee4 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e80:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e82:	f102 030c 	add.w	r3, r2, #12
 8001e86:	e853 3f00 	ldrex	r3, [r3]
 8001e8a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e8e:	320c      	adds	r2, #12
 8001e90:	e842 3100 	strex	r1, r3, [r2]
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d1f3      	bne.n	8001e80 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001e98:	6803      	ldr	r3, [r0, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	f012 0f10 	tst.w	r2, #16
 8001ea0:	d006      	beq.n	8001eb0 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	9201      	str	r2, [sp, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	9201      	str	r2, [sp, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001eb0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001eb2:	f7ff ffaa 	bl	8001e0a <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8001eb6:	2000      	movs	r0, #0
}
 8001eb8:	b003      	add	sp, #12
 8001eba:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ebe:	6902      	ldr	r2, [r0, #16]
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d1ac      	bne.n	8001e1e <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001ec4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ec6:	6803      	ldr	r3, [r0, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ece:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001ed0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	6283      	str	r3, [r0, #40]	; 0x28
 8001ed6:	e7b1      	b.n	8001e3c <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ed8:	6803      	ldr	r3, [r0, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee0:	7013      	strb	r3, [r2, #0]
 8001ee2:	e7a8      	b.n	8001e36 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8001ee4:	f7ff ff1c 	bl	8001d20 <HAL_UART_RxCpltCallback>
 8001ee8:	e7e5      	b.n	8001eb6 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8001eea:	2002      	movs	r0, #2
 8001eec:	4770      	bx	lr
    return HAL_OK;
 8001eee:	2000      	movs	r0, #0
}
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_UART_IRQHandler>:
{
 8001ef4:	b530      	push	{r4, r5, lr}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001efa:	6802      	ldr	r2, [r0, #0]
 8001efc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001efe:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f00:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001f02:	f013 050f 	ands.w	r5, r3, #15
 8001f06:	d105      	bne.n	8001f14 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f08:	f013 0f20 	tst.w	r3, #32
 8001f0c:	d002      	beq.n	8001f14 <HAL_UART_IRQHandler+0x20>
 8001f0e:	f010 0f20 	tst.w	r0, #32
 8001f12:	d119      	bne.n	8001f48 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f14:	b12d      	cbz	r5, 8001f22 <HAL_UART_IRQHandler+0x2e>
 8001f16:	f011 0101 	ands.w	r1, r1, #1
 8001f1a:	d119      	bne.n	8001f50 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f1c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8001f20:	d116      	bne.n	8001f50 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001f24:	2901      	cmp	r1, #1
 8001f26:	d07d      	beq.n	8002024 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f2c:	d003      	beq.n	8001f36 <HAL_UART_IRQHandler+0x42>
 8001f2e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f32:	f040 8118 	bne.w	8002166 <HAL_UART_IRQHandler+0x272>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f3a:	d003      	beq.n	8001f44 <HAL_UART_IRQHandler+0x50>
 8001f3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f40:	f040 8115 	bne.w	800216e <HAL_UART_IRQHandler+0x27a>
}
 8001f44:	b003      	add	sp, #12
 8001f46:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff ff5f 	bl	8001e0c <UART_Receive_IT>
      return;
 8001f4e:	e7f9      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f50:	f013 0f01 	tst.w	r3, #1
 8001f54:	d006      	beq.n	8001f64 <HAL_UART_IRQHandler+0x70>
 8001f56:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001f5a:	d003      	beq.n	8001f64 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f64:	f013 0f04 	tst.w	r3, #4
 8001f68:	d004      	beq.n	8001f74 <HAL_UART_IRQHandler+0x80>
 8001f6a:	b119      	cbz	r1, 8001f74 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f6e:	f042 0202 	orr.w	r2, r2, #2
 8001f72:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f74:	f013 0f02 	tst.w	r3, #2
 8001f78:	d004      	beq.n	8001f84 <HAL_UART_IRQHandler+0x90>
 8001f7a:	b119      	cbz	r1, 8001f84 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f7e:	f042 0204 	orr.w	r2, r2, #4
 8001f82:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f84:	f013 0f08 	tst.w	r3, #8
 8001f88:	d007      	beq.n	8001f9a <HAL_UART_IRQHandler+0xa6>
 8001f8a:	f010 0f20 	tst.w	r0, #32
 8001f8e:	d100      	bne.n	8001f92 <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f90:	b119      	cbz	r1, 8001f9a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f92:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f94:	f042 0208 	orr.w	r2, r2, #8
 8001f98:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f9c:	2a00      	cmp	r2, #0
 8001f9e:	d0d1      	beq.n	8001f44 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fa0:	f013 0f20 	tst.w	r3, #32
 8001fa4:	d002      	beq.n	8001fac <HAL_UART_IRQHandler+0xb8>
 8001fa6:	f010 0f20 	tst.w	r0, #32
 8001faa:	d129      	bne.n	8002000 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fb4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001fb6:	f012 0f08 	tst.w	r2, #8
 8001fba:	d100      	bne.n	8001fbe <HAL_UART_IRQHandler+0xca>
 8001fbc:	b363      	cbz	r3, 8002018 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff fdac 	bl	8001b1c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001fcc:	d020      	beq.n	8002010 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd0:	f102 0314 	add.w	r3, r2, #20
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fdc:	3214      	adds	r2, #20
 8001fde:	e842 3100 	strex	r1, r3, [r2]
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d1f3      	bne.n	8001fce <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 8001fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fe8:	b173      	cbz	r3, 8002008 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fea:	4a63      	ldr	r2, [pc, #396]	; (8002178 <HAL_UART_IRQHandler+0x284>)
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ff0:	f7fe fcea 	bl	80009c8 <HAL_DMA_Abort_IT>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d0a5      	beq.n	8001f44 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ff8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ffa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ffc:	4798      	blx	r3
 8001ffe:	e7a1      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff ff03 	bl	8001e0c <UART_Receive_IT>
 8002006:	e7d1      	b.n	8001fac <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff fe8a 	bl	8001d22 <HAL_UART_ErrorCallback>
 800200e:	e799      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff fe86 	bl	8001d22 <HAL_UART_ErrorCallback>
 8002016:	e795      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fe82 	bl	8001d22 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201e:	2300      	movs	r3, #0
 8002020:	6463      	str	r3, [r4, #68]	; 0x44
    return;
 8002022:	e78f      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002024:	f013 0f10 	tst.w	r3, #16
 8002028:	f43f af7e 	beq.w	8001f28 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800202c:	f010 0f10 	tst.w	r0, #16
 8002030:	f43f af7a 	beq.w	8001f28 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002034:	2300      	movs	r3, #0
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	6853      	ldr	r3, [r2, #4]
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002042:	6953      	ldr	r3, [r2, #20]
 8002044:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002048:	d051      	beq.n	80020ee <HAL_UART_IRQHandler+0x1fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800204a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800204c:	6813      	ldr	r3, [r2, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002052:	2b00      	cmp	r3, #0
 8002054:	f43f af76 	beq.w	8001f44 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002058:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800205a:	4299      	cmp	r1, r3
 800205c:	f67f af72 	bls.w	8001f44 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8002060:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002062:	6993      	ldr	r3, [r2, #24]
 8002064:	2b20      	cmp	r3, #32
 8002066:	d037      	beq.n	80020d8 <HAL_UART_IRQHandler+0x1e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002068:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206a:	f102 030c 	add.w	r3, r2, #12
 800206e:	e853 3f00 	ldrex	r3, [r3]
 8002072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002076:	320c      	adds	r2, #12
 8002078:	e842 3100 	strex	r1, r3, [r2]
 800207c:	2900      	cmp	r1, #0
 800207e:	d1f3      	bne.n	8002068 <HAL_UART_IRQHandler+0x174>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002080:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002082:	f102 0314 	add.w	r3, r2, #20
 8002086:	e853 3f00 	ldrex	r3, [r3]
 800208a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208e:	3214      	adds	r2, #20
 8002090:	e842 3100 	strex	r1, r3, [r2]
 8002094:	2900      	cmp	r1, #0
 8002096:	d1f3      	bne.n	8002080 <HAL_UART_IRQHandler+0x18c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002098:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209a:	f102 0314 	add.w	r3, r2, #20
 800209e:	e853 3f00 	ldrex	r3, [r3]
 80020a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a6:	3214      	adds	r2, #20
 80020a8:	e842 3100 	strex	r1, r3, [r2]
 80020ac:	2900      	cmp	r1, #0
 80020ae:	d1f3      	bne.n	8002098 <HAL_UART_IRQHandler+0x1a4>
          huart->RxState = HAL_UART_STATE_READY;
 80020b0:	2320      	movs	r3, #32
 80020b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b6:	2300      	movs	r3, #0
 80020b8:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020bc:	f102 030c 	add.w	r3, r2, #12
 80020c0:	e853 3f00 	ldrex	r3, [r3]
 80020c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c8:	320c      	adds	r2, #12
 80020ca:	e842 3100 	strex	r1, r3, [r2]
 80020ce:	2900      	cmp	r1, #0
 80020d0:	d1f3      	bne.n	80020ba <HAL_UART_IRQHandler+0x1c6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80020d4:	f7fe fc54 	bl	8000980 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020d8:	2302      	movs	r3, #2
 80020da:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020dc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80020de:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	1ac9      	subs	r1, r1, r3
 80020e4:	b289      	uxth	r1, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	f7ff fe8f 	bl	8001e0a <HAL_UARTEx_RxEventCallback>
      return;
 80020ec:	e72a      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020ee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80020f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	1ac9      	subs	r1, r1, r3
 80020f6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80020f8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f43f af21 	beq.w	8001f44 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8002102:	2900      	cmp	r1, #0
 8002104:	f43f af1e 	beq.w	8001f44 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002108:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210a:	f102 030c 	add.w	r3, r2, #12
 800210e:	e853 3f00 	ldrex	r3, [r3]
 8002112:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002116:	320c      	adds	r2, #12
 8002118:	e842 3000 	strex	r0, r3, [r2]
 800211c:	2800      	cmp	r0, #0
 800211e:	d1f3      	bne.n	8002108 <HAL_UART_IRQHandler+0x214>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002120:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002122:	f102 0314 	add.w	r3, r2, #20
 8002126:	e853 3f00 	ldrex	r3, [r3]
 800212a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212e:	3214      	adds	r2, #20
 8002130:	e842 3000 	strex	r0, r3, [r2]
 8002134:	2800      	cmp	r0, #0
 8002136:	d1f3      	bne.n	8002120 <HAL_UART_IRQHandler+0x22c>
        huart->RxState = HAL_UART_STATE_READY;
 8002138:	2320      	movs	r3, #32
 800213a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800213e:	2300      	movs	r3, #0
 8002140:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002142:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002144:	f102 030c 	add.w	r3, r2, #12
 8002148:	e853 3f00 	ldrex	r3, [r3]
 800214c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002150:	320c      	adds	r2, #12
 8002152:	e842 3000 	strex	r0, r3, [r2]
 8002156:	2800      	cmp	r0, #0
 8002158:	d1f3      	bne.n	8002142 <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800215a:	2302      	movs	r3, #2
 800215c:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff fe53 	bl	8001e0a <HAL_UARTEx_RxEventCallback>
      return;
 8002164:	e6ee      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff fd06 	bl	8001b78 <UART_Transmit_IT>
    return;
 800216c:	e6ea      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff fdc9 	bl	8001d06 <UART_EndTransmit_IT>
    return;
 8002174:	e6e6      	b.n	8001f44 <HAL_UART_IRQHandler+0x50>
 8002176:	bf00      	nop
 8002178:	08001d25 	.word	0x08001d25

0800217c <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 800217c:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800217e:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002180:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002182:	2300      	movs	r3, #0
 8002184:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002186:	2322      	movs	r3, #34	; 0x22
 8002188:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 800218c:	6903      	ldr	r3, [r0, #16]
 800218e:	b123      	cbz	r3, 800219a <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002190:	6802      	ldr	r2, [r0, #0]
 8002192:	68d3      	ldr	r3, [r2, #12]
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800219a:	6802      	ldr	r2, [r0, #0]
 800219c:	6953      	ldr	r3, [r2, #20]
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021a4:	6802      	ldr	r2, [r0, #0]
 80021a6:	68d3      	ldr	r3, [r2, #12]
 80021a8:	f043 0320 	orr.w	r3, r3, #32
 80021ac:	60d3      	str	r3, [r2, #12]
}
 80021ae:	2000      	movs	r0, #0
 80021b0:	4770      	bx	lr

080021b2 <HAL_UART_Receive_IT>:
{
 80021b2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80021b4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d108      	bne.n	80021d0 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 80021be:	b149      	cbz	r1, 80021d4 <HAL_UART_Receive_IT+0x22>
 80021c0:	b90a      	cbnz	r2, 80021c6 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 80021c2:	2001      	movs	r0, #1
}
 80021c4:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c6:	2300      	movs	r3, #0
 80021c8:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 80021ca:	f7ff ffd7 	bl	800217c <UART_Start_Receive_IT>
 80021ce:	e7f9      	b.n	80021c4 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 80021d0:	2002      	movs	r0, #2
 80021d2:	e7f7      	b.n	80021c4 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 80021d4:	2001      	movs	r0, #1
 80021d6:	e7f5      	b.n	80021c4 <HAL_UART_Receive_IT+0x12>

080021d8 <__errno>:
 80021d8:	4b01      	ldr	r3, [pc, #4]	; (80021e0 <__errno+0x8>)
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000028 	.word	0x20000028

080021e4 <__libc_init_array>:
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	2600      	movs	r6, #0
 80021e8:	4d0c      	ldr	r5, [pc, #48]	; (800221c <__libc_init_array+0x38>)
 80021ea:	4c0d      	ldr	r4, [pc, #52]	; (8002220 <__libc_init_array+0x3c>)
 80021ec:	1b64      	subs	r4, r4, r5
 80021ee:	10a4      	asrs	r4, r4, #2
 80021f0:	42a6      	cmp	r6, r4
 80021f2:	d109      	bne.n	8002208 <__libc_init_array+0x24>
 80021f4:	f001 f950 	bl	8003498 <_init>
 80021f8:	2600      	movs	r6, #0
 80021fa:	4d0a      	ldr	r5, [pc, #40]	; (8002224 <__libc_init_array+0x40>)
 80021fc:	4c0a      	ldr	r4, [pc, #40]	; (8002228 <__libc_init_array+0x44>)
 80021fe:	1b64      	subs	r4, r4, r5
 8002200:	10a4      	asrs	r4, r4, #2
 8002202:	42a6      	cmp	r6, r4
 8002204:	d105      	bne.n	8002212 <__libc_init_array+0x2e>
 8002206:	bd70      	pop	{r4, r5, r6, pc}
 8002208:	f855 3b04 	ldr.w	r3, [r5], #4
 800220c:	4798      	blx	r3
 800220e:	3601      	adds	r6, #1
 8002210:	e7ee      	b.n	80021f0 <__libc_init_array+0xc>
 8002212:	f855 3b04 	ldr.w	r3, [r5], #4
 8002216:	4798      	blx	r3
 8002218:	3601      	adds	r6, #1
 800221a:	e7f2      	b.n	8002202 <__libc_init_array+0x1e>
 800221c:	080036e4 	.word	0x080036e4
 8002220:	080036e4 	.word	0x080036e4
 8002224:	080036e4 	.word	0x080036e4
 8002228:	080036e8 	.word	0x080036e8

0800222c <memset>:
 800222c:	4603      	mov	r3, r0
 800222e:	4402      	add	r2, r0
 8002230:	4293      	cmp	r3, r2
 8002232:	d100      	bne.n	8002236 <memset+0xa>
 8002234:	4770      	bx	lr
 8002236:	f803 1b01 	strb.w	r1, [r3], #1
 800223a:	e7f9      	b.n	8002230 <memset+0x4>

0800223c <siprintf>:
 800223c:	b40e      	push	{r1, r2, r3}
 800223e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002242:	b500      	push	{lr}
 8002244:	b09c      	sub	sp, #112	; 0x70
 8002246:	ab1d      	add	r3, sp, #116	; 0x74
 8002248:	9002      	str	r0, [sp, #8]
 800224a:	9006      	str	r0, [sp, #24]
 800224c:	9107      	str	r1, [sp, #28]
 800224e:	9104      	str	r1, [sp, #16]
 8002250:	4808      	ldr	r0, [pc, #32]	; (8002274 <siprintf+0x38>)
 8002252:	4909      	ldr	r1, [pc, #36]	; (8002278 <siprintf+0x3c>)
 8002254:	f853 2b04 	ldr.w	r2, [r3], #4
 8002258:	9105      	str	r1, [sp, #20]
 800225a:	6800      	ldr	r0, [r0, #0]
 800225c:	a902      	add	r1, sp, #8
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	f000 f894 	bl	800238c <_svfiprintf_r>
 8002264:	2200      	movs	r2, #0
 8002266:	9b02      	ldr	r3, [sp, #8]
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	b01c      	add	sp, #112	; 0x70
 800226c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002270:	b003      	add	sp, #12
 8002272:	4770      	bx	lr
 8002274:	20000028 	.word	0x20000028
 8002278:	ffff0208 	.word	0xffff0208

0800227c <siscanf>:
 800227c:	b40e      	push	{r1, r2, r3}
 800227e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002282:	b530      	push	{r4, r5, lr}
 8002284:	b09c      	sub	sp, #112	; 0x70
 8002286:	ac1f      	add	r4, sp, #124	; 0x7c
 8002288:	f854 5b04 	ldr.w	r5, [r4], #4
 800228c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002290:	9002      	str	r0, [sp, #8]
 8002292:	9006      	str	r0, [sp, #24]
 8002294:	f7fd ff5a 	bl	800014c <strlen>
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <siscanf+0x4c>)
 800229a:	9003      	str	r0, [sp, #12]
 800229c:	930b      	str	r3, [sp, #44]	; 0x2c
 800229e:	2300      	movs	r3, #0
 80022a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80022a2:	9314      	str	r3, [sp, #80]	; 0x50
 80022a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a8:	9007      	str	r0, [sp, #28]
 80022aa:	4808      	ldr	r0, [pc, #32]	; (80022cc <siscanf+0x50>)
 80022ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80022b0:	462a      	mov	r2, r5
 80022b2:	4623      	mov	r3, r4
 80022b4:	a902      	add	r1, sp, #8
 80022b6:	6800      	ldr	r0, [r0, #0]
 80022b8:	9401      	str	r4, [sp, #4]
 80022ba:	f000 f9c1 	bl	8002640 <__ssvfiscanf_r>
 80022be:	b01c      	add	sp, #112	; 0x70
 80022c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022c4:	b003      	add	sp, #12
 80022c6:	4770      	bx	lr
 80022c8:	080022d1 	.word	0x080022d1
 80022cc:	20000028 	.word	0x20000028

080022d0 <__seofread>:
 80022d0:	2000      	movs	r0, #0
 80022d2:	4770      	bx	lr

080022d4 <__ssputs_r>:
 80022d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022d8:	688e      	ldr	r6, [r1, #8]
 80022da:	4682      	mov	sl, r0
 80022dc:	429e      	cmp	r6, r3
 80022de:	460c      	mov	r4, r1
 80022e0:	4690      	mov	r8, r2
 80022e2:	461f      	mov	r7, r3
 80022e4:	d838      	bhi.n	8002358 <__ssputs_r+0x84>
 80022e6:	898a      	ldrh	r2, [r1, #12]
 80022e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022ec:	d032      	beq.n	8002354 <__ssputs_r+0x80>
 80022ee:	6825      	ldr	r5, [r4, #0]
 80022f0:	6909      	ldr	r1, [r1, #16]
 80022f2:	3301      	adds	r3, #1
 80022f4:	eba5 0901 	sub.w	r9, r5, r1
 80022f8:	6965      	ldr	r5, [r4, #20]
 80022fa:	444b      	add	r3, r9
 80022fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002304:	106d      	asrs	r5, r5, #1
 8002306:	429d      	cmp	r5, r3
 8002308:	bf38      	it	cc
 800230a:	461d      	movcc	r5, r3
 800230c:	0553      	lsls	r3, r2, #21
 800230e:	d531      	bpl.n	8002374 <__ssputs_r+0xa0>
 8002310:	4629      	mov	r1, r5
 8002312:	f000 fff9 	bl	8003308 <_malloc_r>
 8002316:	4606      	mov	r6, r0
 8002318:	b950      	cbnz	r0, 8002330 <__ssputs_r+0x5c>
 800231a:	230c      	movs	r3, #12
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f8ca 3000 	str.w	r3, [sl]
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232a:	81a3      	strh	r3, [r4, #12]
 800232c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002330:	464a      	mov	r2, r9
 8002332:	6921      	ldr	r1, [r4, #16]
 8002334:	f000 ff58 	bl	80031e8 <memcpy>
 8002338:	89a3      	ldrh	r3, [r4, #12]
 800233a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800233e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002342:	81a3      	strh	r3, [r4, #12]
 8002344:	6126      	str	r6, [r4, #16]
 8002346:	444e      	add	r6, r9
 8002348:	6026      	str	r6, [r4, #0]
 800234a:	463e      	mov	r6, r7
 800234c:	6165      	str	r5, [r4, #20]
 800234e:	eba5 0509 	sub.w	r5, r5, r9
 8002352:	60a5      	str	r5, [r4, #8]
 8002354:	42be      	cmp	r6, r7
 8002356:	d900      	bls.n	800235a <__ssputs_r+0x86>
 8002358:	463e      	mov	r6, r7
 800235a:	4632      	mov	r2, r6
 800235c:	4641      	mov	r1, r8
 800235e:	6820      	ldr	r0, [r4, #0]
 8002360:	f000 ff50 	bl	8003204 <memmove>
 8002364:	68a3      	ldr	r3, [r4, #8]
 8002366:	2000      	movs	r0, #0
 8002368:	1b9b      	subs	r3, r3, r6
 800236a:	60a3      	str	r3, [r4, #8]
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	4433      	add	r3, r6
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	e7db      	b.n	800232c <__ssputs_r+0x58>
 8002374:	462a      	mov	r2, r5
 8002376:	f001 f83b 	bl	80033f0 <_realloc_r>
 800237a:	4606      	mov	r6, r0
 800237c:	2800      	cmp	r0, #0
 800237e:	d1e1      	bne.n	8002344 <__ssputs_r+0x70>
 8002380:	4650      	mov	r0, sl
 8002382:	6921      	ldr	r1, [r4, #16]
 8002384:	f000 ff58 	bl	8003238 <_free_r>
 8002388:	e7c7      	b.n	800231a <__ssputs_r+0x46>
	...

0800238c <_svfiprintf_r>:
 800238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002390:	4698      	mov	r8, r3
 8002392:	898b      	ldrh	r3, [r1, #12]
 8002394:	4607      	mov	r7, r0
 8002396:	061b      	lsls	r3, r3, #24
 8002398:	460d      	mov	r5, r1
 800239a:	4614      	mov	r4, r2
 800239c:	b09d      	sub	sp, #116	; 0x74
 800239e:	d50e      	bpl.n	80023be <_svfiprintf_r+0x32>
 80023a0:	690b      	ldr	r3, [r1, #16]
 80023a2:	b963      	cbnz	r3, 80023be <_svfiprintf_r+0x32>
 80023a4:	2140      	movs	r1, #64	; 0x40
 80023a6:	f000 ffaf 	bl	8003308 <_malloc_r>
 80023aa:	6028      	str	r0, [r5, #0]
 80023ac:	6128      	str	r0, [r5, #16]
 80023ae:	b920      	cbnz	r0, 80023ba <_svfiprintf_r+0x2e>
 80023b0:	230c      	movs	r3, #12
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	e0d1      	b.n	800255e <_svfiprintf_r+0x1d2>
 80023ba:	2340      	movs	r3, #64	; 0x40
 80023bc:	616b      	str	r3, [r5, #20]
 80023be:	2300      	movs	r3, #0
 80023c0:	9309      	str	r3, [sp, #36]	; 0x24
 80023c2:	2320      	movs	r3, #32
 80023c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023c8:	2330      	movs	r3, #48	; 0x30
 80023ca:	f04f 0901 	mov.w	r9, #1
 80023ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80023d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002578 <_svfiprintf_r+0x1ec>
 80023d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023da:	4623      	mov	r3, r4
 80023dc:	469a      	mov	sl, r3
 80023de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023e2:	b10a      	cbz	r2, 80023e8 <_svfiprintf_r+0x5c>
 80023e4:	2a25      	cmp	r2, #37	; 0x25
 80023e6:	d1f9      	bne.n	80023dc <_svfiprintf_r+0x50>
 80023e8:	ebba 0b04 	subs.w	fp, sl, r4
 80023ec:	d00b      	beq.n	8002406 <_svfiprintf_r+0x7a>
 80023ee:	465b      	mov	r3, fp
 80023f0:	4622      	mov	r2, r4
 80023f2:	4629      	mov	r1, r5
 80023f4:	4638      	mov	r0, r7
 80023f6:	f7ff ff6d 	bl	80022d4 <__ssputs_r>
 80023fa:	3001      	adds	r0, #1
 80023fc:	f000 80aa 	beq.w	8002554 <_svfiprintf_r+0x1c8>
 8002400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002402:	445a      	add	r2, fp
 8002404:	9209      	str	r2, [sp, #36]	; 0x24
 8002406:	f89a 3000 	ldrb.w	r3, [sl]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80a2 	beq.w	8002554 <_svfiprintf_r+0x1c8>
 8002410:	2300      	movs	r3, #0
 8002412:	f04f 32ff 	mov.w	r2, #4294967295
 8002416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800241a:	f10a 0a01 	add.w	sl, sl, #1
 800241e:	9304      	str	r3, [sp, #16]
 8002420:	9307      	str	r3, [sp, #28]
 8002422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002426:	931a      	str	r3, [sp, #104]	; 0x68
 8002428:	4654      	mov	r4, sl
 800242a:	2205      	movs	r2, #5
 800242c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002430:	4851      	ldr	r0, [pc, #324]	; (8002578 <_svfiprintf_r+0x1ec>)
 8002432:	f000 fecb 	bl	80031cc <memchr>
 8002436:	9a04      	ldr	r2, [sp, #16]
 8002438:	b9d8      	cbnz	r0, 8002472 <_svfiprintf_r+0xe6>
 800243a:	06d0      	lsls	r0, r2, #27
 800243c:	bf44      	itt	mi
 800243e:	2320      	movmi	r3, #32
 8002440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002444:	0711      	lsls	r1, r2, #28
 8002446:	bf44      	itt	mi
 8002448:	232b      	movmi	r3, #43	; 0x2b
 800244a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800244e:	f89a 3000 	ldrb.w	r3, [sl]
 8002452:	2b2a      	cmp	r3, #42	; 0x2a
 8002454:	d015      	beq.n	8002482 <_svfiprintf_r+0xf6>
 8002456:	4654      	mov	r4, sl
 8002458:	2000      	movs	r0, #0
 800245a:	f04f 0c0a 	mov.w	ip, #10
 800245e:	9a07      	ldr	r2, [sp, #28]
 8002460:	4621      	mov	r1, r4
 8002462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002466:	3b30      	subs	r3, #48	; 0x30
 8002468:	2b09      	cmp	r3, #9
 800246a:	d94e      	bls.n	800250a <_svfiprintf_r+0x17e>
 800246c:	b1b0      	cbz	r0, 800249c <_svfiprintf_r+0x110>
 800246e:	9207      	str	r2, [sp, #28]
 8002470:	e014      	b.n	800249c <_svfiprintf_r+0x110>
 8002472:	eba0 0308 	sub.w	r3, r0, r8
 8002476:	fa09 f303 	lsl.w	r3, r9, r3
 800247a:	4313      	orrs	r3, r2
 800247c:	46a2      	mov	sl, r4
 800247e:	9304      	str	r3, [sp, #16]
 8002480:	e7d2      	b.n	8002428 <_svfiprintf_r+0x9c>
 8002482:	9b03      	ldr	r3, [sp, #12]
 8002484:	1d19      	adds	r1, r3, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	9103      	str	r1, [sp, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	bfbb      	ittet	lt
 800248e:	425b      	neglt	r3, r3
 8002490:	f042 0202 	orrlt.w	r2, r2, #2
 8002494:	9307      	strge	r3, [sp, #28]
 8002496:	9307      	strlt	r3, [sp, #28]
 8002498:	bfb8      	it	lt
 800249a:	9204      	strlt	r2, [sp, #16]
 800249c:	7823      	ldrb	r3, [r4, #0]
 800249e:	2b2e      	cmp	r3, #46	; 0x2e
 80024a0:	d10c      	bne.n	80024bc <_svfiprintf_r+0x130>
 80024a2:	7863      	ldrb	r3, [r4, #1]
 80024a4:	2b2a      	cmp	r3, #42	; 0x2a
 80024a6:	d135      	bne.n	8002514 <_svfiprintf_r+0x188>
 80024a8:	9b03      	ldr	r3, [sp, #12]
 80024aa:	3402      	adds	r4, #2
 80024ac:	1d1a      	adds	r2, r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	9203      	str	r2, [sp, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bfb8      	it	lt
 80024b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80024ba:	9305      	str	r3, [sp, #20]
 80024bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800257c <_svfiprintf_r+0x1f0>
 80024c0:	2203      	movs	r2, #3
 80024c2:	4650      	mov	r0, sl
 80024c4:	7821      	ldrb	r1, [r4, #0]
 80024c6:	f000 fe81 	bl	80031cc <memchr>
 80024ca:	b140      	cbz	r0, 80024de <_svfiprintf_r+0x152>
 80024cc:	2340      	movs	r3, #64	; 0x40
 80024ce:	eba0 000a 	sub.w	r0, r0, sl
 80024d2:	fa03 f000 	lsl.w	r0, r3, r0
 80024d6:	9b04      	ldr	r3, [sp, #16]
 80024d8:	3401      	adds	r4, #1
 80024da:	4303      	orrs	r3, r0
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024e2:	2206      	movs	r2, #6
 80024e4:	4826      	ldr	r0, [pc, #152]	; (8002580 <_svfiprintf_r+0x1f4>)
 80024e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024ea:	f000 fe6f 	bl	80031cc <memchr>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d038      	beq.n	8002564 <_svfiprintf_r+0x1d8>
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <_svfiprintf_r+0x1f8>)
 80024f4:	bb1b      	cbnz	r3, 800253e <_svfiprintf_r+0x1b2>
 80024f6:	9b03      	ldr	r3, [sp, #12]
 80024f8:	3307      	adds	r3, #7
 80024fa:	f023 0307 	bic.w	r3, r3, #7
 80024fe:	3308      	adds	r3, #8
 8002500:	9303      	str	r3, [sp, #12]
 8002502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002504:	4433      	add	r3, r6
 8002506:	9309      	str	r3, [sp, #36]	; 0x24
 8002508:	e767      	b.n	80023da <_svfiprintf_r+0x4e>
 800250a:	460c      	mov	r4, r1
 800250c:	2001      	movs	r0, #1
 800250e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002512:	e7a5      	b.n	8002460 <_svfiprintf_r+0xd4>
 8002514:	2300      	movs	r3, #0
 8002516:	f04f 0c0a 	mov.w	ip, #10
 800251a:	4619      	mov	r1, r3
 800251c:	3401      	adds	r4, #1
 800251e:	9305      	str	r3, [sp, #20]
 8002520:	4620      	mov	r0, r4
 8002522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002526:	3a30      	subs	r2, #48	; 0x30
 8002528:	2a09      	cmp	r2, #9
 800252a:	d903      	bls.n	8002534 <_svfiprintf_r+0x1a8>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0c5      	beq.n	80024bc <_svfiprintf_r+0x130>
 8002530:	9105      	str	r1, [sp, #20]
 8002532:	e7c3      	b.n	80024bc <_svfiprintf_r+0x130>
 8002534:	4604      	mov	r4, r0
 8002536:	2301      	movs	r3, #1
 8002538:	fb0c 2101 	mla	r1, ip, r1, r2
 800253c:	e7f0      	b.n	8002520 <_svfiprintf_r+0x194>
 800253e:	ab03      	add	r3, sp, #12
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	462a      	mov	r2, r5
 8002544:	4638      	mov	r0, r7
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <_svfiprintf_r+0x1fc>)
 8002548:	a904      	add	r1, sp, #16
 800254a:	f3af 8000 	nop.w
 800254e:	1c42      	adds	r2, r0, #1
 8002550:	4606      	mov	r6, r0
 8002552:	d1d6      	bne.n	8002502 <_svfiprintf_r+0x176>
 8002554:	89ab      	ldrh	r3, [r5, #12]
 8002556:	065b      	lsls	r3, r3, #25
 8002558:	f53f af2c 	bmi.w	80023b4 <_svfiprintf_r+0x28>
 800255c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800255e:	b01d      	add	sp, #116	; 0x74
 8002560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002564:	ab03      	add	r3, sp, #12
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	462a      	mov	r2, r5
 800256a:	4638      	mov	r0, r7
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <_svfiprintf_r+0x1fc>)
 800256e:	a904      	add	r1, sp, #16
 8002570:	f000 fa50 	bl	8002a14 <_printf_i>
 8002574:	e7eb      	b.n	800254e <_svfiprintf_r+0x1c2>
 8002576:	bf00      	nop
 8002578:	08003532 	.word	0x08003532
 800257c:	08003538 	.word	0x08003538
 8002580:	0800353c 	.word	0x0800353c
 8002584:	00000000 	.word	0x00000000
 8002588:	080022d5 	.word	0x080022d5

0800258c <_sungetc_r>:
 800258c:	b538      	push	{r3, r4, r5, lr}
 800258e:	1c4b      	adds	r3, r1, #1
 8002590:	4614      	mov	r4, r2
 8002592:	d103      	bne.n	800259c <_sungetc_r+0x10>
 8002594:	f04f 35ff 	mov.w	r5, #4294967295
 8002598:	4628      	mov	r0, r5
 800259a:	bd38      	pop	{r3, r4, r5, pc}
 800259c:	8993      	ldrh	r3, [r2, #12]
 800259e:	b2cd      	uxtb	r5, r1
 80025a0:	f023 0320 	bic.w	r3, r3, #32
 80025a4:	8193      	strh	r3, [r2, #12]
 80025a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025a8:	6852      	ldr	r2, [r2, #4]
 80025aa:	b18b      	cbz	r3, 80025d0 <_sungetc_r+0x44>
 80025ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025ae:	4293      	cmp	r3, r2
 80025b0:	dd08      	ble.n	80025c4 <_sungetc_r+0x38>
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	1e5a      	subs	r2, r3, #1
 80025b6:	6022      	str	r2, [r4, #0]
 80025b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80025bc:	6863      	ldr	r3, [r4, #4]
 80025be:	3301      	adds	r3, #1
 80025c0:	6063      	str	r3, [r4, #4]
 80025c2:	e7e9      	b.n	8002598 <_sungetc_r+0xc>
 80025c4:	4621      	mov	r1, r4
 80025c6:	f000 fdc7 	bl	8003158 <__submore>
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d0f1      	beq.n	80025b2 <_sungetc_r+0x26>
 80025ce:	e7e1      	b.n	8002594 <_sungetc_r+0x8>
 80025d0:	6921      	ldr	r1, [r4, #16]
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	b151      	cbz	r1, 80025ec <_sungetc_r+0x60>
 80025d6:	4299      	cmp	r1, r3
 80025d8:	d208      	bcs.n	80025ec <_sungetc_r+0x60>
 80025da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80025de:	42a9      	cmp	r1, r5
 80025e0:	d104      	bne.n	80025ec <_sungetc_r+0x60>
 80025e2:	3b01      	subs	r3, #1
 80025e4:	3201      	adds	r2, #1
 80025e6:	6023      	str	r3, [r4, #0]
 80025e8:	6062      	str	r2, [r4, #4]
 80025ea:	e7d5      	b.n	8002598 <_sungetc_r+0xc>
 80025ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80025f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025f4:	6363      	str	r3, [r4, #52]	; 0x34
 80025f6:	2303      	movs	r3, #3
 80025f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80025fa:	4623      	mov	r3, r4
 80025fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002600:	6023      	str	r3, [r4, #0]
 8002602:	2301      	movs	r3, #1
 8002604:	e7dc      	b.n	80025c0 <_sungetc_r+0x34>

08002606 <__ssrefill_r>:
 8002606:	b510      	push	{r4, lr}
 8002608:	460c      	mov	r4, r1
 800260a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800260c:	b169      	cbz	r1, 800262a <__ssrefill_r+0x24>
 800260e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002612:	4299      	cmp	r1, r3
 8002614:	d001      	beq.n	800261a <__ssrefill_r+0x14>
 8002616:	f000 fe0f 	bl	8003238 <_free_r>
 800261a:	2000      	movs	r0, #0
 800261c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800261e:	6360      	str	r0, [r4, #52]	; 0x34
 8002620:	6063      	str	r3, [r4, #4]
 8002622:	b113      	cbz	r3, 800262a <__ssrefill_r+0x24>
 8002624:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002626:	6023      	str	r3, [r4, #0]
 8002628:	bd10      	pop	{r4, pc}
 800262a:	6923      	ldr	r3, [r4, #16]
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	6023      	str	r3, [r4, #0]
 8002632:	2300      	movs	r3, #0
 8002634:	6063      	str	r3, [r4, #4]
 8002636:	89a3      	ldrh	r3, [r4, #12]
 8002638:	f043 0320 	orr.w	r3, r3, #32
 800263c:	81a3      	strh	r3, [r4, #12]
 800263e:	e7f3      	b.n	8002628 <__ssrefill_r+0x22>

08002640 <__ssvfiscanf_r>:
 8002640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002644:	460c      	mov	r4, r1
 8002646:	2100      	movs	r1, #0
 8002648:	4606      	mov	r6, r0
 800264a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800264e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002652:	49a7      	ldr	r1, [pc, #668]	; (80028f0 <__ssvfiscanf_r+0x2b0>)
 8002654:	f10d 0804 	add.w	r8, sp, #4
 8002658:	91a0      	str	r1, [sp, #640]	; 0x280
 800265a:	49a6      	ldr	r1, [pc, #664]	; (80028f4 <__ssvfiscanf_r+0x2b4>)
 800265c:	4fa6      	ldr	r7, [pc, #664]	; (80028f8 <__ssvfiscanf_r+0x2b8>)
 800265e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80028fc <__ssvfiscanf_r+0x2bc>
 8002662:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002666:	91a1      	str	r1, [sp, #644]	; 0x284
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	7813      	ldrb	r3, [r2, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 815c 	beq.w	800292a <__ssvfiscanf_r+0x2ea>
 8002672:	5dd9      	ldrb	r1, [r3, r7]
 8002674:	1c55      	adds	r5, r2, #1
 8002676:	f011 0108 	ands.w	r1, r1, #8
 800267a:	d019      	beq.n	80026b0 <__ssvfiscanf_r+0x70>
 800267c:	6863      	ldr	r3, [r4, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	dd0f      	ble.n	80026a2 <__ssvfiscanf_r+0x62>
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	5cba      	ldrb	r2, [r7, r2]
 8002688:	0712      	lsls	r2, r2, #28
 800268a:	d401      	bmi.n	8002690 <__ssvfiscanf_r+0x50>
 800268c:	462a      	mov	r2, r5
 800268e:	e7ec      	b.n	800266a <__ssvfiscanf_r+0x2a>
 8002690:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002692:	3301      	adds	r3, #1
 8002694:	3201      	adds	r2, #1
 8002696:	9245      	str	r2, [sp, #276]	; 0x114
 8002698:	6862      	ldr	r2, [r4, #4]
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	3a01      	subs	r2, #1
 800269e:	6062      	str	r2, [r4, #4]
 80026a0:	e7ec      	b.n	800267c <__ssvfiscanf_r+0x3c>
 80026a2:	4621      	mov	r1, r4
 80026a4:	4630      	mov	r0, r6
 80026a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80026a8:	4798      	blx	r3
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d0e9      	beq.n	8002682 <__ssvfiscanf_r+0x42>
 80026ae:	e7ed      	b.n	800268c <__ssvfiscanf_r+0x4c>
 80026b0:	2b25      	cmp	r3, #37	; 0x25
 80026b2:	d012      	beq.n	80026da <__ssvfiscanf_r+0x9a>
 80026b4:	469a      	mov	sl, r3
 80026b6:	6863      	ldr	r3, [r4, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f340 8094 	ble.w	80027e6 <__ssvfiscanf_r+0x1a6>
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	7813      	ldrb	r3, [r2, #0]
 80026c2:	4553      	cmp	r3, sl
 80026c4:	f040 8131 	bne.w	800292a <__ssvfiscanf_r+0x2ea>
 80026c8:	6863      	ldr	r3, [r4, #4]
 80026ca:	3201      	adds	r2, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	6063      	str	r3, [r4, #4]
 80026d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80026d2:	6022      	str	r2, [r4, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	9345      	str	r3, [sp, #276]	; 0x114
 80026d8:	e7d8      	b.n	800268c <__ssvfiscanf_r+0x4c>
 80026da:	9141      	str	r1, [sp, #260]	; 0x104
 80026dc:	9143      	str	r1, [sp, #268]	; 0x10c
 80026de:	7853      	ldrb	r3, [r2, #1]
 80026e0:	2b2a      	cmp	r3, #42	; 0x2a
 80026e2:	bf04      	itt	eq
 80026e4:	2310      	moveq	r3, #16
 80026e6:	1c95      	addeq	r5, r2, #2
 80026e8:	f04f 020a 	mov.w	r2, #10
 80026ec:	bf08      	it	eq
 80026ee:	9341      	streq	r3, [sp, #260]	; 0x104
 80026f0:	46aa      	mov	sl, r5
 80026f2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80026f6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80026fa:	2b09      	cmp	r3, #9
 80026fc:	d91d      	bls.n	800273a <__ssvfiscanf_r+0xfa>
 80026fe:	2203      	movs	r2, #3
 8002700:	487e      	ldr	r0, [pc, #504]	; (80028fc <__ssvfiscanf_r+0x2bc>)
 8002702:	f000 fd63 	bl	80031cc <memchr>
 8002706:	b140      	cbz	r0, 800271a <__ssvfiscanf_r+0xda>
 8002708:	2301      	movs	r3, #1
 800270a:	4655      	mov	r5, sl
 800270c:	eba0 0009 	sub.w	r0, r0, r9
 8002710:	fa03 f000 	lsl.w	r0, r3, r0
 8002714:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002716:	4318      	orrs	r0, r3
 8002718:	9041      	str	r0, [sp, #260]	; 0x104
 800271a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800271e:	2b78      	cmp	r3, #120	; 0x78
 8002720:	d806      	bhi.n	8002730 <__ssvfiscanf_r+0xf0>
 8002722:	2b57      	cmp	r3, #87	; 0x57
 8002724:	d810      	bhi.n	8002748 <__ssvfiscanf_r+0x108>
 8002726:	2b25      	cmp	r3, #37	; 0x25
 8002728:	d0c4      	beq.n	80026b4 <__ssvfiscanf_r+0x74>
 800272a:	d857      	bhi.n	80027dc <__ssvfiscanf_r+0x19c>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d065      	beq.n	80027fc <__ssvfiscanf_r+0x1bc>
 8002730:	2303      	movs	r3, #3
 8002732:	9347      	str	r3, [sp, #284]	; 0x11c
 8002734:	230a      	movs	r3, #10
 8002736:	9342      	str	r3, [sp, #264]	; 0x108
 8002738:	e072      	b.n	8002820 <__ssvfiscanf_r+0x1e0>
 800273a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800273c:	4655      	mov	r5, sl
 800273e:	fb02 1103 	mla	r1, r2, r3, r1
 8002742:	3930      	subs	r1, #48	; 0x30
 8002744:	9143      	str	r1, [sp, #268]	; 0x10c
 8002746:	e7d3      	b.n	80026f0 <__ssvfiscanf_r+0xb0>
 8002748:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800274c:	2a20      	cmp	r2, #32
 800274e:	d8ef      	bhi.n	8002730 <__ssvfiscanf_r+0xf0>
 8002750:	a101      	add	r1, pc, #4	; (adr r1, 8002758 <__ssvfiscanf_r+0x118>)
 8002752:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002756:	bf00      	nop
 8002758:	0800280b 	.word	0x0800280b
 800275c:	08002731 	.word	0x08002731
 8002760:	08002731 	.word	0x08002731
 8002764:	08002869 	.word	0x08002869
 8002768:	08002731 	.word	0x08002731
 800276c:	08002731 	.word	0x08002731
 8002770:	08002731 	.word	0x08002731
 8002774:	08002731 	.word	0x08002731
 8002778:	08002731 	.word	0x08002731
 800277c:	08002731 	.word	0x08002731
 8002780:	08002731 	.word	0x08002731
 8002784:	0800287f 	.word	0x0800287f
 8002788:	08002855 	.word	0x08002855
 800278c:	080027e3 	.word	0x080027e3
 8002790:	080027e3 	.word	0x080027e3
 8002794:	080027e3 	.word	0x080027e3
 8002798:	08002731 	.word	0x08002731
 800279c:	08002859 	.word	0x08002859
 80027a0:	08002731 	.word	0x08002731
 80027a4:	08002731 	.word	0x08002731
 80027a8:	08002731 	.word	0x08002731
 80027ac:	08002731 	.word	0x08002731
 80027b0:	0800288f 	.word	0x0800288f
 80027b4:	08002861 	.word	0x08002861
 80027b8:	08002803 	.word	0x08002803
 80027bc:	08002731 	.word	0x08002731
 80027c0:	08002731 	.word	0x08002731
 80027c4:	0800288b 	.word	0x0800288b
 80027c8:	08002731 	.word	0x08002731
 80027cc:	08002855 	.word	0x08002855
 80027d0:	08002731 	.word	0x08002731
 80027d4:	08002731 	.word	0x08002731
 80027d8:	0800280b 	.word	0x0800280b
 80027dc:	3b45      	subs	r3, #69	; 0x45
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d8a6      	bhi.n	8002730 <__ssvfiscanf_r+0xf0>
 80027e2:	2305      	movs	r3, #5
 80027e4:	e01b      	b.n	800281e <__ssvfiscanf_r+0x1de>
 80027e6:	4621      	mov	r1, r4
 80027e8:	4630      	mov	r0, r6
 80027ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80027ec:	4798      	blx	r3
 80027ee:	2800      	cmp	r0, #0
 80027f0:	f43f af65 	beq.w	80026be <__ssvfiscanf_r+0x7e>
 80027f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80027f6:	2800      	cmp	r0, #0
 80027f8:	f040 808d 	bne.w	8002916 <__ssvfiscanf_r+0x2d6>
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	e08f      	b.n	8002922 <__ssvfiscanf_r+0x2e2>
 8002802:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	9241      	str	r2, [sp, #260]	; 0x104
 800280a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	9241      	str	r2, [sp, #260]	; 0x104
 8002812:	2210      	movs	r2, #16
 8002814:	2b6f      	cmp	r3, #111	; 0x6f
 8002816:	bf34      	ite	cc
 8002818:	2303      	movcc	r3, #3
 800281a:	2304      	movcs	r3, #4
 800281c:	9242      	str	r2, [sp, #264]	; 0x108
 800281e:	9347      	str	r3, [sp, #284]	; 0x11c
 8002820:	6863      	ldr	r3, [r4, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	dd42      	ble.n	80028ac <__ssvfiscanf_r+0x26c>
 8002826:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002828:	0659      	lsls	r1, r3, #25
 800282a:	d404      	bmi.n	8002836 <__ssvfiscanf_r+0x1f6>
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	5cba      	ldrb	r2, [r7, r2]
 8002832:	0712      	lsls	r2, r2, #28
 8002834:	d441      	bmi.n	80028ba <__ssvfiscanf_r+0x27a>
 8002836:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002838:	2b02      	cmp	r3, #2
 800283a:	dc50      	bgt.n	80028de <__ssvfiscanf_r+0x29e>
 800283c:	466b      	mov	r3, sp
 800283e:	4622      	mov	r2, r4
 8002840:	4630      	mov	r0, r6
 8002842:	a941      	add	r1, sp, #260	; 0x104
 8002844:	f000 fa0c 	bl	8002c60 <_scanf_chars>
 8002848:	2801      	cmp	r0, #1
 800284a:	d06e      	beq.n	800292a <__ssvfiscanf_r+0x2ea>
 800284c:	2802      	cmp	r0, #2
 800284e:	f47f af1d 	bne.w	800268c <__ssvfiscanf_r+0x4c>
 8002852:	e7cf      	b.n	80027f4 <__ssvfiscanf_r+0x1b4>
 8002854:	220a      	movs	r2, #10
 8002856:	e7dd      	b.n	8002814 <__ssvfiscanf_r+0x1d4>
 8002858:	2300      	movs	r3, #0
 800285a:	9342      	str	r3, [sp, #264]	; 0x108
 800285c:	2303      	movs	r3, #3
 800285e:	e7de      	b.n	800281e <__ssvfiscanf_r+0x1de>
 8002860:	2308      	movs	r3, #8
 8002862:	9342      	str	r3, [sp, #264]	; 0x108
 8002864:	2304      	movs	r3, #4
 8002866:	e7da      	b.n	800281e <__ssvfiscanf_r+0x1de>
 8002868:	4629      	mov	r1, r5
 800286a:	4640      	mov	r0, r8
 800286c:	f000 fb4a 	bl	8002f04 <__sccl>
 8002870:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002872:	4605      	mov	r5, r0
 8002874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002878:	9341      	str	r3, [sp, #260]	; 0x104
 800287a:	2301      	movs	r3, #1
 800287c:	e7cf      	b.n	800281e <__ssvfiscanf_r+0x1de>
 800287e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002884:	9341      	str	r3, [sp, #260]	; 0x104
 8002886:	2300      	movs	r3, #0
 8002888:	e7c9      	b.n	800281e <__ssvfiscanf_r+0x1de>
 800288a:	2302      	movs	r3, #2
 800288c:	e7c7      	b.n	800281e <__ssvfiscanf_r+0x1de>
 800288e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002890:	06c3      	lsls	r3, r0, #27
 8002892:	f53f aefb 	bmi.w	800268c <__ssvfiscanf_r+0x4c>
 8002896:	9b00      	ldr	r3, [sp, #0]
 8002898:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800289a:	1d19      	adds	r1, r3, #4
 800289c:	9100      	str	r1, [sp, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f010 0f01 	tst.w	r0, #1
 80028a4:	bf14      	ite	ne
 80028a6:	801a      	strhne	r2, [r3, #0]
 80028a8:	601a      	streq	r2, [r3, #0]
 80028aa:	e6ef      	b.n	800268c <__ssvfiscanf_r+0x4c>
 80028ac:	4621      	mov	r1, r4
 80028ae:	4630      	mov	r0, r6
 80028b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80028b2:	4798      	blx	r3
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d0b6      	beq.n	8002826 <__ssvfiscanf_r+0x1e6>
 80028b8:	e79c      	b.n	80027f4 <__ssvfiscanf_r+0x1b4>
 80028ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80028bc:	3201      	adds	r2, #1
 80028be:	9245      	str	r2, [sp, #276]	; 0x114
 80028c0:	6862      	ldr	r2, [r4, #4]
 80028c2:	3a01      	subs	r2, #1
 80028c4:	2a00      	cmp	r2, #0
 80028c6:	6062      	str	r2, [r4, #4]
 80028c8:	dd02      	ble.n	80028d0 <__ssvfiscanf_r+0x290>
 80028ca:	3301      	adds	r3, #1
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	e7ad      	b.n	800282c <__ssvfiscanf_r+0x1ec>
 80028d0:	4621      	mov	r1, r4
 80028d2:	4630      	mov	r0, r6
 80028d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80028d6:	4798      	blx	r3
 80028d8:	2800      	cmp	r0, #0
 80028da:	d0a7      	beq.n	800282c <__ssvfiscanf_r+0x1ec>
 80028dc:	e78a      	b.n	80027f4 <__ssvfiscanf_r+0x1b4>
 80028de:	2b04      	cmp	r3, #4
 80028e0:	dc0e      	bgt.n	8002900 <__ssvfiscanf_r+0x2c0>
 80028e2:	466b      	mov	r3, sp
 80028e4:	4622      	mov	r2, r4
 80028e6:	4630      	mov	r0, r6
 80028e8:	a941      	add	r1, sp, #260	; 0x104
 80028ea:	f000 fa13 	bl	8002d14 <_scanf_i>
 80028ee:	e7ab      	b.n	8002848 <__ssvfiscanf_r+0x208>
 80028f0:	0800258d 	.word	0x0800258d
 80028f4:	08002607 	.word	0x08002607
 80028f8:	08003581 	.word	0x08003581
 80028fc:	08003538 	.word	0x08003538
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <__ssvfiscanf_r+0x2f0>)
 8002902:	2b00      	cmp	r3, #0
 8002904:	f43f aec2 	beq.w	800268c <__ssvfiscanf_r+0x4c>
 8002908:	466b      	mov	r3, sp
 800290a:	4622      	mov	r2, r4
 800290c:	4630      	mov	r0, r6
 800290e:	a941      	add	r1, sp, #260	; 0x104
 8002910:	f3af 8000 	nop.w
 8002914:	e798      	b.n	8002848 <__ssvfiscanf_r+0x208>
 8002916:	89a3      	ldrh	r3, [r4, #12]
 8002918:	f013 0f40 	tst.w	r3, #64	; 0x40
 800291c:	bf18      	it	ne
 800291e:	f04f 30ff 	movne.w	r0, #4294967295
 8002922:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8002926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800292a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800292c:	e7f9      	b.n	8002922 <__ssvfiscanf_r+0x2e2>
 800292e:	bf00      	nop
 8002930:	00000000 	.word	0x00000000

08002934 <_printf_common>:
 8002934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	4616      	mov	r6, r2
 800293a:	4699      	mov	r9, r3
 800293c:	688a      	ldr	r2, [r1, #8]
 800293e:	690b      	ldr	r3, [r1, #16]
 8002940:	4607      	mov	r7, r0
 8002942:	4293      	cmp	r3, r2
 8002944:	bfb8      	it	lt
 8002946:	4613      	movlt	r3, r2
 8002948:	6033      	str	r3, [r6, #0]
 800294a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800294e:	460c      	mov	r4, r1
 8002950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002954:	b10a      	cbz	r2, 800295a <_printf_common+0x26>
 8002956:	3301      	adds	r3, #1
 8002958:	6033      	str	r3, [r6, #0]
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	0699      	lsls	r1, r3, #26
 800295e:	bf42      	ittt	mi
 8002960:	6833      	ldrmi	r3, [r6, #0]
 8002962:	3302      	addmi	r3, #2
 8002964:	6033      	strmi	r3, [r6, #0]
 8002966:	6825      	ldr	r5, [r4, #0]
 8002968:	f015 0506 	ands.w	r5, r5, #6
 800296c:	d106      	bne.n	800297c <_printf_common+0x48>
 800296e:	f104 0a19 	add.w	sl, r4, #25
 8002972:	68e3      	ldr	r3, [r4, #12]
 8002974:	6832      	ldr	r2, [r6, #0]
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	42ab      	cmp	r3, r5
 800297a:	dc28      	bgt.n	80029ce <_printf_common+0x9a>
 800297c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002980:	1e13      	subs	r3, r2, #0
 8002982:	6822      	ldr	r2, [r4, #0]
 8002984:	bf18      	it	ne
 8002986:	2301      	movne	r3, #1
 8002988:	0692      	lsls	r2, r2, #26
 800298a:	d42d      	bmi.n	80029e8 <_printf_common+0xb4>
 800298c:	4649      	mov	r1, r9
 800298e:	4638      	mov	r0, r7
 8002990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002994:	47c0      	blx	r8
 8002996:	3001      	adds	r0, #1
 8002998:	d020      	beq.n	80029dc <_printf_common+0xa8>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	68e5      	ldr	r5, [r4, #12]
 800299e:	f003 0306 	and.w	r3, r3, #6
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf18      	it	ne
 80029a6:	2500      	movne	r5, #0
 80029a8:	6832      	ldr	r2, [r6, #0]
 80029aa:	f04f 0600 	mov.w	r6, #0
 80029ae:	68a3      	ldr	r3, [r4, #8]
 80029b0:	bf08      	it	eq
 80029b2:	1aad      	subeq	r5, r5, r2
 80029b4:	6922      	ldr	r2, [r4, #16]
 80029b6:	bf08      	it	eq
 80029b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029bc:	4293      	cmp	r3, r2
 80029be:	bfc4      	itt	gt
 80029c0:	1a9b      	subgt	r3, r3, r2
 80029c2:	18ed      	addgt	r5, r5, r3
 80029c4:	341a      	adds	r4, #26
 80029c6:	42b5      	cmp	r5, r6
 80029c8:	d11a      	bne.n	8002a00 <_printf_common+0xcc>
 80029ca:	2000      	movs	r0, #0
 80029cc:	e008      	b.n	80029e0 <_printf_common+0xac>
 80029ce:	2301      	movs	r3, #1
 80029d0:	4652      	mov	r2, sl
 80029d2:	4649      	mov	r1, r9
 80029d4:	4638      	mov	r0, r7
 80029d6:	47c0      	blx	r8
 80029d8:	3001      	adds	r0, #1
 80029da:	d103      	bne.n	80029e4 <_printf_common+0xb0>
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e4:	3501      	adds	r5, #1
 80029e6:	e7c4      	b.n	8002972 <_printf_common+0x3e>
 80029e8:	2030      	movs	r0, #48	; 0x30
 80029ea:	18e1      	adds	r1, r4, r3
 80029ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029f6:	4422      	add	r2, r4
 80029f8:	3302      	adds	r3, #2
 80029fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029fe:	e7c5      	b.n	800298c <_printf_common+0x58>
 8002a00:	2301      	movs	r3, #1
 8002a02:	4622      	mov	r2, r4
 8002a04:	4649      	mov	r1, r9
 8002a06:	4638      	mov	r0, r7
 8002a08:	47c0      	blx	r8
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	d0e6      	beq.n	80029dc <_printf_common+0xa8>
 8002a0e:	3601      	adds	r6, #1
 8002a10:	e7d9      	b.n	80029c6 <_printf_common+0x92>
	...

08002a14 <_printf_i>:
 8002a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a18:	7e0f      	ldrb	r7, [r1, #24]
 8002a1a:	4691      	mov	r9, r2
 8002a1c:	2f78      	cmp	r7, #120	; 0x78
 8002a1e:	4680      	mov	r8, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	469a      	mov	sl, r3
 8002a24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a2a:	d807      	bhi.n	8002a3c <_printf_i+0x28>
 8002a2c:	2f62      	cmp	r7, #98	; 0x62
 8002a2e:	d80a      	bhi.n	8002a46 <_printf_i+0x32>
 8002a30:	2f00      	cmp	r7, #0
 8002a32:	f000 80d9 	beq.w	8002be8 <_printf_i+0x1d4>
 8002a36:	2f58      	cmp	r7, #88	; 0x58
 8002a38:	f000 80a4 	beq.w	8002b84 <_printf_i+0x170>
 8002a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a44:	e03a      	b.n	8002abc <_printf_i+0xa8>
 8002a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a4a:	2b15      	cmp	r3, #21
 8002a4c:	d8f6      	bhi.n	8002a3c <_printf_i+0x28>
 8002a4e:	a101      	add	r1, pc, #4	; (adr r1, 8002a54 <_printf_i+0x40>)
 8002a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a54:	08002aad 	.word	0x08002aad
 8002a58:	08002ac1 	.word	0x08002ac1
 8002a5c:	08002a3d 	.word	0x08002a3d
 8002a60:	08002a3d 	.word	0x08002a3d
 8002a64:	08002a3d 	.word	0x08002a3d
 8002a68:	08002a3d 	.word	0x08002a3d
 8002a6c:	08002ac1 	.word	0x08002ac1
 8002a70:	08002a3d 	.word	0x08002a3d
 8002a74:	08002a3d 	.word	0x08002a3d
 8002a78:	08002a3d 	.word	0x08002a3d
 8002a7c:	08002a3d 	.word	0x08002a3d
 8002a80:	08002bcf 	.word	0x08002bcf
 8002a84:	08002af1 	.word	0x08002af1
 8002a88:	08002bb1 	.word	0x08002bb1
 8002a8c:	08002a3d 	.word	0x08002a3d
 8002a90:	08002a3d 	.word	0x08002a3d
 8002a94:	08002bf1 	.word	0x08002bf1
 8002a98:	08002a3d 	.word	0x08002a3d
 8002a9c:	08002af1 	.word	0x08002af1
 8002aa0:	08002a3d 	.word	0x08002a3d
 8002aa4:	08002a3d 	.word	0x08002a3d
 8002aa8:	08002bb9 	.word	0x08002bb9
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	1d1a      	adds	r2, r3, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	602a      	str	r2, [r5, #0]
 8002ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0a4      	b.n	8002c0a <_printf_i+0x1f6>
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	6829      	ldr	r1, [r5, #0]
 8002ac4:	0606      	lsls	r6, r0, #24
 8002ac6:	f101 0304 	add.w	r3, r1, #4
 8002aca:	d50a      	bpl.n	8002ae2 <_printf_i+0xce>
 8002acc:	680e      	ldr	r6, [r1, #0]
 8002ace:	602b      	str	r3, [r5, #0]
 8002ad0:	2e00      	cmp	r6, #0
 8002ad2:	da03      	bge.n	8002adc <_printf_i+0xc8>
 8002ad4:	232d      	movs	r3, #45	; 0x2d
 8002ad6:	4276      	negs	r6, r6
 8002ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002adc:	230a      	movs	r3, #10
 8002ade:	485e      	ldr	r0, [pc, #376]	; (8002c58 <_printf_i+0x244>)
 8002ae0:	e019      	b.n	8002b16 <_printf_i+0x102>
 8002ae2:	680e      	ldr	r6, [r1, #0]
 8002ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ae8:	602b      	str	r3, [r5, #0]
 8002aea:	bf18      	it	ne
 8002aec:	b236      	sxthne	r6, r6
 8002aee:	e7ef      	b.n	8002ad0 <_printf_i+0xbc>
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	6820      	ldr	r0, [r4, #0]
 8002af4:	1d19      	adds	r1, r3, #4
 8002af6:	6029      	str	r1, [r5, #0]
 8002af8:	0601      	lsls	r1, r0, #24
 8002afa:	d501      	bpl.n	8002b00 <_printf_i+0xec>
 8002afc:	681e      	ldr	r6, [r3, #0]
 8002afe:	e002      	b.n	8002b06 <_printf_i+0xf2>
 8002b00:	0646      	lsls	r6, r0, #25
 8002b02:	d5fb      	bpl.n	8002afc <_printf_i+0xe8>
 8002b04:	881e      	ldrh	r6, [r3, #0]
 8002b06:	2f6f      	cmp	r7, #111	; 0x6f
 8002b08:	bf0c      	ite	eq
 8002b0a:	2308      	moveq	r3, #8
 8002b0c:	230a      	movne	r3, #10
 8002b0e:	4852      	ldr	r0, [pc, #328]	; (8002c58 <_printf_i+0x244>)
 8002b10:	2100      	movs	r1, #0
 8002b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b16:	6865      	ldr	r5, [r4, #4]
 8002b18:	2d00      	cmp	r5, #0
 8002b1a:	bfa8      	it	ge
 8002b1c:	6821      	ldrge	r1, [r4, #0]
 8002b1e:	60a5      	str	r5, [r4, #8]
 8002b20:	bfa4      	itt	ge
 8002b22:	f021 0104 	bicge.w	r1, r1, #4
 8002b26:	6021      	strge	r1, [r4, #0]
 8002b28:	b90e      	cbnz	r6, 8002b2e <_printf_i+0x11a>
 8002b2a:	2d00      	cmp	r5, #0
 8002b2c:	d04d      	beq.n	8002bca <_printf_i+0x1b6>
 8002b2e:	4615      	mov	r5, r2
 8002b30:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b34:	fb03 6711 	mls	r7, r3, r1, r6
 8002b38:	5dc7      	ldrb	r7, [r0, r7]
 8002b3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b3e:	4637      	mov	r7, r6
 8002b40:	42bb      	cmp	r3, r7
 8002b42:	460e      	mov	r6, r1
 8002b44:	d9f4      	bls.n	8002b30 <_printf_i+0x11c>
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d10b      	bne.n	8002b62 <_printf_i+0x14e>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	07de      	lsls	r6, r3, #31
 8002b4e:	d508      	bpl.n	8002b62 <_printf_i+0x14e>
 8002b50:	6923      	ldr	r3, [r4, #16]
 8002b52:	6861      	ldr	r1, [r4, #4]
 8002b54:	4299      	cmp	r1, r3
 8002b56:	bfde      	ittt	le
 8002b58:	2330      	movle	r3, #48	; 0x30
 8002b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b62:	1b52      	subs	r2, r2, r5
 8002b64:	6122      	str	r2, [r4, #16]
 8002b66:	464b      	mov	r3, r9
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f8cd a000 	str.w	sl, [sp]
 8002b70:	aa03      	add	r2, sp, #12
 8002b72:	f7ff fedf 	bl	8002934 <_printf_common>
 8002b76:	3001      	adds	r0, #1
 8002b78:	d14c      	bne.n	8002c14 <_printf_i+0x200>
 8002b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7e:	b004      	add	sp, #16
 8002b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b84:	4834      	ldr	r0, [pc, #208]	; (8002c58 <_printf_i+0x244>)
 8002b86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b8a:	6829      	ldr	r1, [r5, #0]
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b92:	6029      	str	r1, [r5, #0]
 8002b94:	061d      	lsls	r5, r3, #24
 8002b96:	d514      	bpl.n	8002bc2 <_printf_i+0x1ae>
 8002b98:	07df      	lsls	r7, r3, #31
 8002b9a:	bf44      	itt	mi
 8002b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8002ba0:	6023      	strmi	r3, [r4, #0]
 8002ba2:	b91e      	cbnz	r6, 8002bac <_printf_i+0x198>
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	f023 0320 	bic.w	r3, r3, #32
 8002baa:	6023      	str	r3, [r4, #0]
 8002bac:	2310      	movs	r3, #16
 8002bae:	e7af      	b.n	8002b10 <_printf_i+0xfc>
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	f043 0320 	orr.w	r3, r3, #32
 8002bb6:	6023      	str	r3, [r4, #0]
 8002bb8:	2378      	movs	r3, #120	; 0x78
 8002bba:	4828      	ldr	r0, [pc, #160]	; (8002c5c <_printf_i+0x248>)
 8002bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bc0:	e7e3      	b.n	8002b8a <_printf_i+0x176>
 8002bc2:	0659      	lsls	r1, r3, #25
 8002bc4:	bf48      	it	mi
 8002bc6:	b2b6      	uxthmi	r6, r6
 8002bc8:	e7e6      	b.n	8002b98 <_printf_i+0x184>
 8002bca:	4615      	mov	r5, r2
 8002bcc:	e7bb      	b.n	8002b46 <_printf_i+0x132>
 8002bce:	682b      	ldr	r3, [r5, #0]
 8002bd0:	6826      	ldr	r6, [r4, #0]
 8002bd2:	1d18      	adds	r0, r3, #4
 8002bd4:	6961      	ldr	r1, [r4, #20]
 8002bd6:	6028      	str	r0, [r5, #0]
 8002bd8:	0635      	lsls	r5, r6, #24
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	d501      	bpl.n	8002be2 <_printf_i+0x1ce>
 8002bde:	6019      	str	r1, [r3, #0]
 8002be0:	e002      	b.n	8002be8 <_printf_i+0x1d4>
 8002be2:	0670      	lsls	r0, r6, #25
 8002be4:	d5fb      	bpl.n	8002bde <_printf_i+0x1ca>
 8002be6:	8019      	strh	r1, [r3, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	4615      	mov	r5, r2
 8002bec:	6123      	str	r3, [r4, #16]
 8002bee:	e7ba      	b.n	8002b66 <_printf_i+0x152>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	1d1a      	adds	r2, r3, #4
 8002bf6:	602a      	str	r2, [r5, #0]
 8002bf8:	681d      	ldr	r5, [r3, #0]
 8002bfa:	6862      	ldr	r2, [r4, #4]
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f000 fae5 	bl	80031cc <memchr>
 8002c02:	b108      	cbz	r0, 8002c08 <_printf_i+0x1f4>
 8002c04:	1b40      	subs	r0, r0, r5
 8002c06:	6060      	str	r0, [r4, #4]
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	6123      	str	r3, [r4, #16]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c12:	e7a8      	b.n	8002b66 <_printf_i+0x152>
 8002c14:	462a      	mov	r2, r5
 8002c16:	4649      	mov	r1, r9
 8002c18:	4640      	mov	r0, r8
 8002c1a:	6923      	ldr	r3, [r4, #16]
 8002c1c:	47d0      	blx	sl
 8002c1e:	3001      	adds	r0, #1
 8002c20:	d0ab      	beq.n	8002b7a <_printf_i+0x166>
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	079b      	lsls	r3, r3, #30
 8002c26:	d413      	bmi.n	8002c50 <_printf_i+0x23c>
 8002c28:	68e0      	ldr	r0, [r4, #12]
 8002c2a:	9b03      	ldr	r3, [sp, #12]
 8002c2c:	4298      	cmp	r0, r3
 8002c2e:	bfb8      	it	lt
 8002c30:	4618      	movlt	r0, r3
 8002c32:	e7a4      	b.n	8002b7e <_printf_i+0x16a>
 8002c34:	2301      	movs	r3, #1
 8002c36:	4632      	mov	r2, r6
 8002c38:	4649      	mov	r1, r9
 8002c3a:	4640      	mov	r0, r8
 8002c3c:	47d0      	blx	sl
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d09b      	beq.n	8002b7a <_printf_i+0x166>
 8002c42:	3501      	adds	r5, #1
 8002c44:	68e3      	ldr	r3, [r4, #12]
 8002c46:	9903      	ldr	r1, [sp, #12]
 8002c48:	1a5b      	subs	r3, r3, r1
 8002c4a:	42ab      	cmp	r3, r5
 8002c4c:	dcf2      	bgt.n	8002c34 <_printf_i+0x220>
 8002c4e:	e7eb      	b.n	8002c28 <_printf_i+0x214>
 8002c50:	2500      	movs	r5, #0
 8002c52:	f104 0619 	add.w	r6, r4, #25
 8002c56:	e7f5      	b.n	8002c44 <_printf_i+0x230>
 8002c58:	08003543 	.word	0x08003543
 8002c5c:	08003554 	.word	0x08003554

08002c60 <_scanf_chars>:
 8002c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c64:	4615      	mov	r5, r2
 8002c66:	688a      	ldr	r2, [r1, #8]
 8002c68:	4680      	mov	r8, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	b932      	cbnz	r2, 8002c7c <_scanf_chars+0x1c>
 8002c6e:	698a      	ldr	r2, [r1, #24]
 8002c70:	2a00      	cmp	r2, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2201      	moveq	r2, #1
 8002c76:	f04f 32ff 	movne.w	r2, #4294967295
 8002c7a:	608a      	str	r2, [r1, #8]
 8002c7c:	2700      	movs	r7, #0
 8002c7e:	6822      	ldr	r2, [r4, #0]
 8002c80:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002d10 <_scanf_chars+0xb0>
 8002c84:	06d1      	lsls	r1, r2, #27
 8002c86:	bf5f      	itttt	pl
 8002c88:	681a      	ldrpl	r2, [r3, #0]
 8002c8a:	1d11      	addpl	r1, r2, #4
 8002c8c:	6019      	strpl	r1, [r3, #0]
 8002c8e:	6816      	ldrpl	r6, [r2, #0]
 8002c90:	69a0      	ldr	r0, [r4, #24]
 8002c92:	b188      	cbz	r0, 8002cb8 <_scanf_chars+0x58>
 8002c94:	2801      	cmp	r0, #1
 8002c96:	d107      	bne.n	8002ca8 <_scanf_chars+0x48>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	6963      	ldr	r3, [r4, #20]
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	b953      	cbnz	r3, 8002cb8 <_scanf_chars+0x58>
 8002ca2:	2f00      	cmp	r7, #0
 8002ca4:	d031      	beq.n	8002d0a <_scanf_chars+0xaa>
 8002ca6:	e022      	b.n	8002cee <_scanf_chars+0x8e>
 8002ca8:	2802      	cmp	r0, #2
 8002caa:	d120      	bne.n	8002cee <_scanf_chars+0x8e>
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	d41a      	bmi.n	8002cee <_scanf_chars+0x8e>
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	3701      	adds	r7, #1
 8002cbc:	06da      	lsls	r2, r3, #27
 8002cbe:	bf5e      	ittt	pl
 8002cc0:	682b      	ldrpl	r3, [r5, #0]
 8002cc2:	781b      	ldrbpl	r3, [r3, #0]
 8002cc4:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002cc8:	682a      	ldr	r2, [r5, #0]
 8002cca:	686b      	ldr	r3, [r5, #4]
 8002ccc:	3201      	adds	r2, #1
 8002cce:	602a      	str	r2, [r5, #0]
 8002cd0:	68a2      	ldr	r2, [r4, #8]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	606b      	str	r3, [r5, #4]
 8002cd8:	60a2      	str	r2, [r4, #8]
 8002cda:	b142      	cbz	r2, 8002cee <_scanf_chars+0x8e>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	dcd7      	bgt.n	8002c90 <_scanf_chars+0x30>
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002ce8:	4798      	blx	r3
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d0d0      	beq.n	8002c90 <_scanf_chars+0x30>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	f013 0310 	ands.w	r3, r3, #16
 8002cf4:	d105      	bne.n	8002d02 <_scanf_chars+0xa2>
 8002cf6:	68e2      	ldr	r2, [r4, #12]
 8002cf8:	3201      	adds	r2, #1
 8002cfa:	60e2      	str	r2, [r4, #12]
 8002cfc:	69a2      	ldr	r2, [r4, #24]
 8002cfe:	b102      	cbz	r2, 8002d02 <_scanf_chars+0xa2>
 8002d00:	7033      	strb	r3, [r6, #0]
 8002d02:	2000      	movs	r0, #0
 8002d04:	6923      	ldr	r3, [r4, #16]
 8002d06:	443b      	add	r3, r7
 8002d08:	6123      	str	r3, [r4, #16]
 8002d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d0e:	bf00      	nop
 8002d10:	08003581 	.word	0x08003581

08002d14 <_scanf_i>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	460c      	mov	r4, r1
 8002d1a:	4698      	mov	r8, r3
 8002d1c:	4b75      	ldr	r3, [pc, #468]	; (8002ef4 <_scanf_i+0x1e0>)
 8002d1e:	b087      	sub	sp, #28
 8002d20:	4682      	mov	sl, r0
 8002d22:	4616      	mov	r6, r2
 8002d24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d28:	ab03      	add	r3, sp, #12
 8002d2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d2e:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <_scanf_i+0x1e4>)
 8002d30:	69a1      	ldr	r1, [r4, #24]
 8002d32:	4a72      	ldr	r2, [pc, #456]	; (8002efc <_scanf_i+0x1e8>)
 8002d34:	4627      	mov	r7, r4
 8002d36:	2903      	cmp	r1, #3
 8002d38:	bf18      	it	ne
 8002d3a:	461a      	movne	r2, r3
 8002d3c:	68a3      	ldr	r3, [r4, #8]
 8002d3e:	9201      	str	r2, [sp, #4]
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002d46:	bf81      	itttt	hi
 8002d48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002d4c:	eb03 0905 	addhi.w	r9, r3, r5
 8002d50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002d54:	60a3      	strhi	r3, [r4, #8]
 8002d56:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002d5a:	bf98      	it	ls
 8002d5c:	f04f 0900 	movls.w	r9, #0
 8002d60:	463d      	mov	r5, r7
 8002d62:	f04f 0b00 	mov.w	fp, #0
 8002d66:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002d6a:	6023      	str	r3, [r4, #0]
 8002d6c:	6831      	ldr	r1, [r6, #0]
 8002d6e:	ab03      	add	r3, sp, #12
 8002d70:	2202      	movs	r2, #2
 8002d72:	7809      	ldrb	r1, [r1, #0]
 8002d74:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002d78:	f000 fa28 	bl	80031cc <memchr>
 8002d7c:	b328      	cbz	r0, 8002dca <_scanf_i+0xb6>
 8002d7e:	f1bb 0f01 	cmp.w	fp, #1
 8002d82:	d159      	bne.n	8002e38 <_scanf_i+0x124>
 8002d84:	6862      	ldr	r2, [r4, #4]
 8002d86:	b92a      	cbnz	r2, 8002d94 <_scanf_i+0x80>
 8002d88:	2308      	movs	r3, #8
 8002d8a:	6822      	ldr	r2, [r4, #0]
 8002d8c:	6063      	str	r3, [r4, #4]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	6022      	str	r2, [r4, #0]
 8002d94:	6822      	ldr	r2, [r4, #0]
 8002d96:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002d9a:	6022      	str	r2, [r4, #0]
 8002d9c:	68a2      	ldr	r2, [r4, #8]
 8002d9e:	1e51      	subs	r1, r2, #1
 8002da0:	60a1      	str	r1, [r4, #8]
 8002da2:	b192      	cbz	r2, 8002dca <_scanf_i+0xb6>
 8002da4:	6832      	ldr	r2, [r6, #0]
 8002da6:	1c51      	adds	r1, r2, #1
 8002da8:	6031      	str	r1, [r6, #0]
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	f805 2b01 	strb.w	r2, [r5], #1
 8002db0:	6872      	ldr	r2, [r6, #4]
 8002db2:	3a01      	subs	r2, #1
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	6072      	str	r2, [r6, #4]
 8002db8:	dc07      	bgt.n	8002dca <_scanf_i+0xb6>
 8002dba:	4631      	mov	r1, r6
 8002dbc:	4650      	mov	r0, sl
 8002dbe:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8002dc2:	4790      	blx	r2
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f040 8085 	bne.w	8002ed4 <_scanf_i+0x1c0>
 8002dca:	f10b 0b01 	add.w	fp, fp, #1
 8002dce:	f1bb 0f03 	cmp.w	fp, #3
 8002dd2:	d1cb      	bne.n	8002d6c <_scanf_i+0x58>
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	b90b      	cbnz	r3, 8002ddc <_scanf_i+0xc8>
 8002dd8:	230a      	movs	r3, #10
 8002dda:	6063      	str	r3, [r4, #4]
 8002ddc:	6863      	ldr	r3, [r4, #4]
 8002dde:	4948      	ldr	r1, [pc, #288]	; (8002f00 <_scanf_i+0x1ec>)
 8002de0:	6960      	ldr	r0, [r4, #20]
 8002de2:	1ac9      	subs	r1, r1, r3
 8002de4:	f000 f88e 	bl	8002f04 <__sccl>
 8002de8:	f04f 0b00 	mov.w	fp, #0
 8002dec:	68a3      	ldr	r3, [r4, #8]
 8002dee:	6822      	ldr	r2, [r4, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d03d      	beq.n	8002e70 <_scanf_i+0x15c>
 8002df4:	6831      	ldr	r1, [r6, #0]
 8002df6:	6960      	ldr	r0, [r4, #20]
 8002df8:	f891 c000 	ldrb.w	ip, [r1]
 8002dfc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d035      	beq.n	8002e70 <_scanf_i+0x15c>
 8002e04:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8002e08:	d124      	bne.n	8002e54 <_scanf_i+0x140>
 8002e0a:	0510      	lsls	r0, r2, #20
 8002e0c:	d522      	bpl.n	8002e54 <_scanf_i+0x140>
 8002e0e:	f10b 0b01 	add.w	fp, fp, #1
 8002e12:	f1b9 0f00 	cmp.w	r9, #0
 8002e16:	d003      	beq.n	8002e20 <_scanf_i+0x10c>
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8002e1e:	60a3      	str	r3, [r4, #8]
 8002e20:	6873      	ldr	r3, [r6, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	6073      	str	r3, [r6, #4]
 8002e28:	dd1b      	ble.n	8002e62 <_scanf_i+0x14e>
 8002e2a:	6833      	ldr	r3, [r6, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	6033      	str	r3, [r6, #0]
 8002e30:	68a3      	ldr	r3, [r4, #8]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	60a3      	str	r3, [r4, #8]
 8002e36:	e7d9      	b.n	8002dec <_scanf_i+0xd8>
 8002e38:	f1bb 0f02 	cmp.w	fp, #2
 8002e3c:	d1ae      	bne.n	8002d9c <_scanf_i+0x88>
 8002e3e:	6822      	ldr	r2, [r4, #0]
 8002e40:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8002e44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002e48:	d1bf      	bne.n	8002dca <_scanf_i+0xb6>
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e50:	6063      	str	r3, [r4, #4]
 8002e52:	e7a2      	b.n	8002d9a <_scanf_i+0x86>
 8002e54:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002e58:	6022      	str	r2, [r4, #0]
 8002e5a:	780b      	ldrb	r3, [r1, #0]
 8002e5c:	f805 3b01 	strb.w	r3, [r5], #1
 8002e60:	e7de      	b.n	8002e20 <_scanf_i+0x10c>
 8002e62:	4631      	mov	r1, r6
 8002e64:	4650      	mov	r0, sl
 8002e66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002e6a:	4798      	blx	r3
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d0df      	beq.n	8002e30 <_scanf_i+0x11c>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	05db      	lsls	r3, r3, #23
 8002e74:	d50d      	bpl.n	8002e92 <_scanf_i+0x17e>
 8002e76:	42bd      	cmp	r5, r7
 8002e78:	d909      	bls.n	8002e8e <_scanf_i+0x17a>
 8002e7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002e7e:	4632      	mov	r2, r6
 8002e80:	4650      	mov	r0, sl
 8002e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e86:	f105 39ff 	add.w	r9, r5, #4294967295
 8002e8a:	4798      	blx	r3
 8002e8c:	464d      	mov	r5, r9
 8002e8e:	42bd      	cmp	r5, r7
 8002e90:	d02d      	beq.n	8002eee <_scanf_i+0x1da>
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	f012 0210 	ands.w	r2, r2, #16
 8002e98:	d113      	bne.n	8002ec2 <_scanf_i+0x1ae>
 8002e9a:	702a      	strb	r2, [r5, #0]
 8002e9c:	4639      	mov	r1, r7
 8002e9e:	6863      	ldr	r3, [r4, #4]
 8002ea0:	4650      	mov	r0, sl
 8002ea2:	9e01      	ldr	r6, [sp, #4]
 8002ea4:	47b0      	blx	r6
 8002ea6:	6821      	ldr	r1, [r4, #0]
 8002ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8002eac:	f011 0f20 	tst.w	r1, #32
 8002eb0:	d013      	beq.n	8002eda <_scanf_i+0x1c6>
 8002eb2:	1d1a      	adds	r2, r3, #4
 8002eb4:	f8c8 2000 	str.w	r2, [r8]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6018      	str	r0, [r3, #0]
 8002ebc:	68e3      	ldr	r3, [r4, #12]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60e3      	str	r3, [r4, #12]
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	1bed      	subs	r5, r5, r7
 8002ec6:	44ab      	add	fp, r5
 8002ec8:	6925      	ldr	r5, [r4, #16]
 8002eca:	445d      	add	r5, fp
 8002ecc:	6125      	str	r5, [r4, #16]
 8002ece:	b007      	add	sp, #28
 8002ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed4:	f04f 0b00 	mov.w	fp, #0
 8002ed8:	e7ca      	b.n	8002e70 <_scanf_i+0x15c>
 8002eda:	1d1a      	adds	r2, r3, #4
 8002edc:	f8c8 2000 	str.w	r2, [r8]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f011 0f01 	tst.w	r1, #1
 8002ee6:	bf14      	ite	ne
 8002ee8:	8018      	strhne	r0, [r3, #0]
 8002eea:	6018      	streq	r0, [r3, #0]
 8002eec:	e7e6      	b.n	8002ebc <_scanf_i+0x1a8>
 8002eee:	2001      	movs	r0, #1
 8002ef0:	e7ed      	b.n	8002ece <_scanf_i+0x1ba>
 8002ef2:	bf00      	nop
 8002ef4:	080034b0 	.word	0x080034b0
 8002ef8:	08003155 	.word	0x08003155
 8002efc:	0800306d 	.word	0x0800306d
 8002f00:	0800357e 	.word	0x0800357e

08002f04 <__sccl>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	780b      	ldrb	r3, [r1, #0]
 8002f08:	4604      	mov	r4, r0
 8002f0a:	2b5e      	cmp	r3, #94	; 0x5e
 8002f0c:	bf13      	iteet	ne
 8002f0e:	2200      	movne	r2, #0
 8002f10:	2201      	moveq	r2, #1
 8002f12:	784b      	ldrbeq	r3, [r1, #1]
 8002f14:	1c48      	addne	r0, r1, #1
 8002f16:	bf08      	it	eq
 8002f18:	1c88      	addeq	r0, r1, #2
 8002f1a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8002f1e:	1e61      	subs	r1, r4, #1
 8002f20:	f801 2f01 	strb.w	r2, [r1, #1]!
 8002f24:	42a9      	cmp	r1, r5
 8002f26:	d1fb      	bne.n	8002f20 <__sccl+0x1c>
 8002f28:	b90b      	cbnz	r3, 8002f2e <__sccl+0x2a>
 8002f2a:	3801      	subs	r0, #1
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	f082 0201 	eor.w	r2, r2, #1
 8002f32:	4605      	mov	r5, r0
 8002f34:	54e2      	strb	r2, [r4, r3]
 8002f36:	4628      	mov	r0, r5
 8002f38:	f810 1b01 	ldrb.w	r1, [r0], #1
 8002f3c:	292d      	cmp	r1, #45	; 0x2d
 8002f3e:	d006      	beq.n	8002f4e <__sccl+0x4a>
 8002f40:	295d      	cmp	r1, #93	; 0x5d
 8002f42:	d0f3      	beq.n	8002f2c <__sccl+0x28>
 8002f44:	b909      	cbnz	r1, 8002f4a <__sccl+0x46>
 8002f46:	4628      	mov	r0, r5
 8002f48:	e7f0      	b.n	8002f2c <__sccl+0x28>
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	e7f1      	b.n	8002f32 <__sccl+0x2e>
 8002f4e:	786e      	ldrb	r6, [r5, #1]
 8002f50:	2e5d      	cmp	r6, #93	; 0x5d
 8002f52:	d0fa      	beq.n	8002f4a <__sccl+0x46>
 8002f54:	42b3      	cmp	r3, r6
 8002f56:	dcf8      	bgt.n	8002f4a <__sccl+0x46>
 8002f58:	4619      	mov	r1, r3
 8002f5a:	3502      	adds	r5, #2
 8002f5c:	3101      	adds	r1, #1
 8002f5e:	428e      	cmp	r6, r1
 8002f60:	5462      	strb	r2, [r4, r1]
 8002f62:	dcfb      	bgt.n	8002f5c <__sccl+0x58>
 8002f64:	1af1      	subs	r1, r6, r3
 8002f66:	3901      	subs	r1, #1
 8002f68:	42b3      	cmp	r3, r6
 8002f6a:	bfa8      	it	ge
 8002f6c:	2100      	movge	r1, #0
 8002f6e:	1c58      	adds	r0, r3, #1
 8002f70:	1843      	adds	r3, r0, r1
 8002f72:	e7e0      	b.n	8002f36 <__sccl+0x32>

08002f74 <_strtol_l.constprop.0>:
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f7a:	4680      	mov	r8, r0
 8002f7c:	d001      	beq.n	8002f82 <_strtol_l.constprop.0+0xe>
 8002f7e:	2b24      	cmp	r3, #36	; 0x24
 8002f80:	d906      	bls.n	8002f90 <_strtol_l.constprop.0+0x1c>
 8002f82:	f7ff f929 	bl	80021d8 <__errno>
 8002f86:	2316      	movs	r3, #22
 8002f88:	6003      	str	r3, [r0, #0]
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f90:	460d      	mov	r5, r1
 8002f92:	4f35      	ldr	r7, [pc, #212]	; (8003068 <_strtol_l.constprop.0+0xf4>)
 8002f94:	4628      	mov	r0, r5
 8002f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f9a:	5de6      	ldrb	r6, [r4, r7]
 8002f9c:	f016 0608 	ands.w	r6, r6, #8
 8002fa0:	d1f8      	bne.n	8002f94 <_strtol_l.constprop.0+0x20>
 8002fa2:	2c2d      	cmp	r4, #45	; 0x2d
 8002fa4:	d12f      	bne.n	8003006 <_strtol_l.constprop.0+0x92>
 8002fa6:	2601      	movs	r6, #1
 8002fa8:	782c      	ldrb	r4, [r5, #0]
 8002faa:	1c85      	adds	r5, r0, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d057      	beq.n	8003060 <_strtol_l.constprop.0+0xec>
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d109      	bne.n	8002fc8 <_strtol_l.constprop.0+0x54>
 8002fb4:	2c30      	cmp	r4, #48	; 0x30
 8002fb6:	d107      	bne.n	8002fc8 <_strtol_l.constprop.0+0x54>
 8002fb8:	7828      	ldrb	r0, [r5, #0]
 8002fba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002fbe:	2858      	cmp	r0, #88	; 0x58
 8002fc0:	d149      	bne.n	8003056 <_strtol_l.constprop.0+0xe2>
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	786c      	ldrb	r4, [r5, #1]
 8002fc6:	3502      	adds	r5, #2
 8002fc8:	2700      	movs	r7, #0
 8002fca:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002fce:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002fd2:	fbbe f9f3 	udiv	r9, lr, r3
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	fb03 ea19 	mls	sl, r3, r9, lr
 8002fdc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002fe0:	f1bc 0f09 	cmp.w	ip, #9
 8002fe4:	d814      	bhi.n	8003010 <_strtol_l.constprop.0+0x9c>
 8002fe6:	4664      	mov	r4, ip
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	dd22      	ble.n	8003032 <_strtol_l.constprop.0+0xbe>
 8002fec:	2f00      	cmp	r7, #0
 8002fee:	db1d      	blt.n	800302c <_strtol_l.constprop.0+0xb8>
 8002ff0:	4581      	cmp	r9, r0
 8002ff2:	d31b      	bcc.n	800302c <_strtol_l.constprop.0+0xb8>
 8002ff4:	d101      	bne.n	8002ffa <_strtol_l.constprop.0+0x86>
 8002ff6:	45a2      	cmp	sl, r4
 8002ff8:	db18      	blt.n	800302c <_strtol_l.constprop.0+0xb8>
 8002ffa:	2701      	movs	r7, #1
 8002ffc:	fb00 4003 	mla	r0, r0, r3, r4
 8003000:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003004:	e7ea      	b.n	8002fdc <_strtol_l.constprop.0+0x68>
 8003006:	2c2b      	cmp	r4, #43	; 0x2b
 8003008:	bf04      	itt	eq
 800300a:	782c      	ldrbeq	r4, [r5, #0]
 800300c:	1c85      	addeq	r5, r0, #2
 800300e:	e7cd      	b.n	8002fac <_strtol_l.constprop.0+0x38>
 8003010:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003014:	f1bc 0f19 	cmp.w	ip, #25
 8003018:	d801      	bhi.n	800301e <_strtol_l.constprop.0+0xaa>
 800301a:	3c37      	subs	r4, #55	; 0x37
 800301c:	e7e4      	b.n	8002fe8 <_strtol_l.constprop.0+0x74>
 800301e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003022:	f1bc 0f19 	cmp.w	ip, #25
 8003026:	d804      	bhi.n	8003032 <_strtol_l.constprop.0+0xbe>
 8003028:	3c57      	subs	r4, #87	; 0x57
 800302a:	e7dd      	b.n	8002fe8 <_strtol_l.constprop.0+0x74>
 800302c:	f04f 37ff 	mov.w	r7, #4294967295
 8003030:	e7e6      	b.n	8003000 <_strtol_l.constprop.0+0x8c>
 8003032:	2f00      	cmp	r7, #0
 8003034:	da07      	bge.n	8003046 <_strtol_l.constprop.0+0xd2>
 8003036:	2322      	movs	r3, #34	; 0x22
 8003038:	4670      	mov	r0, lr
 800303a:	f8c8 3000 	str.w	r3, [r8]
 800303e:	2a00      	cmp	r2, #0
 8003040:	d0a4      	beq.n	8002f8c <_strtol_l.constprop.0+0x18>
 8003042:	1e69      	subs	r1, r5, #1
 8003044:	e005      	b.n	8003052 <_strtol_l.constprop.0+0xde>
 8003046:	b106      	cbz	r6, 800304a <_strtol_l.constprop.0+0xd6>
 8003048:	4240      	negs	r0, r0
 800304a:	2a00      	cmp	r2, #0
 800304c:	d09e      	beq.n	8002f8c <_strtol_l.constprop.0+0x18>
 800304e:	2f00      	cmp	r7, #0
 8003050:	d1f7      	bne.n	8003042 <_strtol_l.constprop.0+0xce>
 8003052:	6011      	str	r1, [r2, #0]
 8003054:	e79a      	b.n	8002f8c <_strtol_l.constprop.0+0x18>
 8003056:	2430      	movs	r4, #48	; 0x30
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1b5      	bne.n	8002fc8 <_strtol_l.constprop.0+0x54>
 800305c:	2308      	movs	r3, #8
 800305e:	e7b3      	b.n	8002fc8 <_strtol_l.constprop.0+0x54>
 8003060:	2c30      	cmp	r4, #48	; 0x30
 8003062:	d0a9      	beq.n	8002fb8 <_strtol_l.constprop.0+0x44>
 8003064:	230a      	movs	r3, #10
 8003066:	e7af      	b.n	8002fc8 <_strtol_l.constprop.0+0x54>
 8003068:	08003581 	.word	0x08003581

0800306c <_strtol_r>:
 800306c:	f7ff bf82 	b.w	8002f74 <_strtol_l.constprop.0>

08003070 <_strtoul_l.constprop.0>:
 8003070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003074:	4686      	mov	lr, r0
 8003076:	460d      	mov	r5, r1
 8003078:	4f35      	ldr	r7, [pc, #212]	; (8003150 <_strtoul_l.constprop.0+0xe0>)
 800307a:	4628      	mov	r0, r5
 800307c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003080:	5de6      	ldrb	r6, [r4, r7]
 8003082:	f016 0608 	ands.w	r6, r6, #8
 8003086:	d1f8      	bne.n	800307a <_strtoul_l.constprop.0+0xa>
 8003088:	2c2d      	cmp	r4, #45	; 0x2d
 800308a:	d12f      	bne.n	80030ec <_strtoul_l.constprop.0+0x7c>
 800308c:	2601      	movs	r6, #1
 800308e:	782c      	ldrb	r4, [r5, #0]
 8003090:	1c85      	adds	r5, r0, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d057      	beq.n	8003146 <_strtoul_l.constprop.0+0xd6>
 8003096:	2b10      	cmp	r3, #16
 8003098:	d109      	bne.n	80030ae <_strtoul_l.constprop.0+0x3e>
 800309a:	2c30      	cmp	r4, #48	; 0x30
 800309c:	d107      	bne.n	80030ae <_strtoul_l.constprop.0+0x3e>
 800309e:	7828      	ldrb	r0, [r5, #0]
 80030a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80030a4:	2858      	cmp	r0, #88	; 0x58
 80030a6:	d149      	bne.n	800313c <_strtoul_l.constprop.0+0xcc>
 80030a8:	2310      	movs	r3, #16
 80030aa:	786c      	ldrb	r4, [r5, #1]
 80030ac:	3502      	adds	r5, #2
 80030ae:	f04f 38ff 	mov.w	r8, #4294967295
 80030b2:	fbb8 f8f3 	udiv	r8, r8, r3
 80030b6:	2700      	movs	r7, #0
 80030b8:	fb03 f908 	mul.w	r9, r3, r8
 80030bc:	4638      	mov	r0, r7
 80030be:	ea6f 0909 	mvn.w	r9, r9
 80030c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80030c6:	f1bc 0f09 	cmp.w	ip, #9
 80030ca:	d814      	bhi.n	80030f6 <_strtoul_l.constprop.0+0x86>
 80030cc:	4664      	mov	r4, ip
 80030ce:	42a3      	cmp	r3, r4
 80030d0:	dd22      	ble.n	8003118 <_strtoul_l.constprop.0+0xa8>
 80030d2:	2f00      	cmp	r7, #0
 80030d4:	db1d      	blt.n	8003112 <_strtoul_l.constprop.0+0xa2>
 80030d6:	4580      	cmp	r8, r0
 80030d8:	d31b      	bcc.n	8003112 <_strtoul_l.constprop.0+0xa2>
 80030da:	d101      	bne.n	80030e0 <_strtoul_l.constprop.0+0x70>
 80030dc:	45a1      	cmp	r9, r4
 80030de:	db18      	blt.n	8003112 <_strtoul_l.constprop.0+0xa2>
 80030e0:	2701      	movs	r7, #1
 80030e2:	fb00 4003 	mla	r0, r0, r3, r4
 80030e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80030ea:	e7ea      	b.n	80030c2 <_strtoul_l.constprop.0+0x52>
 80030ec:	2c2b      	cmp	r4, #43	; 0x2b
 80030ee:	bf04      	itt	eq
 80030f0:	782c      	ldrbeq	r4, [r5, #0]
 80030f2:	1c85      	addeq	r5, r0, #2
 80030f4:	e7cd      	b.n	8003092 <_strtoul_l.constprop.0+0x22>
 80030f6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80030fa:	f1bc 0f19 	cmp.w	ip, #25
 80030fe:	d801      	bhi.n	8003104 <_strtoul_l.constprop.0+0x94>
 8003100:	3c37      	subs	r4, #55	; 0x37
 8003102:	e7e4      	b.n	80030ce <_strtoul_l.constprop.0+0x5e>
 8003104:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003108:	f1bc 0f19 	cmp.w	ip, #25
 800310c:	d804      	bhi.n	8003118 <_strtoul_l.constprop.0+0xa8>
 800310e:	3c57      	subs	r4, #87	; 0x57
 8003110:	e7dd      	b.n	80030ce <_strtoul_l.constprop.0+0x5e>
 8003112:	f04f 37ff 	mov.w	r7, #4294967295
 8003116:	e7e6      	b.n	80030e6 <_strtoul_l.constprop.0+0x76>
 8003118:	2f00      	cmp	r7, #0
 800311a:	da07      	bge.n	800312c <_strtoul_l.constprop.0+0xbc>
 800311c:	2322      	movs	r3, #34	; 0x22
 800311e:	f04f 30ff 	mov.w	r0, #4294967295
 8003122:	f8ce 3000 	str.w	r3, [lr]
 8003126:	b932      	cbnz	r2, 8003136 <_strtoul_l.constprop.0+0xc6>
 8003128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800312c:	b106      	cbz	r6, 8003130 <_strtoul_l.constprop.0+0xc0>
 800312e:	4240      	negs	r0, r0
 8003130:	2a00      	cmp	r2, #0
 8003132:	d0f9      	beq.n	8003128 <_strtoul_l.constprop.0+0xb8>
 8003134:	b107      	cbz	r7, 8003138 <_strtoul_l.constprop.0+0xc8>
 8003136:	1e69      	subs	r1, r5, #1
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	e7f5      	b.n	8003128 <_strtoul_l.constprop.0+0xb8>
 800313c:	2430      	movs	r4, #48	; 0x30
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1b5      	bne.n	80030ae <_strtoul_l.constprop.0+0x3e>
 8003142:	2308      	movs	r3, #8
 8003144:	e7b3      	b.n	80030ae <_strtoul_l.constprop.0+0x3e>
 8003146:	2c30      	cmp	r4, #48	; 0x30
 8003148:	d0a9      	beq.n	800309e <_strtoul_l.constprop.0+0x2e>
 800314a:	230a      	movs	r3, #10
 800314c:	e7af      	b.n	80030ae <_strtoul_l.constprop.0+0x3e>
 800314e:	bf00      	nop
 8003150:	08003581 	.word	0x08003581

08003154 <_strtoul_r>:
 8003154:	f7ff bf8c 	b.w	8003070 <_strtoul_l.constprop.0>

08003158 <__submore>:
 8003158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315c:	460c      	mov	r4, r1
 800315e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003164:	4299      	cmp	r1, r3
 8003166:	d11b      	bne.n	80031a0 <__submore+0x48>
 8003168:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800316c:	f000 f8cc 	bl	8003308 <_malloc_r>
 8003170:	b918      	cbnz	r0, 800317a <__submore+0x22>
 8003172:	f04f 30ff 	mov.w	r0, #4294967295
 8003176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800317a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003180:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003184:	6360      	str	r0, [r4, #52]	; 0x34
 8003186:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800318a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800318e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003192:	7043      	strb	r3, [r0, #1]
 8003194:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003198:	7003      	strb	r3, [r0, #0]
 800319a:	6020      	str	r0, [r4, #0]
 800319c:	2000      	movs	r0, #0
 800319e:	e7ea      	b.n	8003176 <__submore+0x1e>
 80031a0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80031a2:	0077      	lsls	r7, r6, #1
 80031a4:	463a      	mov	r2, r7
 80031a6:	f000 f923 	bl	80033f0 <_realloc_r>
 80031aa:	4605      	mov	r5, r0
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d0e0      	beq.n	8003172 <__submore+0x1a>
 80031b0:	eb00 0806 	add.w	r8, r0, r6
 80031b4:	4601      	mov	r1, r0
 80031b6:	4632      	mov	r2, r6
 80031b8:	4640      	mov	r0, r8
 80031ba:	f000 f815 	bl	80031e8 <memcpy>
 80031be:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80031c2:	f8c4 8000 	str.w	r8, [r4]
 80031c6:	e7e9      	b.n	800319c <__submore+0x44>

080031c8 <__retarget_lock_acquire_recursive>:
 80031c8:	4770      	bx	lr

080031ca <__retarget_lock_release_recursive>:
 80031ca:	4770      	bx	lr

080031cc <memchr>:
 80031cc:	4603      	mov	r3, r0
 80031ce:	b510      	push	{r4, lr}
 80031d0:	b2c9      	uxtb	r1, r1
 80031d2:	4402      	add	r2, r0
 80031d4:	4293      	cmp	r3, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	d101      	bne.n	80031de <memchr+0x12>
 80031da:	2000      	movs	r0, #0
 80031dc:	e003      	b.n	80031e6 <memchr+0x1a>
 80031de:	7804      	ldrb	r4, [r0, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	428c      	cmp	r4, r1
 80031e4:	d1f6      	bne.n	80031d4 <memchr+0x8>
 80031e6:	bd10      	pop	{r4, pc}

080031e8 <memcpy>:
 80031e8:	440a      	add	r2, r1
 80031ea:	4291      	cmp	r1, r2
 80031ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80031f0:	d100      	bne.n	80031f4 <memcpy+0xc>
 80031f2:	4770      	bx	lr
 80031f4:	b510      	push	{r4, lr}
 80031f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031fa:	4291      	cmp	r1, r2
 80031fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003200:	d1f9      	bne.n	80031f6 <memcpy+0xe>
 8003202:	bd10      	pop	{r4, pc}

08003204 <memmove>:
 8003204:	4288      	cmp	r0, r1
 8003206:	b510      	push	{r4, lr}
 8003208:	eb01 0402 	add.w	r4, r1, r2
 800320c:	d902      	bls.n	8003214 <memmove+0x10>
 800320e:	4284      	cmp	r4, r0
 8003210:	4623      	mov	r3, r4
 8003212:	d807      	bhi.n	8003224 <memmove+0x20>
 8003214:	1e43      	subs	r3, r0, #1
 8003216:	42a1      	cmp	r1, r4
 8003218:	d008      	beq.n	800322c <memmove+0x28>
 800321a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800321e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003222:	e7f8      	b.n	8003216 <memmove+0x12>
 8003224:	4601      	mov	r1, r0
 8003226:	4402      	add	r2, r0
 8003228:	428a      	cmp	r2, r1
 800322a:	d100      	bne.n	800322e <memmove+0x2a>
 800322c:	bd10      	pop	{r4, pc}
 800322e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003236:	e7f7      	b.n	8003228 <memmove+0x24>

08003238 <_free_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4605      	mov	r5, r0
 800323c:	2900      	cmp	r1, #0
 800323e:	d040      	beq.n	80032c2 <_free_r+0x8a>
 8003240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003244:	1f0c      	subs	r4, r1, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	bfb8      	it	lt
 800324a:	18e4      	addlt	r4, r4, r3
 800324c:	f000 f910 	bl	8003470 <__malloc_lock>
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <_free_r+0x8c>)
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	b933      	cbnz	r3, 8003264 <_free_r+0x2c>
 8003256:	6063      	str	r3, [r4, #4]
 8003258:	6014      	str	r4, [r2, #0]
 800325a:	4628      	mov	r0, r5
 800325c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003260:	f000 b90c 	b.w	800347c <__malloc_unlock>
 8003264:	42a3      	cmp	r3, r4
 8003266:	d908      	bls.n	800327a <_free_r+0x42>
 8003268:	6820      	ldr	r0, [r4, #0]
 800326a:	1821      	adds	r1, r4, r0
 800326c:	428b      	cmp	r3, r1
 800326e:	bf01      	itttt	eq
 8003270:	6819      	ldreq	r1, [r3, #0]
 8003272:	685b      	ldreq	r3, [r3, #4]
 8003274:	1809      	addeq	r1, r1, r0
 8003276:	6021      	streq	r1, [r4, #0]
 8003278:	e7ed      	b.n	8003256 <_free_r+0x1e>
 800327a:	461a      	mov	r2, r3
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b10b      	cbz	r3, 8003284 <_free_r+0x4c>
 8003280:	42a3      	cmp	r3, r4
 8003282:	d9fa      	bls.n	800327a <_free_r+0x42>
 8003284:	6811      	ldr	r1, [r2, #0]
 8003286:	1850      	adds	r0, r2, r1
 8003288:	42a0      	cmp	r0, r4
 800328a:	d10b      	bne.n	80032a4 <_free_r+0x6c>
 800328c:	6820      	ldr	r0, [r4, #0]
 800328e:	4401      	add	r1, r0
 8003290:	1850      	adds	r0, r2, r1
 8003292:	4283      	cmp	r3, r0
 8003294:	6011      	str	r1, [r2, #0]
 8003296:	d1e0      	bne.n	800325a <_free_r+0x22>
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4401      	add	r1, r0
 800329e:	6011      	str	r1, [r2, #0]
 80032a0:	6053      	str	r3, [r2, #4]
 80032a2:	e7da      	b.n	800325a <_free_r+0x22>
 80032a4:	d902      	bls.n	80032ac <_free_r+0x74>
 80032a6:	230c      	movs	r3, #12
 80032a8:	602b      	str	r3, [r5, #0]
 80032aa:	e7d6      	b.n	800325a <_free_r+0x22>
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	1821      	adds	r1, r4, r0
 80032b0:	428b      	cmp	r3, r1
 80032b2:	bf01      	itttt	eq
 80032b4:	6819      	ldreq	r1, [r3, #0]
 80032b6:	685b      	ldreq	r3, [r3, #4]
 80032b8:	1809      	addeq	r1, r1, r0
 80032ba:	6021      	streq	r1, [r4, #0]
 80032bc:	6063      	str	r3, [r4, #4]
 80032be:	6054      	str	r4, [r2, #4]
 80032c0:	e7cb      	b.n	800325a <_free_r+0x22>
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	200002f0 	.word	0x200002f0

080032c8 <sbrk_aligned>:
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	4e0e      	ldr	r6, [pc, #56]	; (8003304 <sbrk_aligned+0x3c>)
 80032cc:	460c      	mov	r4, r1
 80032ce:	6831      	ldr	r1, [r6, #0]
 80032d0:	4605      	mov	r5, r0
 80032d2:	b911      	cbnz	r1, 80032da <sbrk_aligned+0x12>
 80032d4:	f000 f8bc 	bl	8003450 <_sbrk_r>
 80032d8:	6030      	str	r0, [r6, #0]
 80032da:	4621      	mov	r1, r4
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 f8b7 	bl	8003450 <_sbrk_r>
 80032e2:	1c43      	adds	r3, r0, #1
 80032e4:	d00a      	beq.n	80032fc <sbrk_aligned+0x34>
 80032e6:	1cc4      	adds	r4, r0, #3
 80032e8:	f024 0403 	bic.w	r4, r4, #3
 80032ec:	42a0      	cmp	r0, r4
 80032ee:	d007      	beq.n	8003300 <sbrk_aligned+0x38>
 80032f0:	1a21      	subs	r1, r4, r0
 80032f2:	4628      	mov	r0, r5
 80032f4:	f000 f8ac 	bl	8003450 <_sbrk_r>
 80032f8:	3001      	adds	r0, #1
 80032fa:	d101      	bne.n	8003300 <sbrk_aligned+0x38>
 80032fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003300:	4620      	mov	r0, r4
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	200002f4 	.word	0x200002f4

08003308 <_malloc_r>:
 8003308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330c:	1ccd      	adds	r5, r1, #3
 800330e:	f025 0503 	bic.w	r5, r5, #3
 8003312:	3508      	adds	r5, #8
 8003314:	2d0c      	cmp	r5, #12
 8003316:	bf38      	it	cc
 8003318:	250c      	movcc	r5, #12
 800331a:	2d00      	cmp	r5, #0
 800331c:	4607      	mov	r7, r0
 800331e:	db01      	blt.n	8003324 <_malloc_r+0x1c>
 8003320:	42a9      	cmp	r1, r5
 8003322:	d905      	bls.n	8003330 <_malloc_r+0x28>
 8003324:	230c      	movs	r3, #12
 8003326:	2600      	movs	r6, #0
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4630      	mov	r0, r6
 800332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003330:	4e2e      	ldr	r6, [pc, #184]	; (80033ec <_malloc_r+0xe4>)
 8003332:	f000 f89d 	bl	8003470 <__malloc_lock>
 8003336:	6833      	ldr	r3, [r6, #0]
 8003338:	461c      	mov	r4, r3
 800333a:	bb34      	cbnz	r4, 800338a <_malloc_r+0x82>
 800333c:	4629      	mov	r1, r5
 800333e:	4638      	mov	r0, r7
 8003340:	f7ff ffc2 	bl	80032c8 <sbrk_aligned>
 8003344:	1c43      	adds	r3, r0, #1
 8003346:	4604      	mov	r4, r0
 8003348:	d14d      	bne.n	80033e6 <_malloc_r+0xde>
 800334a:	6834      	ldr	r4, [r6, #0]
 800334c:	4626      	mov	r6, r4
 800334e:	2e00      	cmp	r6, #0
 8003350:	d140      	bne.n	80033d4 <_malloc_r+0xcc>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	4631      	mov	r1, r6
 8003356:	4638      	mov	r0, r7
 8003358:	eb04 0803 	add.w	r8, r4, r3
 800335c:	f000 f878 	bl	8003450 <_sbrk_r>
 8003360:	4580      	cmp	r8, r0
 8003362:	d13a      	bne.n	80033da <_malloc_r+0xd2>
 8003364:	6821      	ldr	r1, [r4, #0]
 8003366:	3503      	adds	r5, #3
 8003368:	1a6d      	subs	r5, r5, r1
 800336a:	f025 0503 	bic.w	r5, r5, #3
 800336e:	3508      	adds	r5, #8
 8003370:	2d0c      	cmp	r5, #12
 8003372:	bf38      	it	cc
 8003374:	250c      	movcc	r5, #12
 8003376:	4638      	mov	r0, r7
 8003378:	4629      	mov	r1, r5
 800337a:	f7ff ffa5 	bl	80032c8 <sbrk_aligned>
 800337e:	3001      	adds	r0, #1
 8003380:	d02b      	beq.n	80033da <_malloc_r+0xd2>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	442b      	add	r3, r5
 8003386:	6023      	str	r3, [r4, #0]
 8003388:	e00e      	b.n	80033a8 <_malloc_r+0xa0>
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	1b52      	subs	r2, r2, r5
 800338e:	d41e      	bmi.n	80033ce <_malloc_r+0xc6>
 8003390:	2a0b      	cmp	r2, #11
 8003392:	d916      	bls.n	80033c2 <_malloc_r+0xba>
 8003394:	1961      	adds	r1, r4, r5
 8003396:	42a3      	cmp	r3, r4
 8003398:	6025      	str	r5, [r4, #0]
 800339a:	bf18      	it	ne
 800339c:	6059      	strne	r1, [r3, #4]
 800339e:	6863      	ldr	r3, [r4, #4]
 80033a0:	bf08      	it	eq
 80033a2:	6031      	streq	r1, [r6, #0]
 80033a4:	5162      	str	r2, [r4, r5]
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	4638      	mov	r0, r7
 80033aa:	f104 060b 	add.w	r6, r4, #11
 80033ae:	f000 f865 	bl	800347c <__malloc_unlock>
 80033b2:	f026 0607 	bic.w	r6, r6, #7
 80033b6:	1d23      	adds	r3, r4, #4
 80033b8:	1af2      	subs	r2, r6, r3
 80033ba:	d0b6      	beq.n	800332a <_malloc_r+0x22>
 80033bc:	1b9b      	subs	r3, r3, r6
 80033be:	50a3      	str	r3, [r4, r2]
 80033c0:	e7b3      	b.n	800332a <_malloc_r+0x22>
 80033c2:	6862      	ldr	r2, [r4, #4]
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	bf0c      	ite	eq
 80033c8:	6032      	streq	r2, [r6, #0]
 80033ca:	605a      	strne	r2, [r3, #4]
 80033cc:	e7ec      	b.n	80033a8 <_malloc_r+0xa0>
 80033ce:	4623      	mov	r3, r4
 80033d0:	6864      	ldr	r4, [r4, #4]
 80033d2:	e7b2      	b.n	800333a <_malloc_r+0x32>
 80033d4:	4634      	mov	r4, r6
 80033d6:	6876      	ldr	r6, [r6, #4]
 80033d8:	e7b9      	b.n	800334e <_malloc_r+0x46>
 80033da:	230c      	movs	r3, #12
 80033dc:	4638      	mov	r0, r7
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	f000 f84c 	bl	800347c <__malloc_unlock>
 80033e4:	e7a1      	b.n	800332a <_malloc_r+0x22>
 80033e6:	6025      	str	r5, [r4, #0]
 80033e8:	e7de      	b.n	80033a8 <_malloc_r+0xa0>
 80033ea:	bf00      	nop
 80033ec:	200002f0 	.word	0x200002f0

080033f0 <_realloc_r>:
 80033f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f4:	4680      	mov	r8, r0
 80033f6:	4614      	mov	r4, r2
 80033f8:	460e      	mov	r6, r1
 80033fa:	b921      	cbnz	r1, 8003406 <_realloc_r+0x16>
 80033fc:	4611      	mov	r1, r2
 80033fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003402:	f7ff bf81 	b.w	8003308 <_malloc_r>
 8003406:	b92a      	cbnz	r2, 8003414 <_realloc_r+0x24>
 8003408:	f7ff ff16 	bl	8003238 <_free_r>
 800340c:	4625      	mov	r5, r4
 800340e:	4628      	mov	r0, r5
 8003410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003414:	f000 f838 	bl	8003488 <_malloc_usable_size_r>
 8003418:	4284      	cmp	r4, r0
 800341a:	4607      	mov	r7, r0
 800341c:	d802      	bhi.n	8003424 <_realloc_r+0x34>
 800341e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003422:	d812      	bhi.n	800344a <_realloc_r+0x5a>
 8003424:	4621      	mov	r1, r4
 8003426:	4640      	mov	r0, r8
 8003428:	f7ff ff6e 	bl	8003308 <_malloc_r>
 800342c:	4605      	mov	r5, r0
 800342e:	2800      	cmp	r0, #0
 8003430:	d0ed      	beq.n	800340e <_realloc_r+0x1e>
 8003432:	42bc      	cmp	r4, r7
 8003434:	4622      	mov	r2, r4
 8003436:	4631      	mov	r1, r6
 8003438:	bf28      	it	cs
 800343a:	463a      	movcs	r2, r7
 800343c:	f7ff fed4 	bl	80031e8 <memcpy>
 8003440:	4631      	mov	r1, r6
 8003442:	4640      	mov	r0, r8
 8003444:	f7ff fef8 	bl	8003238 <_free_r>
 8003448:	e7e1      	b.n	800340e <_realloc_r+0x1e>
 800344a:	4635      	mov	r5, r6
 800344c:	e7df      	b.n	800340e <_realloc_r+0x1e>
	...

08003450 <_sbrk_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	2300      	movs	r3, #0
 8003454:	4d05      	ldr	r5, [pc, #20]	; (800346c <_sbrk_r+0x1c>)
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f7fd f98e 	bl	800077c <_sbrk>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_sbrk_r+0x1a>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_sbrk_r+0x1a>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	200002e8 	.word	0x200002e8

08003470 <__malloc_lock>:
 8003470:	4801      	ldr	r0, [pc, #4]	; (8003478 <__malloc_lock+0x8>)
 8003472:	f7ff bea9 	b.w	80031c8 <__retarget_lock_acquire_recursive>
 8003476:	bf00      	nop
 8003478:	200002ec 	.word	0x200002ec

0800347c <__malloc_unlock>:
 800347c:	4801      	ldr	r0, [pc, #4]	; (8003484 <__malloc_unlock+0x8>)
 800347e:	f7ff bea4 	b.w	80031ca <__retarget_lock_release_recursive>
 8003482:	bf00      	nop
 8003484:	200002ec 	.word	0x200002ec

08003488 <_malloc_usable_size_r>:
 8003488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800348c:	1f18      	subs	r0, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	bfbc      	itt	lt
 8003492:	580b      	ldrlt	r3, [r1, r0]
 8003494:	18c0      	addlt	r0, r0, r3
 8003496:	4770      	bx	lr

08003498 <_init>:
 8003498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349a:	bf00      	nop
 800349c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349e:	bc08      	pop	{r3}
 80034a0:	469e      	mov	lr, r3
 80034a2:	4770      	bx	lr

080034a4 <_fini>:
 80034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a6:	bf00      	nop
 80034a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034aa:	bc08      	pop	{r3}
 80034ac:	469e      	mov	lr, r3
 80034ae:	4770      	bx	lr
